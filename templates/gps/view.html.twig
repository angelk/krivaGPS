{% extends "base.html.twig" %}

{% block content %}

    <h1>{{ track.name }}</h1>

    {% if canEdit %}
        <a href="{{ path('app_track_edit', {id: track.id}) }}" class="btn btn-info">Edit</a>
        <a href="{{ path('gps-new-version', {id:track.id}) }}" class="btn btn-info">add new version</a>
    {% endif %}

    <hr>

    <div style="height: 50vh; min-height: 300px; width: 100%;" id="map"></div>

    <br>

    <form method="post" action="{{ path('app_track_download_batch') }}">
        <table class="table">
            <tr>
                <td></td>
                <td>climb</td>
                <td>descent</td>
                <td>include in export</td>
            </tr>
        {% for version in track.versions %}
            <tr>
                <td>main track #{{ loop.index }}</td>
                <td>{{ version.positiveElevation|number_format(0, '', '\'') }} m</td>
                <td>{{ version.negativeElevation|number_format(0, '', '\'') }} m</td>
                <td>
                    <input type="checkbox" data-type="track-toggle" checked
                           id="{{ 'version_export_id' }}{{ loop.index }}"
                           name="versions[]"
                           value="{{ version.id }}"
                    />
                    <label for="{{ 'version_export_id' }}{{ loop.index }}">Export</label>
                </td>
            </tr>
        {% endfor %}
        {% for version in track.getUphillVersions(true) %}
            <tr>
                <td>uphill version #{{ loop.index }}</td>
                <td>{{ version.positiveElevation|number_format(0, '', '\'') }} m</td>
                <td>{{ version.negativeElevation|number_format(0, '', '\'') }} m</td>
                <td>
                    <input type="checkbox" data-type="track-toggle" checked
                           id="{{ 'uphill_export_id' }}{{ loop.index }}"
                           name="versions[]"
                           value="{{ version.id }}"
                    />
                    <label for="{{ 'uphill_export_id' }}{{ loop.index }}">Export</label>
                </td>
            </tr>
        {% endfor %}

        {% for version in track.downhillVersions(true) %}
            <tr>
                <td>downhill version #{{ loop.index }}</td>
                <td>{{ version.positiveElevation|number_format(0, '', '\'') }} m</td>
                <td>{{ version.negativeElevation|number_format(0, '', '\'') }} m</td>
                <td>
                    <input type="checkbox" data-type="track-toggle" checked
                           id="{{ 'downhill_export_id' }}{{ loop.index }}"
                           name="versions[]"
                           value="{{ version.id }}"
                    />
                    <label for="{{ 'downhill_export_id' }}{{ loop.index }}">Export</label>
                </td>
            </tr>
        {% endfor %}
        </table>

        <a class="btn btn-success" href="{{ path('gps-download', {id: track.id}) }}">download main track</a>
        <input type="submit" class="btn btn-success" value="download selected versions">
    </form>

    <div class="chart-container" style="height: 300px;">
        <canvas id="elevation" width="400" height="300">
            Elevation plot can't be shown!
            Your browser doesn't support canvas elements.
        </canvas>
    </div>

    <div>
        {% for youtube in track.videosYoutube %}
            <iframe width="560" height="315"
                    src="https://www.youtube.com/embed/{{ youtube.link }}"
                    frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
            </iframe>
        {% endfor %}
    </div>

    <script>
        var map = L.map(
            'map',
            {
                gestureHandling: true,
                center:[
                    ({{ track.pointNorthEastLat }} + {{ track.pointSouthWestLat }}) / 2,
                    ({{ track.pointSouthWestLng + track.pointNorthEastLng}}) / 2
                ],
                zoom: 12
            }
        );
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        {% set trackIndex = 0 %}

        {% for version in track.versions %}
            (function() {
                var latlngs = [];

                {% for point in version.points %}
                    latlngs.push([
                        {{ point.lat }},
                        {{ point.lng }}
                    ]);
                {% endfor %}

                var track = new AppTrack(
                    map,
                    [L.polyline(latlngs, {color: 'red'})]
                );

                {% for waypoint in version.waypoints %}
                    {
                        let waypoint = L.marker([{{ waypoint.lat }}, {{ waypoint.lng }}]);
                        waypoint.bindPopup({{ waypoint.name|json_encode|raw }});
                        track.addWaypoint(waypoint);
                    }
                {% endfor %}

                track.show();

                var buttonToggle = document.querySelectorAll("[data-type=track-toggle")[{{ trackIndex }}];
                buttonToggle.addEventListener('click', function() {
                    track.toggle();
                });
            })();

            {% set trackIndex = trackIndex + 1 %}
        {% endfor %}

        // uphills
        {% for version in track.getUphillVersions(true) %}
            (function() {
                var latlngs = [];

                {% for point in version.points %}
                latlngs.push([
                    {{ point.lat }},
                    {{ point.lng }}
                ]);
                {% endfor %}

                var track = new AppTrack(
                    map,
                    [L.polyline(latlngs, {color: 'green'})]
                );

                {% for waypoint in version.waypoints %}
                    {
                        let waypoint = L.marker([{{ waypoint.lat }}, {{ waypoint.lng }}]);
                        waypoint.bindPopup({{ waypoint.name|json_encode|raw }});
                        track.addWaypoint(waypoint);
                    }
                {% endfor %}

                track.show();

                var buttonToggle = document.querySelectorAll("[data-type=track-toggle")[{{ trackIndex }}];
                buttonToggle.addEventListener('click', function() {
                    track.toggle();
                });

            })();

            {% set trackIndex = trackIndex + 1 %}
        {% endfor %}


        // downhills
        {% for version in track.downhillVersions(true) %}
            (function() {
                var latlngs = [];

                {% for point in version.points %}
                    latlngs.push([
                        {{ point.lat }},
                        {{ point.lng }}
                    ]);
                {% endfor %}

                var track = new AppTrack(
                    map,
                    [L.polyline(latlngs, {color: 'orange'})]
                );

                {% for waypoint in version.waypoints %}
                    {
                        let waypoint = L.marker([{{ waypoint.lat }}, {{ waypoint.lng }}]);
                        waypoint.bindPopup({{ waypoint.name|json_encode|raw }});
                        track.addWaypoint(waypoint);
                    }
                {% endfor %}

                track.show();

                var buttonToggle = document.querySelectorAll("[data-type=track-toggle")[{{ trackIndex }}];
                buttonToggle.addEventListener('click', function() {
                    track.toggle();
                });
            })();

            {% set trackIndex = trackIndex + 1 %}
        {% endfor %}

        // elevation plot
        var ctx = document.getElementById('elevation').getContext('2d');
        var myChart = new window.chartJs(ctx, {
            type: 'line',
            data: {
                labels: {{ elevationLabels|json_encode|raw }},
                datasets: {{ elevationData|json_encode|raw }}
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: false
                        }
                    }]
                },
                tooltips: {
                    mode: 'nearest'
                }
            }
        });
    </script>
{% endblock %}
