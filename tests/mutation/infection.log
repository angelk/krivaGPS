Escaped mutants:
================


1) /var/www/src/Entity/Point/PointTrait.php:29    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function distance(PointInterface $point) : float
     {
-        $r = 6371000;
+        $r = 6371001;
         $dLan = deg2rad($point->getLat() - $this->getLat());
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());


2) /var/www/src/Entity/Point/PointTrait.php:29    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function distance(PointInterface $point) : float
     {
-        $r = 6371000;
+        $r = 6370999;
         $dLan = deg2rad($point->getLat() - $this->getLat());
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());


3) /var/www/src/Entity/Point/PointTrait.php:37    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan / 1) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

4) /var/www/src/Entity/Point/PointTrait.php:37    [M] Multiplication

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) / cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

5) /var/www/src/Entity/Point/PointTrait.php:37    [M] Multiplication

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 / cos($lat1) * cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

6) /var/www/src/Entity/Point/PointTrait.php:37    [M] Division

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan / 2) ** 2 + sin($dLng * 2) ** 2 * cos($lat1) * cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

7) /var/www/src/Entity/Point/PointTrait.php:37    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan / 2) ** 2 + sin($dLng / 1) ** 2 * cos($lat1) * cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

8) /var/www/src/Entity/Point/PointTrait.php:37    [M] Division

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan * 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

9) /var/www/src/Entity/Point/PointTrait.php:37    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $dLng = deg2rad($point->getLng() - $this->getLng());
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
-        $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
+        $a = sin($dLan / 3) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
         $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }

10) /var/www/src/Entity/Point/PointTrait.php:38    [M] Minus

--- Original
+++ New
@@ @@
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
         $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
-        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
+        $c = 2 * atan2(sqrt($a), sqrt(1 + $a));
         return $c * $r;
     }
 }


11) /var/www/src/Entity/Point/PointTrait.php:38    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $lat1 = deg2rad($this->getLat());
         $lat2 = deg2rad($point->getLat());
         $a = sin($dLan / 2) ** 2 + sin($dLng / 2) ** 2 * cos($lat1) * cos($lat2);
-        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
+        $c = 3 * atan2(sqrt($a), sqrt(1 - $a));
         return $c * $r;
     }
 }


12) /var/www/src/Entity/Track.php:217    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addVersion(Version $version)
     {
-        $version->setTrack($this);
+        
         $this->versions->add($version);
     }
     public function addImage(Image $image)


13) /var/www/src/Entity/Track.php:223    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addImage(Image $image)
     {
-        $this->images->add($image);
+        
     }
     /**
      * @return ArrayCollection|Version[]


14) /var/www/src/Entity/Track.php:263    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Track[]
      */
-    public function getUphills() : array
+    protected function getUphills() : array
     {
         return $this->uphills->toArray();
     }


15) /var/www/src/Entity/Track.php:291    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Track[]
      */
-    public function getDownhills()
+    protected function getDownhills()
     {
         return $this->downhills->toArray();
     }


16) /var/www/src/Entity/Track.php:296    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         return $this->downhills->toArray();
     }
-    public function getDownhillVersions($useCache = false, $ignoredTracks = []) : array
+    public function getDownhillVersions($useCache = true, $ignoredTracks = []) : array
     {
         if ($useCache && $this->downhillVersionsCache !== null) {
             return $this->downhillVersionsCache;


17) /var/www/src/Entity/Track.php:298    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getDownhillVersions($useCache = false, $ignoredTracks = []) : array
     {
-        if ($useCache && $this->downhillVersionsCache !== null) {
+        if ($useCache || $this->downhillVersionsCache !== null) {
             return $this->downhillVersionsCache;
         }
         $ignoredTracks[] = $this;


18) /var/www/src/Entity/Track.php:298    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     public function getDownhillVersions($useCache = false, $ignoredTracks = []) : array
     {
-        if ($useCache && $this->downhillVersionsCache !== null) {
+        if ($useCache && $this->downhillVersionsCache === null) {
             return $this->downhillVersionsCache;
         }
         $ignoredTracks[] = $this;


19) /var/www/src/Entity/Track.php:306    [M] Continue_

--- Original
+++ New
@@ @@
         $versions = [];
         foreach ($this->getDownhills() as $downhills) {
             if (array_search($downhills, $ignoredTracks) !== false) {
-                continue;
+                break;
             }
             foreach ($downhills->getVersions() as $version) {
                 $versions[] = $version;


20) /var/www/src/Entity/Track.php:321    [M] FalseValue

--- Original
+++ New
@@ @@
         }
         return $versions;
     }
-    public function getUphillVersions($useCache = false, $ignoredTracks = []) : array
+    public function getUphillVersions($useCache = true, $ignoredTracks = []) : array
     {
         if ($useCache && $this->uphillVersionsCache !== null) {
             return $this->uphillVersionsCache;


21) /var/www/src/Entity/Track.php:323    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getUphillVersions($useCache = false, $ignoredTracks = []) : array
     {
-        if ($useCache && $this->uphillVersionsCache !== null) {
+        if ($useCache || $this->uphillVersionsCache !== null) {
             return $this->uphillVersionsCache;
         }
         $ignoredTracks[] = $this;


22) /var/www/src/Entity/Track.php:323    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     public function getUphillVersions($useCache = false, $ignoredTracks = []) : array
     {
-        if ($useCache && $this->uphillVersionsCache !== null) {
+        if ($useCache && $this->uphillVersionsCache === null) {
             return $this->uphillVersionsCache;
         }
         $ignoredTracks[] = $this;


23) /var/www/src/Entity/Track.php:331    [M] Continue_

--- Original
+++ New
@@ @@
         $versions = [];
         foreach ($this->getUphills() as $uphills) {
             if (array_search($uphills, $ignoredTracks) !== false) {
-                continue;
+                break;
             }
             foreach ($uphills->getVersions() as $version) {
                 $versions[] = $version;


24) /var/www/src/Entity/Track/Image.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->sendBy = $sendBy;
         $this->track = $track;
         $this->createdAt = new \DateTime();
-        $track->addImage($this);
+        
     }
     public function getId() : ?string
     {


25) /var/www/src/Entity/Track/Version.php:109    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addPoint(Point $p)
     {
-        $p->setVersion($this);
+        
         $this->points->add($p);
     }
     public function addWayPoint(WayPoint $wp)


26) /var/www/src/Entity/Track/Version.php:110    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function addPoint(Point $p)
     {
         $p->setVersion($this);
-        $this->points->add($p);
+        
     }
     public function addWayPoint(WayPoint $wp)
     {


27) /var/www/src/Entity/User/User.php:45    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private $ratings;
     public function __construct()
     {
-        parent::__construct();
+        
         $this->ratings = new ArrayCollection();
     }
     public function getFacebookId() : ?string


28) /var/www/src/EntityTraits/NameTrait.php:23    [M] NotIdentical

--- Original
+++ New
@@ @@
      */
     public function getName(string $locale) : ?string
     {
-        if ($locale === 'bg' && $this->nameBg !== null) {
+        if ($locale === 'bg' && $this->nameBg === null) {
             return $this->nameBg;
         }
         if ($this->nameEn === null) {


29) /var/www/src/Track/Processor.php:24    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function isPointReal(Point $pointA, Point $pointB) : bool
     {
-        foreach ($this->twoPointsCheckers as $singlePointChecker) {
+        foreach (array() as $singlePointChecker) {
             if (!$singlePointChecker->isReal($pointA, $pointB)) {
                 return false;
             }


30) /var/www/src/Track/Processor.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function process(string $source, Version $version)
     {
-        $version->getPoints()->clear();
+        
         $xml = simplexml_load_string($source);
         if ($xml === false) {
             throw new \RuntimeException("Xml load failed");


31) /var/www/src/Track/Processor.php:38    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $version->getPoints()->clear();
         $xml = simplexml_load_string($source);
-        if ($xml === false) {
+        if ($xml === true) {
             throw new \RuntimeException("Xml load failed");
         }
         if ($xml->getName() != "gpx") {


32) /var/www/src/Track/Processor.php:47    [M] DecrementInteger

--- Original
+++ New
@@ @@
             throw new \RuntimeException("Xml invalid format");
         }
         $previousPoint = null;
-        $order = 0;
+        $order = -1;
         $positiveElevation = 0;
         $negativeElevation = 0;
         $version->getWayPoints()->clear();


33) /var/www/src/Track/Processor.php:47    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             throw new \RuntimeException("Xml invalid format");
         }
         $previousPoint = null;
-        $order = 0;
+        $order = 1;
         $positiveElevation = 0;
         $negativeElevation = 0;
         $version->getWayPoints()->clear();


34) /var/www/src/Track/Processor.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $order = 0;
         $positiveElevation = 0;
         $negativeElevation = 0;
-        $version->getWayPoints()->clear();
+        
         foreach ($xml->trk as $track) {
             foreach ($track->trkseg as $trackSegment) {
                 $previousElevation = null;


35) /var/www/src/Track/Processor.php:65    [M] Continue_

--- Original
+++ New
@@ @@
                      * Skip if one or both of them are missing.
                      */
                     if (!isset($attributes['lat']) || !isset($attributes['lon'])) {
-                        /* TODO: Throw an exception for corrupted GPX file? */
-                        continue;
+                        break;
                     }
                     $lat = (float) $attributes['lat'];
                     $lon = (float) $attributes['lon'];

36) /var/www/src/Track/Processor.php:78    [M] LessThan

--- Original
+++ New
@@ @@
                      * exception.
                      * Same applies for longtitude, but the range is -180, 180.
                      */
-                    if ($lat < -90 || $lat > 90) {
+                    if ($lat <= -90 || $lat > 90) {
                         throw new \UnexpectedValueException("Invalid latitude value " . $lat);
                     }
                     if ($lon < -180 || $lon > 180) {


37) /var/www/src/Track/Processor.php:78    [M] GreaterThan

--- Original
+++ New
@@ @@
                      * exception.
                      * Same applies for longtitude, but the range is -180, 180.
                      */
-                    if ($lat < -90 || $lat > 90) {
+                    if ($lat < -90 || $lat >= 90) {
                         throw new \UnexpectedValueException("Invalid latitude value " . $lat);
                     }
                     if ($lon < -180 || $lon > 180) {


38) /var/www/src/Track/Processor.php:82    [M] GreaterThan

--- Original
+++ New
@@ @@
                     if ($lat < -90 || $lat > 90) {
                         throw new \UnexpectedValueException("Invalid latitude value " . $lat);
                     }
-                    if ($lon < -180 || $lon > 180) {
+                    if ($lon < -180 || $lon >= 180) {
                         throw new \UnexpectedValueException("Invalid longitude value " . $lon);
                     }
                     $point = new Point($order, $lat, $lon);


39) /var/www/src/Track/Processor.php:82    [M] LessThan

--- Original
+++ New
@@ @@
                     if ($lat < -90 || $lat > 90) {
                         throw new \UnexpectedValueException("Invalid latitude value " . $lat);
                     }
-                    if ($lon < -180 || $lon > 180) {
+                    if ($lon <= -180 || $lon > 180) {
                         throw new \UnexpectedValueException("Invalid longitude value " . $lon);
                     }
                     $point = new Point($order, $lat, $lon);


40) /var/www/src/Track/Processor.php:98    [M] Plus

--- Original
+++ New
@@ @@
                     }
                     if ($previousPoint) {
                         $distance = $point->distance($previousPoint);
-                        $point->setDistance($distance + $previousPoint->getDistance());
+                        $point->setDistance($distance - $previousPoint->getDistance());
                         if ($previousElevation && $point->getElevation()) {
                             if ($point->getElevation() > $previousElevation) {
                                 $elevationChange = $point->getElevation() - $previousElevation;


41) /var/www/src/Track/Processor.php:101    [M] GreaterThan

--- Original
+++ New
@@ @@
                         $distance = $point->distance($previousPoint);
                         $point->setDistance($distance + $previousPoint->getDistance());
                         if ($previousElevation && $point->getElevation()) {
-                            if ($point->getElevation() > $previousElevation) {
+                            if ($point->getElevation() >= $previousElevation) {
                                 $elevationChange = $point->getElevation() - $previousElevation;
                                 if ($previousRealPoint === null || $this->isPointReal($previousRealPoint, $point)) {
                                     $positiveElevation += $elevationChange;


42) /var/www/src/Track/Processor.php:104    [M] Assignment

--- Original
+++ New
@@ @@
                             if ($point->getElevation() > $previousElevation) {
                                 $elevationChange = $point->getElevation() - $previousElevation;
                                 if ($previousRealPoint === null || $this->isPointReal($previousRealPoint, $point)) {
-                                    $positiveElevation += $elevationChange;
+                                    $positiveElevation = $elevationChange;
                                     $previousRealPoint = $point;
                                 } else {
                                     $point->setElevation();


43) /var/www/src/Track/Processor.php:107    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                                     $positiveElevation += $elevationChange;
                                     $previousRealPoint = $point;
                                 } else {
-                                    $point->setElevation();
+                                    
                                 }
                             } else {
                                 $elevationChange = $previousElevation - $point->getElevation();


44) /var/www/src/Track/Processor.php:111    [M] Identical

--- Original
+++ New
@@ @@
                                 }
                             } else {
                                 $elevationChange = $previousElevation - $point->getElevation();
-                                if ($previousRealPoint === null || $this->isPointReal($previousRealPoint, $point)) {
+                                if ($previousRealPoint !== null || $this->isPointReal($previousRealPoint, $point)) {
                                     $negativeElevation += $elevationChange;
                                     $previousRealPoint = $point;
                                 } else {


45) /var/www/src/Track/Processor.php:112    [M] Assignment

--- Original
+++ New
@@ @@
                             } else {
                                 $elevationChange = $previousElevation - $point->getElevation();
                                 if ($previousRealPoint === null || $this->isPointReal($previousRealPoint, $point)) {
-                                    $negativeElevation += $elevationChange;
+                                    $negativeElevation = $elevationChange;
                                     $previousRealPoint = $point;
                                 } else {
                                     $point->setElevation();


46) /var/www/src/Track/Processor.php:123    [M] Increment

--- Original
+++ New
@@ @@
                         }
                     }
                     $version->addPoint($point);
-                    $order++;
+                    $order--;
                     $previousPoint = $point;
                     if ($point->getElevation()) {
                         $previousElevation = $point->getElevation();


47) /var/www/src/Track/Processor.php:142    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $wayPointXmlAttr = $wayPointXml->attributes();
             $wayPoint = new Track\WayPoint((float) $wayPointXmlAttr['lat'], (float) $wayPointXmlAttr['lon']);
             if ($wayPointXml->ele) {
-                $wayPoint->setElevation(floatval($wayPointXml->ele));
+                
             }
             if ($wayPointXml->name) {
                 $wayPoint->setName($wayPointXml->name);


48) /var/www/src/Track/Processor.php:146    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $wayPoint->setElevation(floatval($wayPointXml->ele));
             }
             if ($wayPointXml->name) {
-                $wayPoint->setName($wayPointXml->name);
+                
             }
             $version->addWayPoint($wayPoint);
         }


49) /var/www/src/Track/TwoPointsChecker/ElevationChecker.php:22    [M] Minus

--- Original
+++ New
@@ @@
     public function isReal(Point $pointA, Point $pointB) : bool
     {
         $distance = $pointA->distance($pointB);
-        $elevation = abs($pointA->getElevation() - $pointB->getElevation());
+        $elevation = abs($pointA->getElevation() + $pointB->getElevation());
         $atan = atan2($elevation, $distance);
         $angle = rad2deg($atan);
         if ($angle > $this->maxAngle) {


50) /var/www/src/Track/TwoPointsChecker/ElevationChecker.php:26    [M] GreaterThan

--- Original
+++ New
@@ @@
         $elevation = abs($pointA->getElevation() - $pointB->getElevation());
         $atan = atan2($elevation, $distance);
         $angle = rad2deg($atan);
-        if ($angle > $this->maxAngle) {
+        if ($angle >= $this->maxAngle) {
             return false;
         }
         return true;
     }
Timed Out mutants:
==================

Not Covered mutants:
====================


1) /var/www/src/Admin/TrackAdmin.php:18    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
 {
     protected function configureRoutes(RouteCollection $collection)
     {
-        parent::configureRoutes($collection);
+        
         $collection->remove('create');
         $collection->remove('delete');
     }


2) /var/www/src/Admin/TrackAdmin.php:19    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function configureRoutes(RouteCollection $collection)
     {
         parent::configureRoutes($collection);
-        $collection->remove('create');
+        
         $collection->remove('delete');
     }
     protected function configureShowFields(ShowMapper $showMapper)


3) /var/www/src/Admin/TrackAdmin.php:20    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         parent::configureRoutes($collection);
         $collection->remove('create');
-        $collection->remove('delete');
+        
     }
     protected function configureShowFields(ShowMapper $showMapper)
     {


4) /var/www/src/Admin/TrackAdmin.php:25    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureShowFields(ShowMapper $showMapper)
     {
-        $showMapper->add('nameEn')->add('nameBg')->add('id')->add('type');
+        
     }
     protected function configureListFields(ListMapper $listMapper)
     {


5) /var/www/src/Admin/TrackAdmin.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureListFields(ListMapper $listMapper)
     {
-        $listMapper->addIdentifier('id')->add('nameEn')->add('nameBg')->add('slug')->add('sendBy')->add('_action', 'actions', ['actions' => ['edit' => []]]);
+        
     }
     protected function configureFormFields(FormMapper $formMapper)
     {


6) /var/www/src/Admin/TrackAdmin.php:41    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureListFields(ListMapper $listMapper)
     {
-        $listMapper->addIdentifier('id')->add('nameEn')->add('nameBg')->add('slug')->add('sendBy')->add('_action', 'actions', ['actions' => ['edit' => []]]);
+        $listMapper->addIdentifier('id')->add('nameEn')->add('nameBg')->add('slug')->add('sendBy')->add('_action', 'actions', []);
     }
     protected function configureFormFields(FormMapper $formMapper)
     {


7) /var/www/src/Admin/TrackAdmin.php:42    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureListFields(ListMapper $listMapper)
     {
-        $listMapper->addIdentifier('id')->add('nameEn')->add('nameBg')->add('slug')->add('sendBy')->add('_action', 'actions', ['actions' => ['edit' => []]]);
+        $listMapper->addIdentifier('id')->add('nameEn')->add('nameBg')->add('slug')->add('sendBy')->add('_action', 'actions', ['actions' => []]);
     }
     protected function configureFormFields(FormMapper $formMapper)
     {


8) /var/www/src/Admin/TrackAdmin.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureFormFields(FormMapper $formMapper)
     {
-        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
+        
     }
     protected function configureDatagridFilters(DatagridMapper $datagridMapper)
     {


9) /var/www/src/Admin/TrackAdmin.php:57    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureFormFields(FormMapper $formMapper)
     {
-        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
+        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
     }
     protected function configureDatagridFilters(DatagridMapper $datagridMapper)
     {


10) /var/www/src/Admin/TrackAdmin.php:59    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     protected function configureFormFields(FormMapper $formMapper)
     {
-        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
+        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => false])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
     }
     protected function configureDatagridFilters(DatagridMapper $datagridMapper)
     {


11) /var/www/src/Admin/TrackAdmin.php:65    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureFormFields(FormMapper $formMapper)
     {
-        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
+        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['multiple' => true])->add('sendBy')->end();
     }
     protected function configureDatagridFilters(DatagridMapper $datagridMapper)
     {


12) /var/www/src/Admin/TrackAdmin.php:67    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     protected function configureFormFields(FormMapper $formMapper)
     {
-        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('sendBy')->end();
+        $formMapper->add('nameEn')->add('nameBg')->add('type')->add('uphills', EntityType::class, ['class' => Track::class, 'multiple' => true])->add('downhills', EntityType::class, ['class' => Track::class, 'multiple' => false])->add('sendBy')->end();
     }
     protected function configureDatagridFilters(DatagridMapper $datagridMapper)
     {


13) /var/www/src/Admin/TrackAdmin.php:76    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureDatagridFilters(DatagridMapper $datagridMapper)
     {
-        $datagridMapper->add('id')->add('nameEn')->add('nameBg')->add('slug');
+        
     }
 }


14) /var/www/src/Admin/UserAdmin.php:15    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
 {
     protected function configureRoutes(RouteCollection $collection)
     {
-        parent::configureRoutes($collection);
+        
         $collection->remove('create');
     }
     protected function configureShowFields(ShowMapper $showMapper)


15) /var/www/src/Admin/UserAdmin.php:16    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function configureRoutes(RouteCollection $collection)
     {
         parent::configureRoutes($collection);
-        $collection->remove('create');
+        
     }
     protected function configureShowFields(ShowMapper $showMapper)
     {


16) /var/www/src/Admin/UserAdmin.php:21    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureShowFields(ShowMapper $showMapper)
     {
-        $showMapper->add('id');
+        
     }
     protected function configureListFields(ListMapper $listMapper)
     {


17) /var/www/src/Admin/UserAdmin.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureListFields(ListMapper $listMapper)
     {
-        $listMapper->addIdentifier('id')->add('email')->add('enabled')->add('username')->add('_action', 'actions', ['actions' => ['edit' => [], 'delete' => []]]);
+        
     }
     protected function configureFormFields(FormMapper $formMapper)
     {


18) /var/www/src/Admin/UserAdmin.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureListFields(ListMapper $listMapper)
     {
-        $listMapper->addIdentifier('id')->add('email')->add('enabled')->add('username')->add('_action', 'actions', ['actions' => ['edit' => [], 'delete' => []]]);
+        $listMapper->addIdentifier('id')->add('email')->add('enabled')->add('username')->add('_action', 'actions', []);
     }
     protected function configureFormFields(FormMapper $formMapper)
     {


19) /var/www/src/Admin/UserAdmin.php:34    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureListFields(ListMapper $listMapper)
     {
-        $listMapper->addIdentifier('id')->add('email')->add('enabled')->add('username')->add('_action', 'actions', ['actions' => ['edit' => [], 'delete' => []]]);
+        $listMapper->addIdentifier('id')->add('email')->add('enabled')->add('username')->add('_action', 'actions', ['actions' => ['delete' => []]]);
     }
     protected function configureFormFields(FormMapper $formMapper)
     {


20) /var/www/src/Admin/UserAdmin.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureFormFields(FormMapper $formMapper)
     {
-        $formMapper->add('id')->add('email')->end();
+        
     }
 }


21) /var/www/src/Command/ReprocessGpsData.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->em = $em;
         $this->processor = $processor;
-        parent::__construct();
+        
     }
     protected function execute(InputInterface $input, OutputInterface $output)
     {


22) /var/www/src/Command/ReprocessGpsData.php:33    [M] Foreach_

--- Original
+++ New
@@ @@
         // @TODO use query and fetch tracks 1 by 1
         $repo = $this->em->getRepository(Track::class);
         $trackCollection = $repo->findAll();
-        foreach ($trackCollection as $track) {
+        foreach (array() as $track) {
             /* @var $track Track */
             $output->writeln("Processing track {$track->getId()}", OutputInterface::VERBOSITY_VERBOSE);
             $track->prepareForRecalculation();


23) /var/www/src/Command/ReprocessGpsData.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $repo = $this->em->getRepository(Track::class);
         $trackCollection = $repo->findAll();
         foreach ($trackCollection as $track) {
-            /* @var $track Track */
-            $output->writeln("Processing track {$track->getId()}", OutputInterface::VERBOSITY_VERBOSE);
+            
             $track->prepareForRecalculation();
             $optimizedVersionIndex = 0;
             foreach ($track->getVersions() as $versionIndex => $version) {

24) /var/www/src/Command/ReprocessGpsData.php:37    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($trackCollection as $track) {
             /* @var $track Track */
             $output->writeln("Processing track {$track->getId()}", OutputInterface::VERBOSITY_VERBOSE);
-            $track->prepareForRecalculation();
+            
             $optimizedVersionIndex = 0;
             foreach ($track->getVersions() as $versionIndex => $version) {
                 $output->writeln("Processing version {$versionIndex}");


25) /var/www/src/Command/ReprocessGpsData.php:39    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             /* @var $track Track */
             $output->writeln("Processing track {$track->getId()}", OutputInterface::VERBOSITY_VERBOSE);
             $track->prepareForRecalculation();
-            $optimizedVersionIndex = 0;
+            $optimizedVersionIndex = 1;
             foreach ($track->getVersions() as $versionIndex => $version) {
                 $output->writeln("Processing version {$versionIndex}");
                 $processor->process($version->getFile()->getFileContent(), $version);


26) /var/www/src/Command/ReprocessGpsData.php:39    [M] DecrementInteger

--- Original
+++ New
@@ @@
             /* @var $track Track */
             $output->writeln("Processing track {$track->getId()}", OutputInterface::VERBOSITY_VERBOSE);
             $track->prepareForRecalculation();
-            $optimizedVersionIndex = 0;
+            $optimizedVersionIndex = -1;
             foreach ($track->getVersions() as $versionIndex => $version) {
                 $output->writeln("Processing version {$versionIndex}");
                 $processor->process($version->getFile()->getFileContent(), $version);


27) /var/www/src/Command/ReprocessGpsData.php:40    [M] Foreach_

--- Original
+++ New
@@ @@
             $output->writeln("Processing track {$track->getId()}", OutputInterface::VERBOSITY_VERBOSE);
             $track->prepareForRecalculation();
             $optimizedVersionIndex = 0;
-            foreach ($track->getVersions() as $versionIndex => $version) {
+            foreach (array() as $versionIndex => $version) {
                 $output->writeln("Processing version {$versionIndex}");
                 $processor->process($version->getFile()->getFileContent(), $version);
                 foreach ($processor->generateOptimizedPoints($version) as $optimizedPoint) {


28) /var/www/src/Command/ReprocessGpsData.php:41    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->prepareForRecalculation();
             $optimizedVersionIndex = 0;
             foreach ($track->getVersions() as $versionIndex => $version) {
-                $output->writeln("Processing version {$versionIndex}");
+                
                 $processor->process($version->getFile()->getFileContent(), $version);
                 foreach ($processor->generateOptimizedPoints($version) as $optimizedPoint) {
                     $optimizedPoint->setVersionIndex($optimizedVersionIndex);


29) /var/www/src/Command/ReprocessGpsData.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $optimizedVersionIndex = 0;
             foreach ($track->getVersions() as $versionIndex => $version) {
                 $output->writeln("Processing version {$versionIndex}");
-                $processor->process($version->getFile()->getFileContent(), $version);
+                
                 foreach ($processor->generateOptimizedPoints($version) as $optimizedPoint) {
                     $optimizedPoint->setVersionIndex($optimizedVersionIndex);
                     $track->addOptimizedPoint($optimizedPoint);


30) /var/www/src/Command/ReprocessGpsData.php:48    [M] Foreach_

--- Original
+++ New
@@ @@
             foreach ($track->getVersions() as $versionIndex => $version) {
                 $output->writeln("Processing version {$versionIndex}");
                 $processor->process($version->getFile()->getFileContent(), $version);
-                foreach ($processor->generateOptimizedPoints($version) as $optimizedPoint) {
+                foreach (array() as $optimizedPoint) {
                     $optimizedPoint->setVersionIndex($optimizedVersionIndex);
                     $track->addOptimizedPoint($optimizedPoint);
                 }


31) /var/www/src/Command/ReprocessGpsData.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $output->writeln("Processing version {$versionIndex}");
                 $processor->process($version->getFile()->getFileContent(), $version);
                 foreach ($processor->generateOptimizedPoints($version) as $optimizedPoint) {
-                    $optimizedPoint->setVersionIndex($optimizedVersionIndex);
+                    
                     $track->addOptimizedPoint($optimizedPoint);
                 }
                 $optimizedVersionIndex++;


32) /var/www/src/Command/ReprocessGpsData.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $processor->process($version->getFile()->getFileContent(), $version);
                 foreach ($processor->generateOptimizedPoints($version) as $optimizedPoint) {
                     $optimizedPoint->setVersionIndex($optimizedVersionIndex);
-                    $track->addOptimizedPoint($optimizedPoint);
+                    
                 }
                 $optimizedVersionIndex++;
             }


33) /var/www/src/Command/ReprocessGpsData.php:53    [M] Increment

--- Original
+++ New
@@ @@
                     $optimizedPoint->setVersionIndex($optimizedVersionIndex);
                     $track->addOptimizedPoint($optimizedPoint);
                 }
-                $optimizedVersionIndex++;
+                $optimizedVersionIndex--;
             }
             $processor->postProcess($track);
             $this->em->flush();


34) /var/www/src/Command/ReprocessGpsData.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
                 $optimizedVersionIndex++;
             }
-            $processor->postProcess($track);
+            
             $this->em->flush();
         }
     }
 }

35) /var/www/src/Command/ReprocessGpsData.php:58    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $optimizedVersionIndex++;
             }
             $processor->postProcess($track);
-            $this->em->flush();
+            
         }
     }
 }


36) /var/www/src/Controller/Home.php:16    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use App\Entity\Track;
 class Home extends AbstractController
 {
-    public function index()
+    protected function index()
     {
         return $this->redirectToRoute('home');
     }


37) /var/www/src/Controller/Home.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->redirectToRoute('home');
     }
-    public function home(TrackRepository $repo, ImageRepository $imageRepository)
+    protected function home(TrackRepository $repo, ImageRepository $imageRepository)
     {
         $trackData = $repo->findLatestTrackTypes();
         // average picture width is 300px


38) /var/www/src/Controller/Home.php:28    [M] DecrementInteger

--- Original
+++ New
@@ @@
         // average picture width is 300px
         // 1920 / 300 = 6.4
         // 3840 / 300 = 12.8
-        $images = $imageRepository->getLatestImages(10);
+        $images = $imageRepository->getLatestImages(9);
         return $this->render('home/home.html.twig', ['latestTracks' => $trackData[Track::TYPE_CYCLING], 'latestTracksHike' => $trackData[Track::TYPE_HIKING], 'latestImages' => $images]);
     }
     public function find($neLat, $neLon, $swLat, $swLon, Request $request, TrackRepository $repo)


39) /var/www/src/Controller/Home.php:28    [M] IncrementInteger

--- Original
+++ New
@@ @@
         // average picture width is 300px
         // 1920 / 300 = 6.4
         // 3840 / 300 = 12.8
-        $images = $imageRepository->getLatestImages(10);
+        $images = $imageRepository->getLatestImages(11);
         return $this->render('home/home.html.twig', ['latestTracks' => $trackData[Track::TYPE_CYCLING], 'latestTracksHike' => $trackData[Track::TYPE_HIKING], 'latestImages' => $images]);
     }
     public function find($neLat, $neLon, $swLat, $swLon, Request $request, TrackRepository $repo)


40) /var/www/src/Controller/Home.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // 1920 / 300 = 6.4
         // 3840 / 300 = 12.8
         $images = $imageRepository->getLatestImages(10);
-        return $this->render('home/home.html.twig', ['latestTracks' => $trackData[Track::TYPE_CYCLING], 'latestTracksHike' => $trackData[Track::TYPE_HIKING], 'latestImages' => $images]);
+        return $this->render('home/home.html.twig', ['latestTracksHike' => $trackData[Track::TYPE_HIKING], 'latestImages' => $images]);
     }
     public function find($neLat, $neLon, $swLat, $swLon, Request $request, TrackRepository $repo)
     {


41) /var/www/src/Controller/Home.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $images = $imageRepository->getLatestImages(10);
         return $this->render('home/home.html.twig', ['latestTracks' => $trackData[Track::TYPE_CYCLING], 'latestTracksHike' => $trackData[Track::TYPE_HIKING], 'latestImages' => $images]);
     }
-    public function find($neLat, $neLon, $swLat, $swLon, Request $request, TrackRepository $repo)
+    protected function find($neLat, $neLon, $swLat, $swLon, Request $request, TrackRepository $repo)
     {
         $skipTracks = $request->request->get('skipTracks', '');
         $skipTracksAsArray = explode(',', $skipTracks);


42) /var/www/src/Controller/Home.php:51    [M] NewObject

--- Original
+++ New
@@ @@
         $skipTracks = $request->request->get('skipPlaces', '');
         $skipPlacesAsArray = explode(',', $skipTracks);
         $places = $this->findPlaces($neLat, $neLon, $swLat, $swLon, $skipPlacesAsArray, $request->getLocale());
-        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
+        new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
+        return null;
     }
     private function findTracks($neLat, $neLon, $swLat, $swLon, $repo, $skipTracks, $locale)
     {

43) /var/www/src/Controller/Home.php:52    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $skipTracks = $request->request->get('skipPlaces', '');
         $skipPlacesAsArray = explode(',', $skipTracks);
         $places = $this->findPlaces($neLat, $neLon, $swLat, $swLon, $skipPlacesAsArray, $request->getLocale());
-        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
+        return new Response(json_encode(['places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
     }
     private function findTracks($neLat, $neLon, $swLat, $swLon, $repo, $skipTracks, $locale)
     {


44) /var/www/src/Controller/Home.php:53    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $skipTracks = $request->request->get('skipPlaces', '');
         $skipPlacesAsArray = explode(',', $skipTracks);
         $places = $this->findPlaces($neLat, $neLon, $swLat, $swLon, $skipPlacesAsArray, $request->getLocale());
-        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
+        return new Response(json_encode(['tracks' => ['data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
     }
     private function findTracks($neLat, $neLon, $swLat, $swLon, $repo, $skipTracks, $locale)
     {


45) /var/www/src/Controller/Home.php:57    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $skipTracks = $request->request->get('skipPlaces', '');
         $skipPlacesAsArray = explode(',', $skipTracks);
         $places = $this->findPlaces($neLat, $neLon, $swLat, $swLon, $skipPlacesAsArray, $request->getLocale());
-        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
+        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
     }
     private function findTracks($neLat, $neLon, $swLat, $swLon, $repo, $skipTracks, $locale)
     {


46) /var/www/src/Controller/Home.php:63    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $skipTracks = $request->request->get('skipPlaces', '');
         $skipPlacesAsArray = explode(',', $skipTracks);
         $places = $this->findPlaces($neLat, $neLon, $swLat, $swLon, $skipPlacesAsArray, $request->getLocale());
-        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, ['Content-Type' => 'text/json']);
+        return new Response(json_encode(['tracks' => ['status' => $tracks['status'], 'data' => $tracks['data']], 'places' => ['status' => $places['status'], 'data' => $places['data']]]), Response::HTTP_OK, []);
     }
     private function findTracks($neLat, $neLon, $swLat, $swLon, $repo, $skipTracks, $locale)
     {


47) /var/www/src/Controller/Home.php:73    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function findTracks($neLat, $neLon, $swLat, $swLon, $repo, $skipTracks, $locale)
     {
         $qb = $repo->createQueryBuilder('g');
-        $repo->andWhereTrackIsPublic($qb)->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
+        
         $data = $qb->select($qb->expr()->count('g.id'))->getQuery()->getSingleResult();
         $count = current($data);
         if ($count > 10) {


48) /var/www/src/Controller/Home.php:82    [M] GreaterThan

--- Original
+++ New
@@ @@
         $repo->andWhereTrackIsPublic($qb)->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         $data = $qb->select($qb->expr()->count('g.id'))->getQuery()->getSingleResult();
         $count = current($data);
-        if ($count > 10) {
+        if ($count >= 10) {
             $status = ApiResponseInterface::STATUS_TOO_MANY_ROWS_FOUND;
         } else {
             $status = ApiResponseInterface::STATUS_OK;


49) /var/www/src/Controller/Home.php:82    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $repo->andWhereTrackIsPublic($qb)->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         $data = $qb->select($qb->expr()->count('g.id'))->getQuery()->getSingleResult();
         $count = current($data);
-        if ($count > 10) {
+        if ($count <= 10) {
             $status = ApiResponseInterface::STATUS_TOO_MANY_ROWS_FOUND;
         } else {
             $status = ApiResponseInterface::STATUS_OK;


50) /var/www/src/Controller/Home.php:90    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $status = ApiResponseInterface::STATUS_OK;
         }
         $qb = $repo->createQueryBuilder('g');
-        $repo->andWhereTrackIsPublic($qb)->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
+        
         /* @var $qResult Track[] */
         $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
         $responseData = [];


51) /var/www/src/Controller/Home.php:96    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $qb = $repo->createQueryBuilder('g');
         $repo->andWhereTrackIsPublic($qb)->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         /* @var $qResult Track[] */
-        $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
+        $qResult = $qb->select('g')->setMaxResults(11)->getQuery()->getResult();
         $responseData = [];
         foreach ($qResult as $gps) {
             $gpsArrayData = [];


52) /var/www/src/Controller/Home.php:96    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $qb = $repo->createQueryBuilder('g');
         $repo->andWhereTrackIsPublic($qb)->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         /* @var $qResult Track[] */
-        $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
+        $qResult = $qb->select('g')->setMaxResults(9)->getQuery()->getResult();
         $responseData = [];
         foreach ($qResult as $gps) {
             $gpsArrayData = [];


53) /var/www/src/Controller/Home.php:102    [M] Foreach_

--- Original
+++ New
@@ @@
         /* @var $qResult Track[] */
         $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
         $responseData = [];
-        foreach ($qResult as $gps) {
+        foreach (array() as $gps) {
             $gpsArrayData = [];
             $gpsArrayData['id'] = $gps->getId();
             $gpsArrayData['name'] = $gps->getName($locale);


54) /var/www/src/Controller/Home.php:110    [M] Foreach_

--- Original
+++ New
@@ @@
             $gpsArrayData['slugOrId'] = $gps->getSlugOrId();
             $gpsArrayData['type'] = $gps->getType();
             /* @var $point OptimizedPoint */
-            foreach ($gps->getOptimizedPoints() as $point) {
+            foreach (array() as $point) {
                 $gpsArrayData['points'][$point->getVersionIndex()][] = ['lat' => $point->getLat(), 'lng' => $point->getLng()];
             }
             $responseData[] = $gpsArrayData;


55) /var/www/src/Controller/Home.php:111    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $gpsArrayData['type'] = $gps->getType();
             /* @var $point OptimizedPoint */
             foreach ($gps->getOptimizedPoints() as $point) {
-                $gpsArrayData['points'][$point->getVersionIndex()][] = ['lat' => $point->getLat(), 'lng' => $point->getLng()];
+                $gpsArrayData['points'][$point->getVersionIndex()][] = ['lng' => $point->getLng()];
             }
             $responseData[] = $gpsArrayData;
         }


56) /var/www/src/Controller/Home.php:112    [M] ArrayItem

--- Original
+++ New
@@ @@
             $gpsArrayData['type'] = $gps->getType();
             /* @var $point OptimizedPoint */
             foreach ($gps->getOptimizedPoints() as $point) {
-                $gpsArrayData['points'][$point->getVersionIndex()][] = ['lat' => $point->getLat(), 'lng' => $point->getLng()];
+                $gpsArrayData['points'][$point->getVersionIndex()][] = ['lat' > $point->getLat(), 'lng' => $point->getLng()];
             }
             $responseData[] = $gpsArrayData;
         }


57) /var/www/src/Controller/Home.php:113    [M] ArrayItem

--- Original
+++ New
@@ @@
             $gpsArrayData['type'] = $gps->getType();
             /* @var $point OptimizedPoint */
             foreach ($gps->getOptimizedPoints() as $point) {
-                $gpsArrayData['points'][$point->getVersionIndex()][] = ['lat' => $point->getLat(), 'lng' => $point->getLng()];
+                $gpsArrayData['points'][$point->getVersionIndex()][] = ['lat' => $point->getLat(), 'lng' > $point->getLng()];
             }
             $responseData[] = $gpsArrayData;
         }


58) /var/www/src/Controller/Home.php:120    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             $responseData[] = $gpsArrayData;
         }
-        return ['data' => $responseData, 'status' => $status];
+        return ['status' => $status];
     }
     private function findPlaces($neLat, $neLon, $swLat, $swLon, $skipTracks, $locale)
     {


59) /var/www/src/Controller/Home.php:132    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $repo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $qb = $repo->createQueryBuilder('g');
-        $repo->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
+        
         $data = $qb->select($qb->expr()->count('g.id'))->getQuery()->getSingleResult();
         $count = current($data);
         if ($count > 10) {


60) /var/www/src/Controller/Home.php:140    [M] GreaterThan

--- Original
+++ New
@@ @@
         $repo->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         $data = $qb->select($qb->expr()->count('g.id'))->getQuery()->getSingleResult();
         $count = current($data);
-        if ($count > 10) {
+        if ($count >= 10) {
             $status = ApiResponseInterface::STATUS_TOO_MANY_ROWS_FOUND;
         } else {
             $status = ApiResponseInterface::STATUS_OK;


61) /var/www/src/Controller/Home.php:140    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $repo->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         $data = $qb->select($qb->expr()->count('g.id'))->getQuery()->getSingleResult();
         $count = current($data);
-        if ($count > 10) {
+        if ($count <= 10) {
             $status = ApiResponseInterface::STATUS_TOO_MANY_ROWS_FOUND;
         } else {
             $status = ApiResponseInterface::STATUS_OK;


62) /var/www/src/Controller/Home.php:148    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $status = ApiResponseInterface::STATUS_OK;
         }
         $qb = $repo->createQueryBuilder('g');
-        $repo->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
+        
         /* @var $qResult \App\Entity\Place[] */
         $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
         $responseData = [];


63) /var/www/src/Controller/Home.php:153    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $qb = $repo->createQueryBuilder('g');
         $repo->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         /* @var $qResult \App\Entity\Place[] */
-        $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
+        $qResult = $qb->select('g')->setMaxResults(9)->getQuery()->getResult();
         $responseData = [];
         foreach ($qResult as $gps) {
             $gpsArrayData = [];


64) /var/www/src/Controller/Home.php:153    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $qb = $repo->createQueryBuilder('g');
         $repo->andWhereInCoordinates($qb, $skipTracks, $neLat, $swLat, $neLon, $swLon);
         /* @var $qResult \App\Entity\Place[] */
-        $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
+        $qResult = $qb->select('g')->setMaxResults(11)->getQuery()->getResult();
         $responseData = [];
         foreach ($qResult as $gps) {
             $gpsArrayData = [];


65) /var/www/src/Controller/Home.php:159    [M] Foreach_

--- Original
+++ New
@@ @@
         /* @var $qResult \App\Entity\Place[] */
         $qResult = $qb->select('g')->setMaxResults(10)->getQuery()->getResult();
         $responseData = [];
-        foreach ($qResult as $gps) {
+        foreach (array() as $gps) {
             $gpsArrayData = [];
             $gpsArrayData['id'] = $gps->getId();
             $gpsArrayData['lat'] = $gps->getLat();


66) /var/www/src/Controller/Home.php:169    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $gpsArrayData['name'] = $gps->getName($locale);
             $responseData[] = $gpsArrayData;
         }
-        return ['data' => $responseData, 'status' => $status];
+        return ['status' => $status];
     }
 }


67) /var/www/src/Controller/Place.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Symfony\Component\HttpFoundation\Request;
 class Place extends AbstractController
 {
-    public function index(Request $request, PaginatorInterface $paginator)
+    protected function index(Request $request, PaginatorInterface $paginator)
     {
         $repo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         /** @var QueryBuilder $qb */


68) /var/www/src/Controller/Place.php:20    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $repo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         /** @var QueryBuilder $qb */
         $qb = $repo->createQueryBuilder('g')->orderBy('g.createdAt', 'DESC');
-        $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 10);
+        $places = $paginator->paginate($qb, $request->query->getInt('page', 2), 10);
         return $this->render('place/index.html.twig', ['places' => $places]);
     }
     public function new(Request $request)


69) /var/www/src/Controller/Place.php:20    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $repo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         /** @var QueryBuilder $qb */
         $qb = $repo->createQueryBuilder('g')->orderBy('g.createdAt', 'DESC');
-        $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 10);
+        $places = $paginator->paginate($qb, $request->query->getInt('page', 0), 10);
         return $this->render('place/index.html.twig', ['places' => $places]);
     }
     public function new(Request $request)


70) /var/www/src/Controller/Place.php:20    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $repo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         /** @var QueryBuilder $qb */
         $qb = $repo->createQueryBuilder('g')->orderBy('g.createdAt', 'DESC');
-        $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 10);
+        $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 9);
         return $this->render('place/index.html.twig', ['places' => $places]);
     }
     public function new(Request $request)


71) /var/www/src/Controller/Place.php:20    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $repo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         /** @var QueryBuilder $qb */
         $qb = $repo->createQueryBuilder('g')->orderBy('g.createdAt', 'DESC');
-        $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 10);
+        $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 11);
         return $this->render('place/index.html.twig', ['places' => $places]);
     }
     public function new(Request $request)


72) /var/www/src/Controller/Place.php:24    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         /** @var QueryBuilder $qb */
         $qb = $repo->createQueryBuilder('g')->orderBy('g.createdAt', 'DESC');
         $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 10);
-        return $this->render('place/index.html.twig', ['places' => $places]);
+        return $this->render('place/index.html.twig', []);
     }
     public function new(Request $request)
     {


73) /var/www/src/Controller/Place.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $places = $paginator->paginate($qb, $request->query->getInt('page', 1), 10);
         return $this->render('place/index.html.twig', ['places' => $places]);
     }
-    public function new(Request $request)
+    protected function new(Request $request)
     {
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);


74) /var/www/src/Controller/Place.php:33    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function new(Request $request)
     {
         $form = $this->createForm(\App\Form\Type\Place::class);
-        $form->add('submit', SubmitType::class);
+        
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $place = new \App\Entity\Place($form->get('lat')->getData(), $form->get('lng')->getData(), $this->getUser());


75) /var/www/src/Controller/Place.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             $place = new \App\Entity\Place($form->get('lat')->getData(), $form->get('lng')->getData(), $this->getUser());
             if (!$form->get('nameEn')->isEmpty()) {


76) /var/www/src/Controller/Place.php:36    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $place = new \App\Entity\Place($form->get('lat')->getData(), $form->get('lng')->getData(), $this->getUser());
             if (!$form->get('nameEn')->isEmpty()) {
                 $place->setNameEn($form->get('nameEn')->getData());


77) /var/www/src/Controller/Place.php:43    [M] LogicalNot

--- Original
+++ New
@@ @@
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $place = new \App\Entity\Place($form->get('lat')->getData(), $form->get('lng')->getData(), $this->getUser());
-            if (!$form->get('nameEn')->isEmpty()) {
+            if ($form->get('nameEn')->isEmpty()) {
                 $place->setNameEn($form->get('nameEn')->getData());
             }
             if (!$form->get('nameBg')->isEmpty()) {


78) /var/www/src/Controller/Place.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($form->isSubmitted() && $form->isValid()) {
             $place = new \App\Entity\Place($form->get('lat')->getData(), $form->get('lng')->getData(), $this->getUser());
             if (!$form->get('nameEn')->isEmpty()) {
-                $place->setNameEn($form->get('nameEn')->getData());
+                
             }
             if (!$form->get('nameBg')->isEmpty()) {
                 $place->setNameBg($form->get('nameBg')->getData());


79) /var/www/src/Controller/Place.php:47    [M] LogicalNot

--- Original
+++ New
@@ @@
             if (!$form->get('nameEn')->isEmpty()) {
                 $place->setNameEn($form->get('nameEn')->getData());
             }
-            if (!$form->get('nameBg')->isEmpty()) {
+            if ($form->get('nameBg')->isEmpty()) {
                 $place->setNameBg($form->get('nameBg')->getData());
             }
             $place->setType($form->get('type')->getData());


80) /var/www/src/Controller/Place.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $place->setNameEn($form->get('nameEn')->getData());
             }
             if (!$form->get('nameBg')->isEmpty()) {
-                $place->setNameBg($form->get('nameBg')->getData());
+                
             }
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->persist($place);


81) /var/www/src/Controller/Place.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if (!$form->get('nameBg')->isEmpty()) {
                 $place->setNameBg($form->get('nameBg')->getData());
             }
-            $place->setType($form->get('type')->getData());
+            
             $this->getDoctrine()->getManager()->persist($place);
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);


82) /var/www/src/Controller/Place.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $place->setNameBg($form->get('nameBg')->getData());
             }
             $place->setType($form->get('type')->getData());
-            $this->getDoctrine()->getManager()->persist($place);
+            
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }


83) /var/www/src/Controller/Place.php:54    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->persist($place);
-            $this->getDoctrine()->getManager()->flush();
+            
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView()]);


84) /var/www/src/Controller/Place.php:56    [M] ArrayItem

--- Original
+++ New
@@ @@
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->persist($place);
             $this->getDoctrine()->getManager()->flush();
-            return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
+            return $this->redirectToRoute('app_place_view', ['id' > $place->getId()]);
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView()]);
     }


85) /var/www/src/Controller/Place.php:56    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->persist($place);
             $this->getDoctrine()->getManager()->flush();
-            return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
+            return $this->redirectToRoute('app_place_view', []);
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView()]);
     }


86) /var/www/src/Controller/Place.php:61    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }
-        return $this->render('place/edit.html.twig', ['form' => $form->createView()]);
+        return $this->render('place/edit.html.twig', []);
     }
     public function edit(string $id, Request $request)
     {


87) /var/www/src/Controller/Place.php:62    [M] ArrayItem

--- Original
+++ New
@@ @@
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }
-        return $this->render('place/edit.html.twig', ['form' => $form->createView()]);
+        return $this->render('place/edit.html.twig', ['form' > $form->createView()]);
     }
     public function edit(string $id, Request $request)
     {


88) /var/www/src/Controller/Place.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView()]);
     }
-    public function edit(string $id, Request $request)
+    protected function edit(string $id, Request $request)
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $place = $placeRepo->findOneBy(['id' => $id]);


89) /var/www/src/Controller/Place.php:70    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function edit(string $id, Request $request)
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
-        $place = $placeRepo->findOneBy(['id' => $id]);
+        $place = $placeRepo->findOneBy([]);
         $this->denyAccessUnlessGranted('edit', $place);
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);


90) /var/www/src/Controller/Place.php:72    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $place = $placeRepo->findOneBy(['id' => $id]);
-        $this->denyAccessUnlessGranted('edit', $place);
+        
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);
         $form->get('lat')->setData($place->getLat());


91) /var/www/src/Controller/Place.php:75    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $place = $placeRepo->findOneBy(['id' => $id]);
         $this->denyAccessUnlessGranted('edit', $place);
         $form = $this->createForm(\App\Form\Type\Place::class);
-        $form->add('submit', SubmitType::class);
+        
         $form->get('lat')->setData($place->getLat());
         $form->get('lng')->setData($place->getLng());
         $form->get('nameEn')->setData($place->getNameEn());


92) /var/www/src/Controller/Place.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->denyAccessUnlessGranted('edit', $place);
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);
-        $form->get('lat')->setData($place->getLat());
+        
         $form->get('lng')->setData($place->getLng());
         $form->get('nameEn')->setData($place->getNameEn());
         $form->get('nameBg')->setData($place->getNameBg());


93) /var/www/src/Controller/Place.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form = $this->createForm(\App\Form\Type\Place::class);
         $form->add('submit', SubmitType::class);
         $form->get('lat')->setData($place->getLat());
-        $form->get('lng')->setData($place->getLng());
+        
         $form->get('nameEn')->setData($place->getNameEn());
         $form->get('nameBg')->setData($place->getNameBg());
         $form->get('type')->setData($place->getType());


94) /var/www/src/Controller/Place.php:79    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->add('submit', SubmitType::class);
         $form->get('lat')->setData($place->getLat());
         $form->get('lng')->setData($place->getLng());
-        $form->get('nameEn')->setData($place->getNameEn());
+        
         $form->get('nameBg')->setData($place->getNameBg());
         $form->get('type')->setData($place->getType());
         $form->handleRequest($request);


95) /var/www/src/Controller/Place.php:80    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('lat')->setData($place->getLat());
         $form->get('lng')->setData($place->getLng());
         $form->get('nameEn')->setData($place->getNameEn());
-        $form->get('nameBg')->setData($place->getNameBg());
+        
         $form->get('type')->setData($place->getType());
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {


96) /var/www/src/Controller/Place.php:81    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('lng')->setData($place->getLng());
         $form->get('nameEn')->setData($place->getNameEn());
         $form->get('nameBg')->setData($place->getNameBg());
-        $form->get('type')->setData($place->getType());
+        
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $place->setLat($form->get('lat')->getData());


97) /var/www/src/Controller/Place.php:83    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('nameEn')->setData($place->getNameEn());
         $form->get('nameBg')->setData($place->getNameBg());
         $form->get('type')->setData($place->getType());
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             $place->setLat($form->get('lat')->getData());
             $place->setLng($form->get('lng')->getData());


98) /var/www/src/Controller/Place.php:84    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $form->get('nameBg')->setData($place->getNameBg());
         $form->get('type')->setData($place->getType());
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $place->setLat($form->get('lat')->getData());
             $place->setLng($form->get('lng')->getData());
             $place->setNameEn($form->get('nameEn')->getData());


99) /var/www/src/Controller/Place.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('type')->setData($place->getType());
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $place->setLat($form->get('lat')->getData());
+            
             $place->setLng($form->get('lng')->getData());
             $place->setNameEn($form->get('nameEn')->getData());
             $place->setNameBg($form->get('nameBg')->getData());


100) /var/www/src/Controller/Place.php:86    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $place->setLat($form->get('lat')->getData());
-            $place->setLng($form->get('lng')->getData());
+            
             $place->setNameEn($form->get('nameEn')->getData());
             $place->setNameBg($form->get('nameBg')->getData());
             $place->setType($form->get('type')->getData());


101) /var/www/src/Controller/Place.php:87    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($form->isSubmitted() && $form->isValid()) {
             $place->setLat($form->get('lat')->getData());
             $place->setLng($form->get('lng')->getData());
-            $place->setNameEn($form->get('nameEn')->getData());
+            
             $place->setNameBg($form->get('nameBg')->getData());
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->flush();


102) /var/www/src/Controller/Place.php:88    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $place->setLat($form->get('lat')->getData());
             $place->setLng($form->get('lng')->getData());
             $place->setNameEn($form->get('nameEn')->getData());
-            $place->setNameBg($form->get('nameBg')->getData());
+            
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);


103) /var/www/src/Controller/Place.php:89    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $place->setLng($form->get('lng')->getData());
             $place->setNameEn($form->get('nameEn')->getData());
             $place->setNameBg($form->get('nameBg')->getData());
-            $place->setType($form->get('type')->getData());
+            
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }


104) /var/www/src/Controller/Place.php:91    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $place->setNameEn($form->get('nameEn')->getData());
             $place->setNameBg($form->get('nameBg')->getData());
             $place->setType($form->get('type')->getData());
-            $this->getDoctrine()->getManager()->flush();
+            
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView(), 'place' => $place]);


105) /var/www/src/Controller/Place.php:93    [M] ArrayItem

--- Original
+++ New
@@ @@
             $place->setNameBg($form->get('nameBg')->getData());
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->flush();
-            return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
+            return $this->redirectToRoute('app_place_view', ['id' > $place->getId()]);
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView(), 'place' => $place]);
     }


106) /var/www/src/Controller/Place.php:93    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $place->setNameBg($form->get('nameBg')->getData());
             $place->setType($form->get('type')->getData());
             $this->getDoctrine()->getManager()->flush();
-            return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
+            return $this->redirectToRoute('app_place_view', []);
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView(), 'place' => $place]);
     }


107) /var/www/src/Controller/Place.php:98    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }
-        return $this->render('place/edit.html.twig', ['form' => $form->createView(), 'place' => $place]);
+        return $this->render('place/edit.html.twig', ['place' => $place]);
     }
     public function view(string $id, Request $request)
     {


108) /var/www/src/Controller/Place.php:99    [M] ArrayItem

--- Original
+++ New
@@ @@
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('app_place_view', ['id' => $place->getId()]);
         }
-        return $this->render('place/edit.html.twig', ['form' => $form->createView(), 'place' => $place]);
+        return $this->render('place/edit.html.twig', ['form' > $form->createView(), 'place' => $place]);
     }
     public function view(string $id, Request $request)
     {


109) /var/www/src/Controller/Place.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('place/edit.html.twig', ['form' => $form->createView(), 'place' => $place]);
     }
-    public function view(string $id, Request $request)
+    protected function view(string $id, Request $request)
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $place = $placeRepo->findOneBy(['id' => $id]);


110) /var/www/src/Controller/Place.php:108    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function view(string $id, Request $request)
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
-        $place = $placeRepo->findOneBy(['id' => $id]);
+        $place = $placeRepo->findOneBy([]);
         return $this->render('place/view.html.twig', ['place' => $place, 'app_title' => $place->getName($request->getLocale()), 'canEdit' => $this->isGranted('edit', $place)]);
     }
 }


111) /var/www/src/Controller/Place.php:112    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $place = $placeRepo->findOneBy(['id' => $id]);
-        return $this->render('place/view.html.twig', ['place' => $place, 'app_title' => $place->getName($request->getLocale()), 'canEdit' => $this->isGranted('edit', $place)]);
+        return $this->render('place/view.html.twig', ['app_title' => $place->getName($request->getLocale()), 'canEdit' => $this->isGranted('edit', $place)]);
     }
 }


112) /var/www/src/Controller/Place.php:114    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $place = $placeRepo->findOneBy(['id' => $id]);
-        return $this->render('place/view.html.twig', ['place' => $place, 'app_title' => $place->getName($request->getLocale()), 'canEdit' => $this->isGranted('edit', $place)]);
+        return $this->render('place/view.html.twig', ['place' => $place, 'app_title' > $place->getName($request->getLocale()), 'canEdit' => $this->isGranted('edit', $place)]);
     }
 }


113) /var/www/src/Controller/Place.php:115    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         $placeRepo = $this->getDoctrine()->getRepository(\App\Entity\Place::class);
         $place = $placeRepo->findOneBy(['id' => $id]);
-        return $this->render('place/view.html.twig', ['place' => $place, 'app_title' => $place->getName($request->getLocale()), 'canEdit' => $this->isGranted('edit', $place)]);
+        return $this->render('place/view.html.twig', ['place' => $place, 'app_title' => $place->getName($request->getLocale()), 'canEdit' > $this->isGranted('edit', $place)]);
     }
 }


114) /var/www/src/Controller/Place/Image.php:15    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Symfony\Contracts\Translation\TranslatorInterface;
 class Image extends AbstractController
 {
-    public function addImage(string $id, Request $request, PlaceRepository $placeRepo, TranslatorInterface $translator)
+    protected function addImage(string $id, Request $request, PlaceRepository $placeRepo, TranslatorInterface $translator)
     {
         $token = $request->request->get('token');
         if (!$this->isCsrfTokenValid('file_upload', $token)) {


115) /var/www/src/Controller/Place/Image.php:18    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function addImage(string $id, Request $request, PlaceRepository $placeRepo, TranslatorInterface $translator)
     {
         $token = $request->request->get('token');
-        if (!$this->isCsrfTokenValid('file_upload', $token)) {
+        if ($this->isCsrfTokenValid('file_upload', $token)) {
             throw $this->createAccessDeniedException('csrf check failed');
         }
         $uploader = new ImageUploader($this->getParameter('place_images_directory'), $placeRepo, $translator);


116) /var/www/src/Controller/Place/Image.php:19    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $token = $request->request->get('token');
         if (!$this->isCsrfTokenValid('file_upload', $token)) {
-            throw $this->createAccessDeniedException('csrf check failed');
+            $this->createAccessDeniedException('csrf check failed');
         }
         $uploader = new ImageUploader($this->getParameter('place_images_directory'), $placeRepo, $translator);
         $user = $this->getUser();


117) /var/www/src/Controller/Place/Image.php:31    [M] NewObject

--- Original
+++ New
@@ @@
         $uploader = new ImageUploader($this->getParameter('place_images_directory'), $placeRepo, $translator);
         $user = $this->getUser();
         $entityCreator = function ($path, $parentEntity) use($user) {
-            return new \App\Entity\Place\Image($path, $user, $parentEntity);
+            new \App\Entity\Place\Image($path, $user, $parentEntity);
+            return null;
         };
         list($image, $response) = $uploader->addImage($id, $request, $entityCreator);
         if ($image) {

118) /var/www/src/Controller/Place/Image.php:37    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         };
         list($image, $response) = $uploader->addImage($id, $request, $entityCreator);
         if ($image) {
-            $this->getDoctrine()->getManager()->persist($image);
+            
             $this->getDoctrine()->getManager()->flush();
         }
         return $response;


119) /var/www/src/Controller/Place/Image.php:38    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         list($image, $response) = $uploader->addImage($id, $request, $entityCreator);
         if ($image) {
             $this->getDoctrine()->getManager()->persist($image);
-            $this->getDoctrine()->getManager()->flush();
+            
         }
         return $response;
     }


120) /var/www/src/Controller/Place/Image.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * This method is called when thumbnails doesn't exists.
      * Thumbnail will be created and saved in the "public" directory.
      */
-    public function generateThumbnail(int $year, string $placeId, string $imagePath, int $maxWidth, int $maxHeight, Request $request)
+    protected function generateThumbnail(int $year, string $placeId, string $imagePath, int $maxWidth, int $maxHeight, Request $request)
     {
         $originalImagePath = $this->getParameter('place_images_directory') . DIRECTORY_SEPARATOR;
         $originalImagePath .= $year . DIRECTORY_SEPARATOR . $placeId . DIRECTORY_SEPARATOR . $imagePath;


121) /var/www/src/Controller/Place/Image.php:51    [M] Assignment

--- Original
+++ New
@@ @@
     public function generateThumbnail(int $year, string $placeId, string $imagePath, int $maxWidth, int $maxHeight, Request $request)
     {
         $originalImagePath = $this->getParameter('place_images_directory') . DIRECTORY_SEPARATOR;
-        $originalImagePath .= $year . DIRECTORY_SEPARATOR . $placeId . DIRECTORY_SEPARATOR . $imagePath;
+        $originalImagePath = $year . DIRECTORY_SEPARATOR . $placeId . DIRECTORY_SEPARATOR . $imagePath;
         $thumbnailPathDir = $this->getParameter('place_images_thumbnails_directory');
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $placeId;


122) /var/www/src/Controller/Place/Image.php:54    [M] Assignment

--- Original
+++ New
@@ @@
         $originalImagePath = $this->getParameter('place_images_directory') . DIRECTORY_SEPARATOR;
         $originalImagePath .= $year . DIRECTORY_SEPARATOR . $placeId . DIRECTORY_SEPARATOR . $imagePath;
         $thumbnailPathDir = $this->getParameter('place_images_thumbnails_directory');
-        $thumbnailPathDir .= DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
+        $thumbnailPathDir = DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $placeId;
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();


123) /var/www/src/Controller/Place/Image.php:55    [M] Assignment

--- Original
+++ New
@@ @@
         $originalImagePath .= $year . DIRECTORY_SEPARATOR . $placeId . DIRECTORY_SEPARATOR . $imagePath;
         $thumbnailPathDir = $this->getParameter('place_images_thumbnails_directory');
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
-        $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $placeId;
+        $thumbnailPathDir = DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $placeId;
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);


124) /var/www/src/Controller/Place/Image.php:59    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $placeId;
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
-        $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
+        
         return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
     }
 }


125) /var/www/src/Controller/Place/Image.php:61    [M] NewObject

--- Original
+++ New
@@ @@
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
-        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        return null;
     }
 }


126) /var/www/src/Controller/Place/Image.php:64    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
-        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, []);
     }
 }


127) /var/www/src/Controller/Place/Image.php:65    [M] ArrayItem

--- Original
+++ New
@@ @@
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
-        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' > $request->getRequestUri()]);
     }
 }


128) /var/www/src/Controller/SimpleContent.php:9    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
 class SimpleContent extends AbstractController
 {
-    public function privacyPolicy()
+    protected function privacyPolicy()
     {
         return $this->render('simple-content/privacyPolicy.twig');
     }


129) /var/www/src/Controller/SimpleContent.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->render('simple-content/privacyPolicy.twig');
     }
-    public function legalBases()
+    protected function legalBases()
     {
         return $this->render('simple-content/legalBases.html.twig');
     }


130) /var/www/src/Controller/SimpleContent.php:19    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->render('simple-content/legalBases.html.twig');
     }
-    public function cookiePolicy()
+    protected function cookiePolicy()
     {
         return $this->render('simple-content/cookiePolicy.html.twig');
     }


131) /var/www/src/Controller/SimpleContent.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->render('simple-content/cookiePolicy.html.twig');
     }
-    public function termsOfService()
+    protected function termsOfService()
     {
         return $this->render('simple-content/termsOfService.html.twig');
     }
 }

132) /var/www/src/Controller/Track.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Tekstove\UrlVideoParser\Youtube\YoutubeParser;
 class Track extends AbstractController
 {
-    public function new(Request $request, LoggerInterface $logger, SlugRepository $slugRepo, Processor $processor)
+    protected function new(Request $request, LoggerInterface $logger, SlugRepository $slugRepo, Processor $processor)
     {
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->add('submit', SubmitType::class);


133) /var/www/src/Controller/Track.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function new(Request $request, LoggerInterface $logger, SlugRepository $slugRepo, Processor $processor)
     {
         $form = $this->createForm(\App\Form\Type\Track::class);
-        $form->add('submit', SubmitType::class);
+        
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $formIsValid = true;


134) /var/www/src/Controller/Track.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->add('submit', SubmitType::class);
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             $formIsValid = true;
             $file = $form->get('file');


135) /var/www/src/Controller/Track.php:37    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $formIsValid = true;
             $file = $form->get('file');
             $fileData = $file->getData();


136) /var/www/src/Controller/Track.php:38    [M] TrueValue

--- Original
+++ New
@@ @@
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $formIsValid = true;
+            $formIsValid = false;
             $file = $form->get('file');
             $fileData = $file->getData();
             /* @var $fileData UploadedFile */


137) /var/www/src/Controller/Track.php:47    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             // we should have service for gpx processing
             $trackVersion = new Version($this->getUser());
             try {
-                $processor->process($fileContent, $trackVersion);
+                
             } catch (\Exception $e) {
                 $formIsValid = false;
                 $logger->error("Track file parsing error", ['content' => $fileContent, 'e' => $e]);


138) /var/www/src/Controller/Track.php:49    [M] FalseValue

--- Original
+++ New
@@ @@
             try {
                 $processor->process($fileContent, $trackVersion);
             } catch (\Exception $e) {
-                $formIsValid = false;
+                $formIsValid = true;
                 $logger->error("Track file parsing error", ['content' => $fileContent, 'e' => $e]);
                 $form->get('file')->addError(new FormError('cannot parse the file'));
             }


139) /var/www/src/Controller/Track.php:50    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $processor->process($fileContent, $trackVersion);
             } catch (\Exception $e) {
                 $formIsValid = false;
-                $logger->error("Track file parsing error", ['content' => $fileContent, 'e' => $e]);
+                $logger->error("Track file parsing error", ['e' => $e]);
                 $form->get('file')->addError(new FormError('cannot parse the file'));
             }
             $optimizedPoints = $processor->generateOptimizedPoints($trackVersion);


140) /var/www/src/Controller/Track.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $processor->process($fileContent, $trackVersion);
             } catch (\Exception $e) {
                 $formIsValid = false;
-                $logger->error("Track file parsing error", ['content' => $fileContent, 'e' => $e]);
+                
                 $form->get('file')->addError(new FormError('cannot parse the file'));
             }
             $optimizedPoints = $processor->generateOptimizedPoints($trackVersion);


141) /var/www/src/Controller/Track.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (\Exception $e) {
                 $formIsValid = false;
                 $logger->error("Track file parsing error", ['content' => $fileContent, 'e' => $e]);
-                $form->get('file')->addError(new FormError('cannot parse the file'));
+                
             }
             $optimizedPoints = $processor->generateOptimizedPoints($trackVersion);
             $trackVersion->setDifficulty($form->get('difficulty')->getData());


142) /var/www/src/Controller/Track.php:58    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $form->get('file')->addError(new FormError('cannot parse the file'));
             }
             $optimizedPoints = $processor->generateOptimizedPoints($trackVersion);
-            $trackVersion->setDifficulty($form->get('difficulty')->getData());
+            
             $track->addOptimizedPoints($optimizedPoints);
             $track->addVersion($trackVersion);
             $track->setType($form->get('type')->getData());


143) /var/www/src/Controller/Track.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $optimizedPoints = $processor->generateOptimizedPoints($trackVersion);
             $trackVersion->setDifficulty($form->get('difficulty')->getData());
-            $track->addOptimizedPoints($optimizedPoints);
+            
             $track->addVersion($trackVersion);
             $track->setType($form->get('type')->getData());
             $track->setNameEn($form->get('nameEn')->getData());


144) /var/www/src/Controller/Track.php:61    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $optimizedPoints = $processor->generateOptimizedPoints($trackVersion);
             $trackVersion->setDifficulty($form->get('difficulty')->getData());
             $track->addOptimizedPoints($optimizedPoints);
-            $track->addVersion($trackVersion);
+            
             $track->setType($form->get('type')->getData());
             $track->setNameEn($form->get('nameEn')->getData());
             $track->setNameBg($form->get('nameBg')->getData());


145) /var/www/src/Controller/Track.php:62    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $trackVersion->setDifficulty($form->get('difficulty')->getData());
             $track->addOptimizedPoints($optimizedPoints);
             $track->addVersion($trackVersion);
-            $track->setType($form->get('type')->getData());
+            
             $track->setNameEn($form->get('nameEn')->getData());
             $track->setNameBg($form->get('nameBg')->getData());
             $track->setVisibility($form->get('visibility')->getData());


146) /var/www/src/Controller/Track.php:63    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->addOptimizedPoints($optimizedPoints);
             $track->addVersion($trackVersion);
             $track->setType($form->get('type')->getData());
-            $track->setNameEn($form->get('nameEn')->getData());
+            
             $track->setNameBg($form->get('nameBg')->getData());
             $track->setVisibility($form->get('visibility')->getData());
             $videoParser = new YoutubeParser();


147) /var/www/src/Controller/Track.php:64    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->addVersion($trackVersion);
             $track->setType($form->get('type')->getData());
             $track->setNameEn($form->get('nameEn')->getData());
-            $track->setNameBg($form->get('nameBg')->getData());
+            
             $track->setVisibility($form->get('visibility')->getData());
             $videoParser = new YoutubeParser();
             $youtubeVideos = [];


148) /var/www/src/Controller/Track.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->setType($form->get('type')->getData());
             $track->setNameEn($form->get('nameEn')->getData());
             $track->setNameBg($form->get('nameBg')->getData());
-            $track->setVisibility($form->get('visibility')->getData());
+            
             $videoParser = new YoutubeParser();
             $youtubeVideos = [];
             foreach ($form->get('videosYoutube')->getData() as $youtubeLink) {


149) /var/www/src/Controller/Track.php:69    [M] Foreach_

--- Original
+++ New
@@ @@
             $track->setVisibility($form->get('visibility')->getData());
             $videoParser = new YoutubeParser();
             $youtubeVideos = [];
-            foreach ($form->get('videosYoutube')->getData() as $youtubeLink) {
+            foreach (array() as $youtubeLink) {
                 if (empty($youtubeLink['link'])) {
                     continue;
                 }


150) /var/www/src/Controller/Track.php:71    [M] Continue_

--- Original
+++ New
@@ @@
             $youtubeVideos = [];
             foreach ($form->get('videosYoutube')->getData() as $youtubeLink) {
                 if (empty($youtubeLink['link'])) {
-                    continue;
+                    break;
                 }
                 try {
                     $videoId = $videoParser->getId($youtubeLink['link']);


151) /var/www/src/Controller/Track.php:78    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                     $videoId = $videoParser->getId($youtubeLink['link']);
                     $youtubeVideos[] = new Youtube($videoId);
                 } catch (ParseException $e) {
-                    $logger->error("Video parsing failed", [$e->getMessage()]);
+                    $logger->error("Video parsing failed", []);
                 }
             }
             $track->setvideosYoutube($youtubeVideos);


152) /var/www/src/Controller/Track.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $videoId = $videoParser->getId($youtubeLink['link']);
                     $youtubeVideos[] = new Youtube($videoId);
                 } catch (ParseException $e) {
-                    $logger->error("Video parsing failed", [$e->getMessage()]);
+                    
                 }
             }
             $track->setvideosYoutube($youtubeVideos);


153) /var/www/src/Controller/Track.php:82    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $logger->error("Video parsing failed", [$e->getMessage()]);
                 }
             }
-            $track->setvideosYoutube($youtubeVideos);
+            
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
                 $track->setSlug($slug);


154) /var/www/src/Controller/Track.php:84    [M] LogicalNot

--- Original
+++ New
@@ @@
                 }
             }
             $track->setvideosYoutube($youtubeVideos);
-            if (!$form->get('slug')->isEmpty()) {
+            if ($form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
                 $track->setSlug($slug);
                 $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);


155) /var/www/src/Controller/Track.php:86    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->setvideosYoutube($youtubeVideos);
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
-                $track->setSlug($slug);
+                
                 $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
                 if ($existingSlug) {
                     $form->get('slug')->addError(new FormError('Slug is already taken'));


156) /var/www/src/Controller/Track.php:87    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
                 $track->setSlug($slug);
-                $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
+                $existingSlug = $slugRepo->findOneBy([]);
                 if ($existingSlug) {
                     $form->get('slug')->addError(new FormError('Slug is already taken'));
                 }


157) /var/www/src/Controller/Track.php:89    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $track->setSlug($slug);
                 $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
                 if ($existingSlug) {
-                    $form->get('slug')->addError(new FormError('Slug is already taken'));
+                    
                 }
                 $slugEntity = new Slug($track, $slug);
                 $this->getDoctrine()->getManager()->persist($slugEntity);


158) /var/www/src/Controller/Track.php:95    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $form->get('slug')->addError(new FormError('Slug is already taken'));
                 }
                 $slugEntity = new Slug($track, $slug);
-                $this->getDoctrine()->getManager()->persist($slugEntity);
+                
             }
             $processor->postProcess($track);
             if ($track->getOptimizedPoints()->isEmpty()) {


159) /var/www/src/Controller/Track.php:99    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $slugEntity = new Slug($track, $slug);
                 $this->getDoctrine()->getManager()->persist($slugEntity);
             }
-            $processor->postProcess($track);
+            
             if ($track->getOptimizedPoints()->isEmpty()) {
                 $formIsValid = false;
                 $form->get('file')->addError(new FormError('error'));


160) /var/www/src/Controller/Track.php:102    [M] FalseValue

--- Original
+++ New
@@ @@
             }
             $processor->postProcess($track);
             if ($track->getOptimizedPoints()->isEmpty()) {
-                $formIsValid = false;
+                $formIsValid = true;
                 $form->get('file')->addError(new FormError('error'));
             }
             if ($formIsValid) {


161) /var/www/src/Controller/Track.php:103    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $processor->postProcess($track);
             if ($track->getOptimizedPoints()->isEmpty()) {
                 $formIsValid = false;
-                $form->get('file')->addError(new FormError('error'));
+                
             }
             if ($formIsValid) {
                 $trackFile = new TrackFile($trackVersion, $fileContent);


162) /var/www/src/Controller/Track.php:110    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             if ($formIsValid) {
                 $trackFile = new TrackFile($trackVersion, $fileContent);
-                $trackVersion->setFile($trackFile);
+                
                 $this->getDoctrine()->getManager()->persist($track);
                 $this->getDoctrine()->getManager()->flush();
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);


163) /var/www/src/Controller/Track.php:112    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($formIsValid) {
                 $trackFile = new TrackFile($trackVersion, $fileContent);
                 $trackVersion->setFile($trackFile);
-                $this->getDoctrine()->getManager()->persist($track);
+                
                 $this->getDoctrine()->getManager()->flush();
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }


164) /var/www/src/Controller/Track.php:114    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $trackFile = new TrackFile($trackVersion, $fileContent);
                 $trackVersion->setFile($trackFile);
                 $this->getDoctrine()->getManager()->persist($track);
-                $this->getDoctrine()->getManager()->flush();
+                
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }
         }


165) /var/www/src/Controller/Track.php:117    [M] ArrayItem

--- Original
+++ New
@@ @@
                 $trackVersion->setFile($trackFile);
                 $this->getDoctrine()->getManager()->persist($track);
                 $this->getDoctrine()->getManager()->flush();
-                return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
+                return $this->redirectToRoute('gps-view', ['id' > $track->getSlugOrId()]);
             }
         }
         return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);


166) /var/www/src/Controller/Track.php:117    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $trackVersion->setFile($trackFile);
                 $this->getDoctrine()->getManager()->persist($track);
                 $this->getDoctrine()->getManager()->flush();
-                return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
+                return $this->redirectToRoute('gps-view', []);
             }
         }
         return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);


167) /var/www/src/Controller/Track.php:123    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }
         }
-        return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);
+        return $this->render('gps/edit.html.twig', []);
     }
     public function edit(Request $request, $id, LoggerInterface $logger, SlugRepository $slugRepo)
     {


168) /var/www/src/Controller/Track.php:124    [M] ArrayItem

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }
         }
-        return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);
+        return $this->render('gps/edit.html.twig', ['form' > $form->createView()]);
     }
     public function edit(Request $request, $id, LoggerInterface $logger, SlugRepository $slugRepo)
     {


169) /var/www/src/Controller/Track.php:129    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);
     }
-    public function edit(Request $request, $id, LoggerInterface $logger, SlugRepository $slugRepo)
+    protected function edit(Request $request, $id, LoggerInterface $logger, SlugRepository $slugRepo)
     {
         $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
         $this->denyAccessUnlessGranted('edit', $track);


170) /var/www/src/Controller/Track.php:131    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function edit(Request $request, $id, LoggerInterface $logger, SlugRepository $slugRepo)
     {
-        $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
+        $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy([]);
         $this->denyAccessUnlessGranted('edit', $track);
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->get('nameEn')->setData($track->getNameEn());


171) /var/www/src/Controller/Track.php:132    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function edit(Request $request, $id, LoggerInterface $logger, SlugRepository $slugRepo)
     {
         $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
-        $this->denyAccessUnlessGranted('edit', $track);
+        
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->get('nameEn')->setData($track->getNameEn());
         $form->get('nameBg')->setData($track->getNameBg());


172) /var/www/src/Controller/Track.php:135    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
         $this->denyAccessUnlessGranted('edit', $track);
         $form = $this->createForm(\App\Form\Type\Track::class);
-        $form->get('nameEn')->setData($track->getNameEn());
+        
         $form->get('nameBg')->setData($track->getNameBg());
         $form->get('type')->setData($track->getType());
         $form->get('visibility')->setData($track->getVisibility());


173) /var/www/src/Controller/Track.php:136    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->denyAccessUnlessGranted('edit', $track);
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->get('nameEn')->setData($track->getNameEn());
-        $form->get('nameBg')->setData($track->getNameBg());
+        
         $form->get('type')->setData($track->getType());
         $form->get('visibility')->setData($track->getVisibility());
         $form->get('slug')->setData($track->getSlug());


174) /var/www/src/Controller/Track.php:137    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form = $this->createForm(\App\Form\Type\Track::class);
         $form->get('nameEn')->setData($track->getNameEn());
         $form->get('nameBg')->setData($track->getNameBg());
-        $form->get('type')->setData($track->getType());
+        
         $form->get('visibility')->setData($track->getVisibility());
         $form->get('slug')->setData($track->getSlug());
         $youtubeFormData = [];


175) /var/www/src/Controller/Track.php:138    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('nameEn')->setData($track->getNameEn());
         $form->get('nameBg')->setData($track->getNameBg());
         $form->get('type')->setData($track->getType());
-        $form->get('visibility')->setData($track->getVisibility());
+        
         $form->get('slug')->setData($track->getSlug());
         $youtubeFormData = [];
         foreach ($track->getVideosYoutube() as $youtube) {


176) /var/www/src/Controller/Track.php:139    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('nameBg')->setData($track->getNameBg());
         $form->get('type')->setData($track->getType());
         $form->get('visibility')->setData($track->getVisibility());
-        $form->get('slug')->setData($track->getSlug());
+        
         $youtubeFormData = [];
         foreach ($track->getVideosYoutube() as $youtube) {
             $youtubeFormData[] = ['link' => $youtube->getLink()];


177) /var/www/src/Controller/Track.php:142    [M] Foreach_

--- Original
+++ New
@@ @@
         $form->get('visibility')->setData($track->getVisibility());
         $form->get('slug')->setData($track->getSlug());
         $youtubeFormData = [];
-        foreach ($track->getVideosYoutube() as $youtube) {
+        foreach (array() as $youtube) {
             $youtubeFormData[] = ['link' => $youtube->getLink()];
         }
         $form->get('videosYoutube')->setData($youtubeFormData);


178) /var/www/src/Controller/Track.php:143    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $form->get('slug')->setData($track->getSlug());
         $youtubeFormData = [];
         foreach ($track->getVideosYoutube() as $youtube) {
-            $youtubeFormData[] = ['link' => $youtube->getLink()];
+            $youtubeFormData[] = [];
         }
         $form->get('videosYoutube')->setData($youtubeFormData);
         $form->add('submit', SubmitType::class);


179) /var/www/src/Controller/Track.php:144    [M] ArrayItem

--- Original
+++ New
@@ @@
         $form->get('slug')->setData($track->getSlug());
         $youtubeFormData = [];
         foreach ($track->getVideosYoutube() as $youtube) {
-            $youtubeFormData[] = ['link' => $youtube->getLink()];
+            $youtubeFormData[] = ['link' > $youtube->getLink()];
         }
         $form->get('videosYoutube')->setData($youtubeFormData);
         $form->add('submit', SubmitType::class);


180) /var/www/src/Controller/Track.php:147    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($track->getVideosYoutube() as $youtube) {
             $youtubeFormData[] = ['link' => $youtube->getLink()];
         }
-        $form->get('videosYoutube')->setData($youtubeFormData);
+        
         $form->add('submit', SubmitType::class);
         $form->remove('file');
         $form->handleRequest($request);


181) /var/www/src/Controller/Track.php:149    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $youtubeFormData[] = ['link' => $youtube->getLink()];
         }
         $form->get('videosYoutube')->setData($youtubeFormData);
-        $form->add('submit', SubmitType::class);
+        
         $form->remove('file');
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {


182) /var/www/src/Controller/Track.php:150    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $form->get('videosYoutube')->setData($youtubeFormData);
         $form->add('submit', SubmitType::class);
-        $form->remove('file');
+        
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $formIsValid = true;


183) /var/www/src/Controller/Track.php:152    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->get('videosYoutube')->setData($youtubeFormData);
         $form->add('submit', SubmitType::class);
         $form->remove('file');
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             $formIsValid = true;
             $videoParser = new YoutubeParser();


184) /var/www/src/Controller/Track.php:153    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $form->add('submit', SubmitType::class);
         $form->remove('file');
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $formIsValid = true;
             $videoParser = new YoutubeParser();
             $youtubeVideos = [];


185) /var/www/src/Controller/Track.php:154    [M] TrueValue

--- Original
+++ New
@@ @@
         $form->remove('file');
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $formIsValid = true;
+            $formIsValid = false;
             $videoParser = new YoutubeParser();
             $youtubeVideos = [];
             foreach ($form->get('videosYoutube')->getData() as $youtubeLink) {


186) /var/www/src/Controller/Track.php:157    [M] Foreach_

--- Original
+++ New
@@ @@
             $formIsValid = true;
             $videoParser = new YoutubeParser();
             $youtubeVideos = [];
-            foreach ($form->get('videosYoutube')->getData() as $youtubeLink) {
+            foreach (array() as $youtubeLink) {
                 if (empty($youtubeLink['link'])) {
                     continue;
                 }


187) /var/www/src/Controller/Track.php:159    [M] Continue_

--- Original
+++ New
@@ @@
             $youtubeVideos = [];
             foreach ($form->get('videosYoutube')->getData() as $youtubeLink) {
                 if (empty($youtubeLink['link'])) {
-                    continue;
+                    break;
                 }
                 try {
                     $videoId = $videoParser->getId($youtubeLink['link']);


188) /var/www/src/Controller/Track.php:170    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                     if (preg_match('~[a-zA-Z0-9\\-_]{5,}~', $youtubeLink['link'])) {
                         $youtubeVideos[] = new Youtube($youtubeLink['link']);
                     } else {
-                        $logger->error("Video parsing failed", [$e->getMessage()]);
+                        $logger->error("Video parsing failed", []);
                     }
                 }
             }


189) /var/www/src/Controller/Track.php:170    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     if (preg_match('~[a-zA-Z0-9\\-_]{5,}~', $youtubeLink['link'])) {
                         $youtubeVideos[] = new Youtube($youtubeLink['link']);
                     } else {
-                        $logger->error("Video parsing failed", [$e->getMessage()]);
+                        
                     }
                 }
             }


190) /var/www/src/Controller/Track.php:175    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     }
                 }
             }
-            $track->setvideosYoutube($youtubeVideos);
+            
             $track->setNameEn($form->get('nameEn')->getData());
             $track->setNameBg($form->get('nameBg')->getData());
             $track->setType($form->get('type')->getData());


191) /var/www/src/Controller/Track.php:176    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
             }
             $track->setvideosYoutube($youtubeVideos);
-            $track->setNameEn($form->get('nameEn')->getData());
+            
             $track->setNameBg($form->get('nameBg')->getData());
             $track->setType($form->get('type')->getData());
             $track->setVisibility($form->get('visibility')->getData());


192) /var/www/src/Controller/Track.php:177    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $track->setvideosYoutube($youtubeVideos);
             $track->setNameEn($form->get('nameEn')->getData());
-            $track->setNameBg($form->get('nameBg')->getData());
+            
             $track->setType($form->get('type')->getData());
             $track->setVisibility($form->get('visibility')->getData());
             if (!$form->get('slug')->isEmpty()) {


193) /var/www/src/Controller/Track.php:178    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->setvideosYoutube($youtubeVideos);
             $track->setNameEn($form->get('nameEn')->getData());
             $track->setNameBg($form->get('nameBg')->getData());
-            $track->setType($form->get('type')->getData());
+            
             $track->setVisibility($form->get('visibility')->getData());
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();


194) /var/www/src/Controller/Track.php:179    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track->setNameEn($form->get('nameEn')->getData());
             $track->setNameBg($form->get('nameBg')->getData());
             $track->setType($form->get('type')->getData());
-            $track->setVisibility($form->get('visibility')->getData());
+            
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
                 $addNewSlug = false;


195) /var/www/src/Controller/Track.php:181    [M] LogicalNot

--- Original
+++ New
@@ @@
             $track->setNameBg($form->get('nameBg')->getData());
             $track->setType($form->get('type')->getData());
             $track->setVisibility($form->get('visibility')->getData());
-            if (!$form->get('slug')->isEmpty()) {
+            if ($form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
                 $addNewSlug = false;
                 if ($track->getSlug() !== $slug) {


196) /var/www/src/Controller/Track.php:184    [M] FalseValue

--- Original
+++ New
@@ @@
             $track->setVisibility($form->get('visibility')->getData());
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
-                $addNewSlug = false;
+                $addNewSlug = true;
                 if ($track->getSlug() !== $slug) {
                     $track->setSlug($slug);
                     $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);


197) /var/www/src/Controller/Track.php:185    [M] NotIdentical

--- Original
+++ New
@@ @@
             if (!$form->get('slug')->isEmpty()) {
                 $slug = $form->get('slug')->getData();
                 $addNewSlug = false;
-                if ($track->getSlug() !== $slug) {
+                if ($track->getSlug() === $slug) {
                     $track->setSlug($slug);
                     $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
                     if ($existingSlug) {


198) /var/www/src/Controller/Track.php:186    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $slug = $form->get('slug')->getData();
                 $addNewSlug = false;
                 if ($track->getSlug() !== $slug) {
-                    $track->setSlug($slug);
+                    
                     $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
                     if ($existingSlug) {
                         if ($existingSlug->getTrack() !== $track) {


199) /var/www/src/Controller/Track.php:187    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $addNewSlug = false;
                 if ($track->getSlug() !== $slug) {
                     $track->setSlug($slug);
-                    $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
+                    $existingSlug = $slugRepo->findOneBy([]);
                     if ($existingSlug) {
                         if ($existingSlug->getTrack() !== $track) {
                             $formIsValid = false;


200) /var/www/src/Controller/Track.php:189    [M] NotIdentical

--- Original
+++ New
@@ @@
                     $track->setSlug($slug);
                     $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
                     if ($existingSlug) {
-                        if ($existingSlug->getTrack() !== $track) {
+                        if ($existingSlug->getTrack() === $track) {
                             $formIsValid = false;
                             $form->get('slug')->addError(new FormError('Slug is already taken'));
                         }


201) /var/www/src/Controller/Track.php:190    [M] FalseValue

--- Original
+++ New
@@ @@
                     $existingSlug = $slugRepo->findOneBy(['slug' => $slug]);
                     if ($existingSlug) {
                         if ($existingSlug->getTrack() !== $track) {
-                            $formIsValid = false;
+                            $formIsValid = true;
                             $form->get('slug')->addError(new FormError('Slug is already taken'));
                         }
                     } else {


202) /var/www/src/Controller/Track.php:191    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     if ($existingSlug) {
                         if ($existingSlug->getTrack() !== $track) {
                             $formIsValid = false;
-                            $form->get('slug')->addError(new FormError('Slug is already taken'));
+                            
                         }
                     } else {
                         $addNewSlug = true;


203) /var/www/src/Controller/Track.php:196    [M] TrueValue

--- Original
+++ New
@@ @@
                             $form->get('slug')->addError(new FormError('Slug is already taken'));
                         }
                     } else {
-                        $addNewSlug = true;
+                        $addNewSlug = false;
                     }
                 }
                 if ($addNewSlug) {


204) /var/www/src/Controller/Track.php:202    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
                 if ($addNewSlug) {
                     $slugEntity = new Slug($track, $slug);
-                    $this->getDoctrine()->getManager()->persist($slugEntity);
+                    
                 }
             }
             if ($formIsValid) {


205) /var/www/src/Controller/Track.php:208    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
             }
             if ($formIsValid) {
-                $this->getDoctrine()->getManager()->flush();
+                
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }
         }


206) /var/www/src/Controller/Track.php:211    [M] ArrayItem

--- Original
+++ New
@@ @@
             }
             if ($formIsValid) {
                 $this->getDoctrine()->getManager()->flush();
-                return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
+                return $this->redirectToRoute('gps-view', ['id' > $track->getSlugOrId()]);
             }
         }
         return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);


207) /var/www/src/Controller/Track.php:211    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             if ($formIsValid) {
                 $this->getDoctrine()->getManager()->flush();
-                return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
+                return $this->redirectToRoute('gps-view', []);
             }
         }
         return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);


208) /var/www/src/Controller/Track.php:217    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }
         }
-        return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);
+        return $this->render('gps/edit.html.twig', []);
     }
     public function newVersion(Request $request, Processor $processor, string $id)
     {


209) /var/www/src/Controller/Track.php:218    [M] ArrayItem

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('gps-view', ['id' => $track->getSlugOrId()]);
             }
         }
-        return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);
+        return $this->render('gps/edit.html.twig', ['form' > $form->createView()]);
     }
     public function newVersion(Request $request, Processor $processor, string $id)
     {


210) /var/www/src/Controller/Track.php:223    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('gps/edit.html.twig', ['form' => $form->createView()]);
     }
-    public function newVersion(Request $request, Processor $processor, string $id)
+    protected function newVersion(Request $request, Processor $processor, string $id)
     {
         $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
         $this->denyAccessUnlessGranted('edit', $track);


211) /var/www/src/Controller/Track.php:225    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function newVersion(Request $request, Processor $processor, string $id)
     {
-        $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
+        $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy([]);
         $this->denyAccessUnlessGranted('edit', $track);
         $form = $this->createForm(TrackVersion::class);
         $form->add('submit', SubmitType::class);


212) /var/www/src/Controller/Track.php:226    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function newVersion(Request $request, Processor $processor, string $id)
     {
         $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
-        $this->denyAccessUnlessGranted('edit', $track);
+        
         $form = $this->createForm(TrackVersion::class);
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);


213) /var/www/src/Controller/Track.php:229    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $track = $this->getDoctrine()->getRepository(\App\Entity\Track::class)->findOneBy(['id' => $id]);
         $this->denyAccessUnlessGranted('edit', $track);
         $form = $this->createForm(TrackVersion::class);
-        $form->add('submit', SubmitType::class);
+        
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $file = $form->get('file');


214) /var/www/src/Controller/Track.php:231    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->denyAccessUnlessGranted('edit', $track);
         $form = $this->createForm(TrackVersion::class);
         $form->add('submit', SubmitType::class);
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             $file = $form->get('file');
             $fileData = $file->getData();


215) /var/www/src/Controller/Track.php:233    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $form = $this->createForm(TrackVersion::class);
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $file = $form->get('file');
             $fileData = $file->getData();
             /* @var $fileData UploadedFile */


216) /var/www/src/Controller/Track.php:245    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 */
             // we should have service for gpx processing
             $trackVersion = new Version($this->getUser());
-            $processor->process($fileContent, $trackVersion);
+            
             $trackFile = new TrackFile($trackVersion, $fileContent);
             $trackVersion->setFile($trackFile);
             $trackVersion->setDifficulty($form->get('difficulty')->getData());


217) /var/www/src/Controller/Track.php:248    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $trackVersion = new Version($this->getUser());
             $processor->process($fileContent, $trackVersion);
             $trackFile = new TrackFile($trackVersion, $fileContent);
-            $trackVersion->setFile($trackFile);
+            
             $trackVersion->setDifficulty($form->get('difficulty')->getData());
             $track->addVersion($trackVersion);
             if ($trackVersion->getPoints()->isEmpty()) {


218) /var/www/src/Controller/Track.php:249    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $processor->process($fileContent, $trackVersion);
             $trackFile = new TrackFile($trackVersion, $fileContent);
             $trackVersion->setFile($trackFile);
-            $trackVersion->setDifficulty($form->get('difficulty')->getData());
+            
             $track->addVersion($trackVersion);
             if ($trackVersion->getPoints()->isEmpty()) {
                 $form->get('file')->addError(new FormError('error'));


219) /var/www/src/Controller/Track.php:251    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $trackFile = new TrackFile($trackVersion, $fileContent);
             $trackVersion->setFile($trackFile);
             $trackVersion->setDifficulty($form->get('difficulty')->getData());
-            $track->addVersion($trackVersion);
+            
             if ($trackVersion->getPoints()->isEmpty()) {
                 $form->get('file')->addError(new FormError('error'));
             } else {


220) /var/www/src/Controller/Track.php:254    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $trackVersion->setDifficulty($form->get('difficulty')->getData());
             $track->addVersion($trackVersion);
             if ($trackVersion->getPoints()->isEmpty()) {
-                $form->get('file')->addError(new FormError('error'));
+                
             } else {
                 $this->getDoctrine()->getManager()->persist($track);
                 $this->getDoctrine()->getManager()->flush();


221) /var/www/src/Controller/Track.php:258    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($trackVersion->getPoints()->isEmpty()) {
                 $form->get('file')->addError(new FormError('error'));
             } else {
-                $this->getDoctrine()->getManager()->persist($track);
+                
                 $this->getDoctrine()->getManager()->flush();
                 return $this->redirectToRoute('gps-view', ['id' => $track->getId()]);
             }


222) /var/www/src/Controller/Track.php:260    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $form->get('file')->addError(new FormError('error'));
             } else {
                 $this->getDoctrine()->getManager()->persist($track);
-                $this->getDoctrine()->getManager()->flush();
+                
                 return $this->redirectToRoute('gps-view', ['id' => $track->getId()]);
             }
         }


223) /var/www/src/Controller/Track.php:263    [M] ArrayItem

--- Original
+++ New
@@ @@
             } else {
                 $this->getDoctrine()->getManager()->persist($track);
                 $this->getDoctrine()->getManager()->flush();
-                return $this->redirectToRoute('gps-view', ['id' => $track->getId()]);
+                return $this->redirectToRoute('gps-view', ['id' > $track->getId()]);
             }
         }
         return $this->render('gps/newVersion.html.twig', ['track' => $track, 'form' => $form->createView()]);


224) /var/www/src/Controller/Track.php:263    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             } else {
                 $this->getDoctrine()->getManager()->persist($track);
                 $this->getDoctrine()->getManager()->flush();
-                return $this->redirectToRoute('gps-view', ['id' => $track->getId()]);
+                return $this->redirectToRoute('gps-view', []);
             }
         }
         return $this->render('gps/newVersion.html.twig', ['track' => $track, 'form' => $form->createView()]);


225) /var/www/src/Controller/Track.php:269    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('gps-view', ['id' => $track->getId()]);
             }
         }
-        return $this->render('gps/newVersion.html.twig', ['track' => $track, 'form' => $form->createView()]);
+        return $this->render('gps/newVersion.html.twig', ['form' => $form->createView()]);
     }
     public function rate(Request $request, $id)
     {


226) /var/www/src/Controller/Track.php:271    [M] ArrayItem

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('gps-view', ['id' => $track->getId()]);
             }
         }
-        return $this->render('gps/newVersion.html.twig', ['track' => $track, 'form' => $form->createView()]);
+        return $this->render('gps/newVersion.html.twig', ['track' => $track, 'form' > $form->createView()]);
     }
     public function rate(Request $request, $id)
     {


227) /var/www/src/Controller/Track.php:276    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('gps/newVersion.html.twig', ['track' => $track, 'form' => $form->createView()]);
     }
-    public function rate(Request $request, $id)
+    protected function rate(Request $request, $id)
     {
         if (!$request->isXmlHttpRequest()) {
             throw new AccessDeniedHttpException();


228) /var/www/src/Controller/Track.php:278    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function rate(Request $request, $id)
     {
-        if (!$request->isXmlHttpRequest()) {
+        if ($request->isXmlHttpRequest()) {
             throw new AccessDeniedHttpException();
         }
         $em = $this->getDoctrine()->getManager();


229) /var/www/src/Controller/Track.php:279    [M] Throw_

--- Original
+++ New
@@ @@
     public function rate(Request $request, $id)
     {
         if (!$request->isXmlHttpRequest()) {
-            throw new AccessDeniedHttpException();
+            new AccessDeniedHttpException();
         }
         $em = $this->getDoctrine()->getManager();
         /**


230) /var/www/src/Controller/Track.php:294    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         /**
          * @var $version Version
          */
-        $version = $em->getRepository(\App\Entity\Track\Version::class)->findOneBy(['id' => $id]);
+        $version = $em->getRepository(\App\Entity\Track\Version::class)->findOneBy([]);
         if (is_null($version)) {
             return new JsonResponse(['message' => "Invalid track version"], Response::HTTP_BAD_REQUEST);
         }


231) /var/www/src/Controller/Track.php:296    [M] NewObject

--- Original
+++ New
@@ @@
          */
         $version = $em->getRepository(\App\Entity\Track\Version::class)->findOneBy(['id' => $id]);
         if (is_null($version)) {
-            return new JsonResponse(['message' => "Invalid track version"], Response::HTTP_BAD_REQUEST);
+            new JsonResponse(['message' => "Invalid track version"], Response::HTTP_BAD_REQUEST);
+            return null;
         }
         if ($request->getRealMethod() === 'POST') {
             $ratingRepo = $em->getRepository(VersionRating::class);

232) /var/www/src/Controller/Track.php:297    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
          */
         $version = $em->getRepository(\App\Entity\Track\Version::class)->findOneBy(['id' => $id]);
         if (is_null($version)) {
-            return new JsonResponse(['message' => "Invalid track version"], Response::HTTP_BAD_REQUEST);
+            return new JsonResponse([], Response::HTTP_BAD_REQUEST);
         }
         if ($request->getRealMethod() === 'POST') {
             $ratingRepo = $em->getRepository(VersionRating::class);


233) /var/www/src/Controller/Track.php:304    [M] Identical

--- Original
+++ New
@@ @@
         if (is_null($version)) {
             return new JsonResponse(['message' => "Invalid track version"], Response::HTTP_BAD_REQUEST);
         }
-        if ($request->getRealMethod() === 'POST') {
+        if ($request->getRealMethod() !== 'POST') {
             $ratingRepo = $em->getRepository(VersionRating::class);
             /*
              * Check if user has already submitted rating


234) /var/www/src/Controller/Track.php:309    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             /*
              * Check if user has already submitted rating
              */
-            $rating = $ratingRepo->findOneBy(['version' => $id, 'user' => $user]);
+            $rating = $ratingRepo->findOneBy(['user' => $user]);
             /*
              * If $rating is null, create new row
              */


235) /var/www/src/Controller/Track.php:319    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
              */
             if (is_null($rating)) {
                 $rating = new VersionRating();
-                $rating->setUser($user);
+                
                 $rating->setVersion($version);
             }
             /**


236) /var/www/src/Controller/Track.php:320    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if (is_null($rating)) {
                 $rating = new VersionRating();
                 $rating->setUser($user);
-                $rating->setVersion($version);
+                
             }
             /**
              * Check if rating is within range of 1 to 5


237) /var/www/src/Controller/Track.php:327    [M] LogicalOr

--- Original
+++ New
@@ @@
              * Check if rating is within range of 1 to 5
              */
             $newRating = $request->request->get('rating');
-            if ($newRating < 1 || $newRating > 5) {
+            if ($newRating < 1 && $newRating > 5) {
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);


238) /var/www/src/Controller/Track.php:327    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
              * Check if rating is within range of 1 to 5
              */
             $newRating = $request->request->get('rating');
-            if ($newRating < 1 || $newRating > 5) {
+            if ($newRating < 1 || $newRating <= 5) {
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);


239) /var/www/src/Controller/Track.php:327    [M] GreaterThan

--- Original
+++ New
@@ @@
              * Check if rating is within range of 1 to 5
              */
             $newRating = $request->request->get('rating');
-            if ($newRating < 1 || $newRating > 5) {
+            if ($newRating < 1 || $newRating >= 5) {
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);


240) /var/www/src/Controller/Track.php:327    [M] LessThan

--- Original
+++ New
@@ @@
              * Check if rating is within range of 1 to 5
              */
             $newRating = $request->request->get('rating');
-            if ($newRating < 1 || $newRating > 5) {
+            if ($newRating <= 1 || $newRating > 5) {
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);


241) /var/www/src/Controller/Track.php:327    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
              * Check if rating is within range of 1 to 5
              */
             $newRating = $request->request->get('rating');
-            if ($newRating < 1 || $newRating > 5) {
+            if ($newRating >= 1 || $newRating > 5) {
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);


242) /var/www/src/Controller/Track.php:328    [M] NewObject

--- Original
+++ New
@@ @@
              */
             $newRating = $request->request->get('rating');
             if ($newRating < 1 || $newRating > 5) {
-                return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
+                new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
+                return null;
             }
             $rating->setRating($newRating);
             $em->persist($rating);

243) /var/www/src/Controller/Track.php:329    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
              */
             $newRating = $request->request->get('rating');
             if ($newRating < 1 || $newRating > 5) {
-                return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
+                return new JsonResponse([], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);
             $em->persist($rating);


244) /var/www/src/Controller/Track.php:336    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($newRating < 1 || $newRating > 5) {
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
-            $rating->setRating($newRating);
+            
             $em->persist($rating);
             $em->flush();
         }


245) /var/www/src/Controller/Track.php:337    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 return new JsonResponse(['message' => 'Invalid rating: ' . $newRating], Response::HTTP_BAD_REQUEST);
             }
             $rating->setRating($newRating);
-            $em->persist($rating);
+            
             $em->flush();
         }
         $average = 0;


246) /var/www/src/Controller/Track.php:338    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $rating->setRating($newRating);
             $em->persist($rating);
-            $em->flush();
+            
         }
         $average = 0;
         /**


247) /var/www/src/Controller/Track.php:341    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $em->persist($rating);
             $em->flush();
         }
-        $average = 0;
+        $average = 1;
         /**
          * @var $r VersionRating
          */


248) /var/www/src/Controller/Track.php:341    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $em->persist($rating);
             $em->flush();
         }
-        $average = 0;
+        $average = -1;
         /**
          * @var $r VersionRating
          */


249) /var/www/src/Controller/Track.php:345    [M] Foreach_

--- Original
+++ New
@@ @@
         /**
          * @var $r VersionRating
          */
-        foreach ($version->getRatings() as $r) {
+        foreach (array() as $r) {
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();


250) /var/www/src/Controller/Track.php:346    [M] PlusEqual

--- Original
+++ New
@@ @@
          * @var $r VersionRating
          */
         foreach ($version->getRatings() as $r) {
-            $average += $r->getRating();
+            $average -= $r->getRating();
         }
         $average = $average / $version->getVotes();
         return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);


251) /var/www/src/Controller/Track.php:346    [M] Assignment

--- Original
+++ New
@@ @@
          * @var $r VersionRating
          */
         foreach ($version->getRatings() as $r) {
-            $average += $r->getRating();
+            $average = $r->getRating();
         }
         $average = $average / $version->getVotes();
         return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);


252) /var/www/src/Controller/Track.php:348    [M] Division

--- Original
+++ New
@@ @@
         foreach ($version->getRatings() as $r) {
             $average += $r->getRating();
         }
-        $average = $average / $version->getVotes();
+        $average = $average * $version->getVotes();
         return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)


253) /var/www/src/Controller/Track.php:350    [M] NewObject

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return null;
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {

254) /var/www/src/Controller/Track.php:350    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


255) /var/www/src/Controller/Track.php:351    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['rating' => round($average, 1), 'votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


256) /var/www/src/Controller/Track.php:351    [M] IncrementInteger

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['rating' => round($average, 3), 'votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


257) /var/www/src/Controller/Track.php:351    [M] RoundingFamily

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['rating' => floor($average), 'votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


258) /var/www/src/Controller/Track.php:351    [M] RoundingFamily

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['rating' => ceil($average), 'votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


259) /var/www/src/Controller/Track.php:351    [M] ArrayItem

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['rating' > round($average, 2), 'votes' => $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


260) /var/www/src/Controller/Track.php:352    [M] ArrayItem

--- Original
+++ New
@@ @@
             $average += $r->getRating();
         }
         $average = $average / $version->getVotes();
-        return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
+        return new JsonResponse(['rating' => round($average, 2), 'votes' > $version->getVotes()]);
     }
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {


261) /var/www/src/Controller/Track.php:356    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $average = $average / $version->getVotes();
         return new JsonResponse(['rating' => round($average, 2), 'votes' => $version->getVotes()]);
     }
-    public function view($id, TrackRepository $repo, Request $request, Processor $processor)
+    protected function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {
         $gps = $repo->findByIdOrSlug($id);
         if (!$gps) {


262) /var/www/src/Controller/Track.php:360    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function view($id, TrackRepository $repo, Request $request, Processor $processor)
     {
         $gps = $repo->findByIdOrSlug($id);
-        if (!$gps) {
+        if ($gps) {
             throw new NotFoundHttpException("Track not found");
         }
         $canonicalUrl = null;


263) /var/www/src/Controller/Track.php:361    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $gps = $repo->findByIdOrSlug($id);
         if (!$gps) {
-            throw new NotFoundHttpException("Track not found");
+            new NotFoundHttpException("Track not found");
         }
         $canonicalUrl = null;
         if ($gps->getSlug()) {


264) /var/www/src/Controller/Track.php:368    [M] ArrayItem

--- Original
+++ New
@@ @@
         }
         $canonicalUrl = null;
         if ($gps->getSlug()) {
-            $canonicalUrl = $this->generateUrl('gps-view', ['id' => $gps->getSlug()]);
+            $canonicalUrl = $this->generateUrl('gps-view', ['id' > $gps->getSlug()]);
         }
         $pointsCollection = [];
         foreach ($gps->getVersions() as $loopIndex => $version) {


265) /var/www/src/Controller/Track.php:368    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $canonicalUrl = null;
         if ($gps->getSlug()) {
-            $canonicalUrl = $this->generateUrl('gps-view', ['id' => $gps->getSlug()]);
+            $canonicalUrl = $this->generateUrl('gps-view', []);
         }
         $pointsCollection = [];
         foreach ($gps->getVersions() as $loopIndex => $version) {


266) /var/www/src/Controller/Track.php:374    [M] Foreach_

--- Original
+++ New
@@ @@
             $canonicalUrl = $this->generateUrl('gps-view', ['id' => $gps->getSlug()]);
         }
         $pointsCollection = [];
-        foreach ($gps->getVersions() as $loopIndex => $version) {
+        foreach (array() as $loopIndex => $version) {
             $pointsCollection[] = $version->getPoints()->toArray();
         }
         foreach ($gps->getDownhillVersions() as $loopIndex => $item) {


267) /var/www/src/Controller/Track.php:378    [M] Foreach_

--- Original
+++ New
@@ @@
         foreach ($gps->getVersions() as $loopIndex => $version) {
             $pointsCollection[] = $version->getPoints()->toArray();
         }
-        foreach ($gps->getDownhillVersions() as $loopIndex => $item) {
+        foreach (array() as $loopIndex => $item) {
             $pointsCollection[] = $item->getPoints()->toArray();
         }
         foreach ($gps->getUphillVersions() as $loopIndex => $item) {


268) /var/www/src/Controller/Track.php:382    [M] Foreach_

--- Original
+++ New
@@ @@
         foreach ($gps->getDownhillVersions() as $loopIndex => $item) {
             $pointsCollection[] = $item->getPoints()->toArray();
         }
-        foreach ($gps->getUphillVersions() as $loopIndex => $item) {
+        foreach (array() as $loopIndex => $item) {
             $pointsCollection[] = $item->getPoints()->toArray();
         }
         $labels = $processor->generateElevationLables($pointsCollection, 150);


269) /var/www/src/Controller/Track.php:386    [M] DecrementInteger

--- Original
+++ New
@@ @@
         foreach ($gps->getUphillVersions() as $loopIndex => $item) {
             $pointsCollection[] = $item->getPoints()->toArray();
         }
-        $labels = $processor->generateElevationLables($pointsCollection, 150);
+        $labels = $processor->generateElevationLables($pointsCollection, 149);
         $values = $processor->generateElevationData($pointsCollection, $labels);
         foreach ($labels as &$label) {
             $label = number_format($label, 0, '', ' ') . ' m';


270) /var/www/src/Controller/Track.php:386    [M] IncrementInteger

--- Original
+++ New
@@ @@
         foreach ($gps->getUphillVersions() as $loopIndex => $item) {
             $pointsCollection[] = $item->getPoints()->toArray();
         }
-        $labels = $processor->generateElevationLables($pointsCollection, 150);
+        $labels = $processor->generateElevationLables($pointsCollection, 151);
         $values = $processor->generateElevationData($pointsCollection, $labels);
         foreach ($labels as &$label) {
             $label = number_format($label, 0, '', ' ') . ' m';


271) /var/www/src/Controller/Track.php:390    [M] Foreach_

--- Original
+++ New
@@ @@
         }
         $labels = $processor->generateElevationLables($pointsCollection, 150);
         $values = $processor->generateElevationData($pointsCollection, $labels);
-        foreach ($labels as &$label) {
+        foreach (array() as &$label) {
             $label = number_format($label, 0, '', ' ') . ' m';
         }
         unset($label);


272) /var/www/src/Controller/Track.php:391    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $labels = $processor->generateElevationLables($pointsCollection, 150);
         $values = $processor->generateElevationData($pointsCollection, $labels);
         foreach ($labels as &$label) {
-            $label = number_format($label, 0, '', ' ') . ' m';
+            $label = number_format($label, -1, '', ' ') . ' m';
         }
         unset($label);
         $dataSets = [];


273) /var/www/src/Controller/Track.php:391    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $labels = $processor->generateElevationLables($pointsCollection, 150);
         $values = $processor->generateElevationData($pointsCollection, $labels);
         foreach ($labels as &$label) {
-            $label = number_format($label, 0, '', ' ') . ' m';
+            $label = number_format($label, 1, '', ' ') . ' m';
         }
         unset($label);
         $dataSets = [];


274) /var/www/src/Controller/Track.php:396    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         }
         unset($label);
         $dataSets = [];
-        reset($values);
+        
         for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {


275) /var/www/src/Controller/Track.php:397    [M] LessThan

--- Original
+++ New
@@ @@
         unset($label);
         $dataSets = [];
         reset($values);
-        for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
+        for ($q = 0; $q <= $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


276) /var/www/src/Controller/Track.php:397    [M] Increment

--- Original
+++ New
@@ @@
         unset($label);
         $dataSets = [];
         reset($values);
-        for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
+        for ($q = 0; $q < $gps->getVersions()->count(); $q--) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


277) /var/www/src/Controller/Track.php:397    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         unset($label);
         $dataSets = [];
         reset($values);
-        for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
+        for ($q = 0; $q >= $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


278) /var/www/src/Controller/Track.php:397    [M] For_

--- Original
+++ New
@@ @@
         unset($label);
         $dataSets = [];
         reset($values);
-        for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
+        for ($q = 0; false; $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


279) /var/www/src/Controller/Track.php:397    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         unset($label);
         $dataSets = [];
         reset($values);
-        for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
+        for ($q = 1; $q < $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


280) /var/www/src/Controller/Track.php:397    [M] DecrementInteger

--- Original
+++ New
@@ @@
         unset($label);
         $dataSets = [];
         reset($values);
-        for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
+        for ($q = -1; $q < $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


281) /var/www/src/Controller/Track.php:399    [M] Foreach_

--- Original
+++ New
@@ @@
         reset($values);
         for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
-            foreach ($currentValues as &$value) {
+            foreach (array() as &$value) {
                 $value = (int) $value;
             }
             unset($value);


282) /var/www/src/Controller/Track.php:400    [M] CastInt

--- Original
+++ New
@@ @@
         for ($q = 0; $q < $gps->getVersions()->count(); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
-                $value = (int) $value;
+                $value = $value;
             }
             unset($value);
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];


283) /var/www/src/Controller/Track.php:404    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
+            $dataSets[] = ['label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {


284) /var/www/src/Controller/Track.php:406    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 2), 'borderColor' => 'red'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {


285) /var/www/src/Controller/Track.php:406    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 0), 'borderColor' => 'red'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {


286) /var/www/src/Controller/Track.php:406    [M] Plus

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q - 1), 'borderColor' => 'red'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {


287) /var/www/src/Controller/Track.php:410    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             }
             unset($value);
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
-            next($values);
+            
         }
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);


288) /var/www/src/Controller/Track.php:413    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
+        for ($q = 0; $q >= count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


289) /var/www/src/Controller/Track.php:413    [M] Increment

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
+        for ($q = 0; $q < count($gps->getDownhillVersions()); $q--) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


290) /var/www/src/Controller/Track.php:413    [M] For_

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
+        for ($q = 0; false; $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


291) /var/www/src/Controller/Track.php:413    [M] LessThan

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
+        for ($q = 0; $q <= count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


292) /var/www/src/Controller/Track.php:413    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
+        for ($q = 1; $q < count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


293) /var/www/src/Controller/Track.php:413    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'main track #' . ($q + 1), 'borderColor' => 'red'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
+        for ($q = -1; $q < count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


294) /var/www/src/Controller/Track.php:415    [M] Foreach_

--- Original
+++ New
@@ @@
         }
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);
-            foreach ($currentValues as &$value) {
+            foreach (array() as &$value) {
                 $value = (int) $value;
             }
             unset($value);


295) /var/www/src/Controller/Track.php:416    [M] CastInt

--- Original
+++ New
@@ @@
         for ($q = 0; $q < count($gps->getDownhillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
-                $value = (int) $value;
+                $value = $value;
             }
             unset($value);
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];


296) /var/www/src/Controller/Track.php:420    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
+            $dataSets[] = ['label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {


297) /var/www/src/Controller/Track.php:422    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 0), 'borderColor' => 'orange'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {


298) /var/www/src/Controller/Track.php:422    [M] Plus

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q - 1), 'borderColor' => 'orange'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {


299) /var/www/src/Controller/Track.php:422    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 2), 'borderColor' => 'orange'];
             next($values);
         }
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {


300) /var/www/src/Controller/Track.php:426    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             }
             unset($value);
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
-            next($values);
+            
         }
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);


301) /var/www/src/Controller/Track.php:429    [M] For_

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
+        for ($q = 0; false; $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


302) /var/www/src/Controller/Track.php:429    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
+        for ($q = -1; $q < count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


303) /var/www/src/Controller/Track.php:429    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
+        for ($q = 1; $q < count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


304) /var/www/src/Controller/Track.php:429    [M] LessThan

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
+        for ($q = 0; $q <= count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


305) /var/www/src/Controller/Track.php:429    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
+        for ($q = 0; $q >= count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


306) /var/www/src/Controller/Track.php:429    [M] Increment

--- Original
+++ New
@@ @@
             $dataSets[] = ['data' => $currentValues, 'label' => 'downhill version #' . ($q + 1), 'borderColor' => 'orange'];
             next($values);
         }
-        for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
+        for ($q = 0; $q < count($gps->getUphillVersions()); $q--) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
                 $value = (int) $value;


307) /var/www/src/Controller/Track.php:431    [M] Foreach_

--- Original
+++ New
@@ @@
         }
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);
-            foreach ($currentValues as &$value) {
+            foreach (array() as &$value) {
                 $value = (int) $value;
             }
             unset($value);


308) /var/www/src/Controller/Track.php:432    [M] CastInt

--- Original
+++ New
@@ @@
         for ($q = 0; $q < count($gps->getUphillVersions()); $q++) {
             $currentValues = current($values);
             foreach ($currentValues as &$value) {
-                $value = (int) $value;
+                $value = $value;
             }
             unset($value);
             $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];


309) /var/www/src/Controller/Track.php:436    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];
+            $dataSets[] = ['label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];
             next($values);
         }
         $appTitle = $gps->getName($request->getLocale());


310) /var/www/src/Controller/Track.php:438    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 0), 'borderColor' => 'green'];
             next($values);
         }
         $appTitle = $gps->getName($request->getLocale());


311) /var/www/src/Controller/Track.php:438    [M] Plus

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q - 1), 'borderColor' => 'green'];
             next($values);
         }
         $appTitle = $gps->getName($request->getLocale());


312) /var/www/src/Controller/Track.php:438    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $value = (int) $value;
             }
             unset($value);
-            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];
+            $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 2), 'borderColor' => 'green'];
             next($values);
         }
         $appTitle = $gps->getName($request->getLocale());


313) /var/www/src/Controller/Track.php:442    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             }
             unset($value);
             $dataSets[] = ['data' => $currentValues, 'label' => 'uphill version #' . ($q + 1), 'borderColor' => 'green'];
-            next($values);
+            
         }
         $appTitle = $gps->getName($request->getLocale());
         switch ($gps->getType()) {


314) /var/www/src/Controller/Track.php:448    [M] Assignment

--- Original
+++ New
@@ @@
         $appTitle = $gps->getName($request->getLocale());
         switch ($gps->getType()) {
             case \App\Entity\Track::TYPE_CYCLING:
-                $appTitle .= ' mountain bike trail';
+                $appTitle = ' mountain bike trail';
         }
         return $this->render('gps/view.html.twig', ['track' => $gps, 'elevationData' => $dataSets, 'elevationLabels' => $labels, 'app_canonical_url' => $canonicalUrl, 'app_title' => $appTitle, 'canEdit' => $this->isGranted('edit', $gps)]);
     }


315) /var/www/src/Controller/Track.php:453    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             case \App\Entity\Track::TYPE_CYCLING:
                 $appTitle .= ' mountain bike trail';
         }
-        return $this->render('gps/view.html.twig', ['track' => $gps, 'elevationData' => $dataSets, 'elevationLabels' => $labels, 'app_canonical_url' => $canonicalUrl, 'app_title' => $appTitle, 'canEdit' => $this->isGranted('edit', $gps)]);
+        return $this->render('gps/view.html.twig', ['elevationData' => $dataSets, 'elevationLabels' => $labels, 'app_canonical_url' => $canonicalUrl, 'app_title' => $appTitle, 'canEdit' => $this->isGranted('edit', $gps)]);
     }
     public function download($id, TrackRepository $repo)
     {


316) /var/www/src/Controller/Track.php:459    [M] ArrayItem

--- Original
+++ New
@@ @@
             case \App\Entity\Track::TYPE_CYCLING:
                 $appTitle .= ' mountain bike trail';
         }
-        return $this->render('gps/view.html.twig', ['track' => $gps, 'elevationData' => $dataSets, 'elevationLabels' => $labels, 'app_canonical_url' => $canonicalUrl, 'app_title' => $appTitle, 'canEdit' => $this->isGranted('edit', $gps)]);
+        return $this->render('gps/view.html.twig', ['track' => $gps, 'elevationData' => $dataSets, 'elevationLabels' => $labels, 'app_canonical_url' => $canonicalUrl, 'app_title' => $appTitle, 'canEdit' > $this->isGranted('edit', $gps)]);
     }
     public function download($id, TrackRepository $repo)
     {


317) /var/www/src/Controller/Track.php:464    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('gps/view.html.twig', ['track' => $gps, 'elevationData' => $dataSets, 'elevationLabels' => $labels, 'app_canonical_url' => $canonicalUrl, 'app_title' => $appTitle, 'canEdit' => $this->isGranted('edit', $gps)]);
     }
-    public function download($id, TrackRepository $repo)
+    protected function download($id, TrackRepository $repo)
     {
         $track = $repo->findOneBy(['id' => $id]);
         $exporter = new Exporter();


318) /var/www/src/Controller/Track.php:466    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function download($id, TrackRepository $repo)
     {
-        $track = $repo->findOneBy(['id' => $id]);
+        $track = $repo->findOneBy([]);
         $exporter = new Exporter();
         $exported = $exporter->export($track->getVersions(), Exporter::FORMAT_GPX);
         $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);


319) /var/www/src/Controller/Track.php:473    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $track = $repo->findOneBy(['id' => $id]);
         $exporter = new Exporter();
         $exported = $exporter->export($track->getVersions(), Exporter::FORMAT_GPX);
-        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
+        $response = new \Symfony\Component\HttpFoundation\Response($exported, 199, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
         return $response;
     }
     public function downloadBatch(Request $request)


320) /var/www/src/Controller/Track.php:473    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $track = $repo->findOneBy(['id' => $id]);
         $exporter = new Exporter();
         $exported = $exporter->export($track->getVersions(), Exporter::FORMAT_GPX);
-        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
+        $response = new \Symfony\Component\HttpFoundation\Response($exported, 201, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
         return $response;
     }
     public function downloadBatch(Request $request)


321) /var/www/src/Controller/Track.php:474    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $track = $repo->findOneBy(['id' => $id]);
         $exporter = new Exporter();
         $exported = $exporter->export($track->getVersions(), Exporter::FORMAT_GPX);
-        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
+        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, []);
         return $response;
     }
     public function downloadBatch(Request $request)


322) /var/www/src/Controller/Track.php:482    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
         return $response;
     }
-    public function downloadBatch(Request $request)
+    protected function downloadBatch(Request $request)
     {
         $versions = $request->request->get('versions');
         $versionRepo = $this->getDoctrine()->getRepository(Version::class);


323) /var/www/src/Controller/Track.php:486    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $versions = $request->request->get('versions');
         $versionRepo = $this->getDoctrine()->getRepository(Version::class);
-        $versionsCollection = $versionRepo->findBy(['id' => $versions]);
+        $versionsCollection = $versionRepo->findBy([]);
         $exporter = new Exporter();
         $exported = $exporter->export($versionsCollection, Exporter::FORMAT_GPX);
         $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);


324) /var/www/src/Controller/Track.php:493    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $versionsCollection = $versionRepo->findBy(['id' => $versions]);
         $exporter = new Exporter();
         $exported = $exporter->export($versionsCollection, Exporter::FORMAT_GPX);
-        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
+        $response = new \Symfony\Component\HttpFoundation\Response($exported, 199, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
         return $response;
     }
 }


325) /var/www/src/Controller/Track.php:493    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $versionsCollection = $versionRepo->findBy(['id' => $versions]);
         $exporter = new Exporter();
         $exported = $exporter->export($versionsCollection, Exporter::FORMAT_GPX);
-        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
+        $response = new \Symfony\Component\HttpFoundation\Response($exported, 201, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
         return $response;
     }
 }


326) /var/www/src/Controller/Track.php:494    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $versionsCollection = $versionRepo->findBy(['id' => $versions]);
         $exporter = new Exporter();
         $exported = $exporter->export($versionsCollection, Exporter::FORMAT_GPX);
-        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, ['Content-Disposition' => ResponseHeaderBag::DISPOSITION_ATTACHMENT . '; filename="track.gpx";']);
+        $response = new \Symfony\Component\HttpFoundation\Response($exported, 200, []);
         return $response;
     }
 }


327) /var/www/src/Controller/Track/Image.php:15    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Symfony\Contracts\Translation\TranslatorInterface;
 class Image extends AbstractController
 {
-    public function addImage(string $id, Request $request, TrackRepository $trackRepo, TranslatorInterface $translator)
+    protected function addImage(string $id, Request $request, TrackRepository $trackRepo, TranslatorInterface $translator)
     {
         $token = $request->request->get('token');
         if (!$this->isCsrfTokenValid('file_upload', $token)) {


328) /var/www/src/Controller/Track/Image.php:18    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function addImage(string $id, Request $request, TrackRepository $trackRepo, TranslatorInterface $translator)
     {
         $token = $request->request->get('token');
-        if (!$this->isCsrfTokenValid('file_upload', $token)) {
+        if ($this->isCsrfTokenValid('file_upload', $token)) {
             throw $this->createAccessDeniedException('csrf check failed');
         }
         $uploader = new ImageUploader($this->getParameter('track_images_directory'), $trackRepo, $translator);


329) /var/www/src/Controller/Track/Image.php:19    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $token = $request->request->get('token');
         if (!$this->isCsrfTokenValid('file_upload', $token)) {
-            throw $this->createAccessDeniedException('csrf check failed');
+            $this->createAccessDeniedException('csrf check failed');
         }
         $uploader = new ImageUploader($this->getParameter('track_images_directory'), $trackRepo, $translator);
         $user = $this->getUser();


330) /var/www/src/Controller/Track/Image.php:31    [M] NewObject

--- Original
+++ New
@@ @@
         $uploader = new ImageUploader($this->getParameter('track_images_directory'), $trackRepo, $translator);
         $user = $this->getUser();
         $entityCreator = function ($path, $parentEntity) use($user) {
-            return new \App\Entity\Track\Image($path, $user, $parentEntity);
+            new \App\Entity\Track\Image($path, $user, $parentEntity);
+            return null;
         };
         list($image, $response) = $uploader->addImage($id, $request, $entityCreator);
         if ($image) {

331) /var/www/src/Controller/Track/Image.php:37    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         };
         list($image, $response) = $uploader->addImage($id, $request, $entityCreator);
         if ($image) {
-            $this->getDoctrine()->getManager()->persist($image);
+            
             $this->getDoctrine()->getManager()->flush();
         }
         return $response;


332) /var/www/src/Controller/Track/Image.php:38    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         list($image, $response) = $uploader->addImage($id, $request, $entityCreator);
         if ($image) {
             $this->getDoctrine()->getManager()->persist($image);
-            $this->getDoctrine()->getManager()->flush();
+            
         }
         return $response;
     }


333) /var/www/src/Controller/Track/Image.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * This method is called when thumbnails doesn't exists.
      * Thumbnail will be created and saved in the "public" directory.
      */
-    public function generateThumbnail(int $year, string $trackId, string $imagePath, int $maxWidth, int $maxHeight, Request $request)
+    protected function generateThumbnail(int $year, string $trackId, string $imagePath, int $maxWidth, int $maxHeight, Request $request)
     {
         $originalImagePath = $this->getParameter('track_images_directory') . DIRECTORY_SEPARATOR;
         $originalImagePath .= $year . DIRECTORY_SEPARATOR . $trackId . DIRECTORY_SEPARATOR . $imagePath;


334) /var/www/src/Controller/Track/Image.php:51    [M] Assignment

--- Original
+++ New
@@ @@
     public function generateThumbnail(int $year, string $trackId, string $imagePath, int $maxWidth, int $maxHeight, Request $request)
     {
         $originalImagePath = $this->getParameter('track_images_directory') . DIRECTORY_SEPARATOR;
-        $originalImagePath .= $year . DIRECTORY_SEPARATOR . $trackId . DIRECTORY_SEPARATOR . $imagePath;
+        $originalImagePath = $year . DIRECTORY_SEPARATOR . $trackId . DIRECTORY_SEPARATOR . $imagePath;
         $thumbnailPathDir = $this->getParameter('track_images_thumbnails_directory');
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $trackId;


335) /var/www/src/Controller/Track/Image.php:54    [M] Assignment

--- Original
+++ New
@@ @@
         $originalImagePath = $this->getParameter('track_images_directory') . DIRECTORY_SEPARATOR;
         $originalImagePath .= $year . DIRECTORY_SEPARATOR . $trackId . DIRECTORY_SEPARATOR . $imagePath;
         $thumbnailPathDir = $this->getParameter('track_images_thumbnails_directory');
-        $thumbnailPathDir .= DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
+        $thumbnailPathDir = DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $trackId;
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();


336) /var/www/src/Controller/Track/Image.php:55    [M] Assignment

--- Original
+++ New
@@ @@
         $originalImagePath .= $year . DIRECTORY_SEPARATOR . $trackId . DIRECTORY_SEPARATOR . $imagePath;
         $thumbnailPathDir = $this->getParameter('track_images_thumbnails_directory');
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $maxWidth . DIRECTORY_SEPARATOR . $maxHeight;
-        $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $trackId;
+        $thumbnailPathDir = DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $trackId;
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);


337) /var/www/src/Controller/Track/Image.php:59    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $thumbnailPathDir .= DIRECTORY_SEPARATOR . $year . DIRECTORY_SEPARATOR . $trackId;
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
-        $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
+        
         return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
     }
 }


338) /var/www/src/Controller/Track/Image.php:61    [M] NewObject

--- Original
+++ New
@@ @@
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
-        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        return null;
     }
 }


339) /var/www/src/Controller/Track/Image.php:64    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
-        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, []);
     }
 }


340) /var/www/src/Controller/Track/Image.php:65    [M] ArrayItem

--- Original
+++ New
@@ @@
         $thumbnailPath = $thumbnailPathDir . DIRECTORY_SEPARATOR . $imagePath;
         $resizer = new ImageEdit();
         $resizer->resize($originalImagePath, $thumbnailPath, $maxWidth, $maxHeight);
-        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' => $request->getRequestUri()]);
+        return new Response(null, Response::HTTP_TEMPORARY_REDIRECT, ['location' > $request->getRequestUri()]);
     }
 }


341) /var/www/src/Controller/User.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Symfony\Component\HttpFoundation\Response;
 class User extends AbstractController
 {
-    public function terms(Request $request)
+    protected function terms(Request $request)
     {
         if (!$this->getUser()) {
             return $this->redirectToRoute('hwi_oauth_connect');


342) /var/www/src/Controller/User.php:15    [M] LogicalNot

--- Original
+++ New
@@ @@
 {
     public function terms(Request $request)
     {
-        if (!$this->getUser()) {
+        if ($this->getUser()) {
             return $this->redirectToRoute('hwi_oauth_connect');
         }
         $form = $this->createForm(Terms::class);


343) /var/www/src/Controller/User.php:20    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             return $this->redirectToRoute('hwi_oauth_connect');
         }
         $form = $this->createForm(Terms::class);
-        $form->add('submit', SubmitType::class);
+        
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $this->getUser()->acceptTerms();


344) /var/www/src/Controller/User.php:22    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $form = $this->createForm(Terms::class);
         $form->add('submit', SubmitType::class);
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             $this->getUser()->acceptTerms();
             $this->getDoctrine()->getManager()->flush();


345) /var/www/src/Controller/User.php:23    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $form = $this->createForm(Terms::class);
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             $this->getUser()->acceptTerms();
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('home');


346) /var/www/src/Controller/User.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->add('submit', SubmitType::class);
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
-            $this->getUser()->acceptTerms();
+            
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('home');
         }


347) /var/www/src/Controller/User.php:25    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $form->handleRequest($request);
         if ($form->isSubmitted() && $form->isValid()) {
             $this->getUser()->acceptTerms();
-            $this->getDoctrine()->getManager()->flush();
+            
             return $this->redirectToRoute('home');
         }
         return $this->render('user/terms.html.twig', ['form' => $form->createView()]);


348) /var/www/src/Controller/User.php:30    [M] ArrayItem

--- Original
+++ New
@@ @@
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('home');
         }
-        return $this->render('user/terms.html.twig', ['form' => $form->createView()]);
+        return $this->render('user/terms.html.twig', ['form' > $form->createView()]);
     }
     public function downloadPersonalData()
     {


349) /var/www/src/Controller/User.php:30    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->getDoctrine()->getManager()->flush();
             return $this->redirectToRoute('home');
         }
-        return $this->render('user/terms.html.twig', ['form' => $form->createView()]);
+        return $this->render('user/terms.html.twig', []);
     }
     public function downloadPersonalData()
     {


350) /var/www/src/Controller/User.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->render('user/terms.html.twig', ['form' => $form->createView()]);
     }
-    public function downloadPersonalData()
+    protected function downloadPersonalData()
     {
         $user = $this->getUser();
         $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy(['id' => $user->getid()]);


351) /var/www/src/Controller/User.php:37    [M] ArrayItem

--- Original
+++ New
@@ @@
     public function downloadPersonalData()
     {
         $user = $this->getUser();
-        $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy(['id' => $user->getid()]);
+        $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy(['id' > $user->getid()]);
         // temp file
         $fp = fopen('php://temp', 'r+');
         fputcsv($fp, ['username', 'email', 'facebook id']);


352) /var/www/src/Controller/User.php:37    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function downloadPersonalData()
     {
         $user = $this->getUser();
-        $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy(['id' => $user->getid()]);
+        $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy([]);
         // temp file
         $fp = fopen('php://temp', 'r+');
         fputcsv($fp, ['username', 'email', 'facebook id']);


353) /var/www/src/Controller/User.php:41    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy(['id' => $user->getid()]);
         // temp file
         $fp = fopen('php://temp', 'r+');
-        fputcsv($fp, ['username', 'email', 'facebook id']);
+        
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
         $csvAsString = fread($fp, 1024 * 1024);


354) /var/www/src/Controller/User.php:43    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $userFromDb = $this->getDoctrine()->getRepository(\App\Entity\User\User::class)->findOneBy(['id' => $user->getid()]);
         // temp file
         $fp = fopen('php://temp', 'r+');
-        fputcsv($fp, ['username', 'email', 'facebook id']);
+        fputcsv($fp, ['email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
         $csvAsString = fread($fp, 1024 * 1024);


355) /var/www/src/Controller/User.php:49    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         // temp file
         $fp = fopen('php://temp', 'r+');
         fputcsv($fp, ['username', 'email', 'facebook id']);
-        fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
+        
         rewind($fp);
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...


356) /var/www/src/Controller/User.php:51    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // temp file
         $fp = fopen('php://temp', 'r+');
         fputcsv($fp, ['username', 'email', 'facebook id']);
-        fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
+        fputcsv($fp, [$userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...


357) /var/www/src/Controller/User.php:57    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         $fp = fopen('php://temp', 'r+');
         fputcsv($fp, ['username', 'email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
-        rewind($fp);
+        
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...
         fclose($fp);


358) /var/www/src/Controller/User.php:58    [M] DecrementInteger

--- Original
+++ New
@@ @@
         fputcsv($fp, ['username', 'email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
-        $csvAsString = fread($fp, 1024 * 1024);
+        $csvAsString = fread($fp, 1024 * 1023);
         // ... close the "file"...
         fclose($fp);
         return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }

359) /var/www/src/Controller/User.php:58    [M] Multiplication

--- Original
+++ New
@@ @@
         fputcsv($fp, ['username', 'email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
-        $csvAsString = fread($fp, 1024 * 1024);
+        $csvAsString = fread($fp, 1024 / 1024);
         // ... close the "file"...
         fclose($fp);
         return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }

360) /var/www/src/Controller/User.php:58    [M] IncrementInteger

--- Original
+++ New
@@ @@
         fputcsv($fp, ['username', 'email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
-        $csvAsString = fread($fp, 1024 * 1024);
+        $csvAsString = fread($fp, 1025 * 1024);
         // ... close the "file"...
         fclose($fp);
         return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }

361) /var/www/src/Controller/User.php:58    [M] IncrementInteger

--- Original
+++ New
@@ @@
         fputcsv($fp, ['username', 'email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
-        $csvAsString = fread($fp, 1024 * 1024);
+        $csvAsString = fread($fp, 1024 * 1025);
         // ... close the "file"...
         fclose($fp);
         return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }

362) /var/www/src/Controller/User.php:58    [M] DecrementInteger

--- Original
+++ New
@@ @@
         fputcsv($fp, ['username', 'email', 'facebook id']);
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
-        $csvAsString = fread($fp, 1024 * 1024);
+        $csvAsString = fread($fp, 1023 * 1024);
         // ... close the "file"...
         fclose($fp);
         return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }

363) /var/www/src/Controller/User.php:60    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         fputcsv($fp, [$userFromDb->getUsername(), $userFromDb->getEmail(), $userFromDb->getFacebookId()]);
         rewind($fp);
         $csvAsString = fread($fp, 1024 * 1024);
-        // ... close the "file"...
-        fclose($fp);
+        
         return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }
 }

364) /var/www/src/Controller/User.php:62    [M] NewObject

--- Original
+++ New
@@ @@
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...
         fclose($fp);
-        return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
+        new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
+        return null;
     }
 }


365) /var/www/src/Controller/User.php:64    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...
         fclose($fp);
-        return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
+        return new Response($csvAsString, 199, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }
 }


366) /var/www/src/Controller/User.php:64    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...
         fclose($fp);
-        return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
+        return new Response($csvAsString, 201, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }
 }


367) /var/www/src/Controller/User.php:65    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $csvAsString = fread($fp, 1024 * 1024);
         // ... close the "file"...
         fclose($fp);
-        return new Response($csvAsString, 200, ['content-type' => 'application/csv', 'content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
+        return new Response($csvAsString, 200, ['content-disposition' => 'attachment; filename=personal-data.csv', 'pragma' => 'no-cache']);
     }
 }


368) /var/www/src/Entity/File/TrackFile.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->fileContent = $fileContent;
         $this->createdAt = new \DateTime();
     }
-    public function getFileContent() : string
+    protected function getFileContent() : string
     {
         return $this->fileContent;
     }


369) /var/www/src/Entity/File/TrackFile.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->fileContent;
     }
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


370) /var/www/src/Entity/File/TrackFile.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function setVersion(Version $version) : void
+    protected function setVersion(Version $version) : void
     {
         $this->version = $version;
     }
 }

371) /var/www/src/Entity/Place.php:56    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->sendBy = $sendBy;
         $this->createdAt = new \DateTime();
     }
-    public function getId() : string
+    protected function getId() : string
     {
         return $this->id;
     }


372) /var/www/src/Entity/Place.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function setLat(float $lat)
+    protected function setLat(float $lat)
     {
         $this->lat = $lat;
     }


373) /var/www/src/Entity/Place.php:66    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->lat = $lat;
     }
-    public function setLng(float $lng)
+    protected function setLng(float $lng)
     {
         $this->lng = $lng;
     }


374) /var/www/src/Entity/Place.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->lng = $lng;
     }
-    public function addImage(Image $image)
+    protected function addImage(Image $image)
     {
         $this->images->add($image);
     }


375) /var/www/src/Entity/Place.php:73    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addImage(Image $image)
     {
-        $this->images->add($image);
+        
     }
     public function getCreatedAt() : \DateTime
     {


376) /var/www/src/Entity/Place.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->createdAt;
     }
-    public function getType() : int
+    protected function getType() : int
     {
         return $this->type;
     }


377) /var/www/src/Entity/Place.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->type;
     }
-    public function setType(int $type)
+    protected function setType(int $type)
     {
         $this->type = $type;
     }


378) /var/www/src/Entity/Place.php:94    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return \ArrayAccess|Image[]
      */
-    public function getImages() : iterable
+    protected function getImages() : iterable
     {
         return $this->images;
     }
 }

379) /var/www/src/Entity/Place/Image.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->sendBy = $sendBy;
         $this->place = $place;
         $this->createdAt = new \DateTime();
-        $place->addImage($this);
+        
     }
     public function getId() : ?string
     {


380) /var/www/src/Entity/Place/Image.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->createdAt = new \DateTime();
         $place->addImage($this);
     }
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


381) /var/www/src/Entity/Place/Image.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function getFilepath() : string
+    protected function getFilepath() : string
     {
         return $this->filepath;
     }
 }

382) /var/www/src/Entity/Track.php:139    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->videosYoutube = new ArrayCollection();
         $this->images = new ArrayCollection();
     }
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


383) /var/www/src/Entity/Track.php:144    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function getPointNorthEastLat() : ?float
+    protected function getPointNorthEastLat() : ?float
     {
         return $this->pointNorthEastLat;
     }


384) /var/www/src/Entity/Track.php:149    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->pointNorthEastLat;
     }
-    public function getPointNorthEastLng() : ?float
+    protected function getPointNorthEastLng() : ?float
     {
         return $this->pointNorthEastLng;
     }


385) /var/www/src/Entity/Track.php:154    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->pointNorthEastLng;
     }
-    public function getPointSouthWestLat() : ?float
+    protected function getPointSouthWestLat() : ?float
     {
         return $this->pointSouthWestLat;
     }


386) /var/www/src/Entity/Track.php:159    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->pointSouthWestLat;
     }
-    public function getPointSouthWestLng() : ?float
+    protected function getPointSouthWestLng() : ?float
     {
         return $this->pointSouthWestLng;
     }


387) /var/www/src/Entity/Track.php:167    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return OptimizedPoint[]|ArrayCollection
      */
-    public function getOptimizedPoints()
+    protected function getOptimizedPoints()
     {
         return $this->optimizedPoints;
     }


388) /var/www/src/Entity/Track.php:172    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->optimizedPoints;
     }
-    public function addOptimizedPoint(OptimizedPoint $p)
+    protected function addOptimizedPoint(OptimizedPoint $p)
     {
         $p->setTrack($this);
         $this->optimizedPoints->add($p);


389) /var/www/src/Entity/Track.php:174    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addOptimizedPoint(OptimizedPoint $p)
     {
-        $p->setTrack($this);
+        
         $this->optimizedPoints->add($p);
     }
     public function addOptimizedPoints(iterable $collection)


390) /var/www/src/Entity/Track.php:175    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function addOptimizedPoint(OptimizedPoint $p)
     {
         $p->setTrack($this);
-        $this->optimizedPoints->add($p);
+        
     }
     public function addOptimizedPoints(iterable $collection)
     {


391) /var/www/src/Entity/Track.php:178    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $p->setTrack($this);
         $this->optimizedPoints->add($p);
     }
-    public function addOptimizedPoints(iterable $collection)
+    protected function addOptimizedPoints(iterable $collection)
     {
         foreach ($collection as $point) {
             $this->addOptimizedPoint($point);


392) /var/www/src/Entity/Track.php:180    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function addOptimizedPoints(iterable $collection)
     {
-        foreach ($collection as $point) {
+        foreach (array() as $point) {
             $this->addOptimizedPoint($point);
         }
     }


393) /var/www/src/Entity/Track.php:181    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function addOptimizedPoints(iterable $collection)
     {
         foreach ($collection as $point) {
-            $this->addOptimizedPoint($point);
+            
         }
     }
     public function getType() : int


394) /var/www/src/Entity/Track.php:185    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->addOptimizedPoint($point);
         }
     }
-    public function getType() : int
+    protected function getType() : int
     {
         return $this->type;
     }


395) /var/www/src/Entity/Track.php:190    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->type;
     }
-    public function setType(int $type) : void
+    protected function setType(int $type) : void
     {
         $this->type = $type;
     }


396) /var/www/src/Entity/Track.php:195    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->type = $type;
     }
-    public function getSlug() : ?string
+    protected function getSlug() : ?string
     {
         return $this->slug;
     }


397) /var/www/src/Entity/Track.php:200    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->slug;
     }
-    public function setSlug(?string $slug) : void
+    protected function setSlug(?string $slug) : void
     {
         $this->slug = $slug;
     }


398) /var/www/src/Entity/Track.php:205    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->slug = $slug;
     }
-    public function prepareForRecalculation()
+    protected function prepareForRecalculation()
     {
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;


399) /var/www/src/Entity/Track.php:207    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function prepareForRecalculation()
     {
-        $this->pointNorthEastLat = -999;
+        $this->pointNorthEastLat = -998;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;


400) /var/www/src/Entity/Track.php:207    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function prepareForRecalculation()
     {
-        $this->pointNorthEastLat = -999;
+        $this->pointNorthEastLat = -1000;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;


401) /var/www/src/Entity/Track.php:208    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function prepareForRecalculation()
     {
         $this->pointNorthEastLat = -999;
-        $this->pointNorthEastLng = -999;
+        $this->pointNorthEastLng = -1000;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
         $this->getOptimizedPoints()->clear();


402) /var/www/src/Entity/Track.php:208    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function prepareForRecalculation()
     {
         $this->pointNorthEastLat = -999;
-        $this->pointNorthEastLng = -999;
+        $this->pointNorthEastLng = -998;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
         $this->getOptimizedPoints()->clear();


403) /var/www/src/Entity/Track.php:209    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
-        $this->pointSouthWestLat = 999;
+        $this->pointSouthWestLat = 998;
         $this->pointSouthWestLng = 999;
         $this->getOptimizedPoints()->clear();
     }


404) /var/www/src/Entity/Track.php:209    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
-        $this->pointSouthWestLat = 999;
+        $this->pointSouthWestLat = 1000;
         $this->pointSouthWestLng = 999;
         $this->getOptimizedPoints()->clear();
     }


405) /var/www/src/Entity/Track.php:210    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
-        $this->pointSouthWestLng = 999;
+        $this->pointSouthWestLng = 1000;
         $this->getOptimizedPoints()->clear();
     }
     public function addVersion(Version $version)


406) /var/www/src/Entity/Track.php:210    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
-        $this->pointSouthWestLng = 999;
+        $this->pointSouthWestLng = 998;
         $this->getOptimizedPoints()->clear();
     }
     public function addVersion(Version $version)


407) /var/www/src/Entity/Track.php:212    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
-        $this->getOptimizedPoints()->clear();
+        
     }
     public function addVersion(Version $version)
     {


408) /var/www/src/Entity/Track.php:234    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->versions;
     }
-    public function recalculateEdgesCache()
+    protected function recalculateEdgesCache()
     {
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;


409) /var/www/src/Entity/Track.php:236    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function recalculateEdgesCache()
     {
-        $this->pointNorthEastLat = -999;
+        $this->pointNorthEastLat = -1000;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;


410) /var/www/src/Entity/Track.php:236    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function recalculateEdgesCache()
     {
-        $this->pointNorthEastLat = -999;
+        $this->pointNorthEastLat = -998;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;


411) /var/www/src/Entity/Track.php:237    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function recalculateEdgesCache()
     {
         $this->pointNorthEastLat = -999;
-        $this->pointNorthEastLng = -999;
+        $this->pointNorthEastLng = -1000;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
         foreach ($this->versions->first()->getPoints() as $p) {


412) /var/www/src/Entity/Track.php:237    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function recalculateEdgesCache()
     {
         $this->pointNorthEastLat = -999;
-        $this->pointNorthEastLng = -999;
+        $this->pointNorthEastLng = -998;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
         foreach ($this->versions->first()->getPoints() as $p) {


413) /var/www/src/Entity/Track.php:238    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
-        $this->pointSouthWestLat = 999;
+        $this->pointSouthWestLat = 998;
         $this->pointSouthWestLng = 999;
         foreach ($this->versions->first()->getPoints() as $p) {
             if ($p->getLat() > $this->pointNorthEastLat) {


414) /var/www/src/Entity/Track.php:238    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
-        $this->pointSouthWestLat = 999;
+        $this->pointSouthWestLat = 1000;
         $this->pointSouthWestLng = 999;
         foreach ($this->versions->first()->getPoints() as $p) {
             if ($p->getLat() > $this->pointNorthEastLat) {


415) /var/www/src/Entity/Track.php:239    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
-        $this->pointSouthWestLng = 999;
+        $this->pointSouthWestLng = 998;
         foreach ($this->versions->first()->getPoints() as $p) {
             if ($p->getLat() > $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();


416) /var/www/src/Entity/Track.php:239    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $this->pointNorthEastLat = -999;
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
-        $this->pointSouthWestLng = 999;
+        $this->pointSouthWestLng = 1000;
         foreach ($this->versions->first()->getPoints() as $p) {
             if ($p->getLat() > $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();


417) /var/www/src/Entity/Track.php:241    [M] Foreach_

--- Original
+++ New
@@ @@
         $this->pointNorthEastLng = -999;
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
-        foreach ($this->versions->first()->getPoints() as $p) {
+        foreach (array() as $p) {
             if ($p->getLat() > $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();
             }


418) /var/www/src/Entity/Track.php:242    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
         foreach ($this->versions->first()->getPoints() as $p) {
-            if ($p->getLat() > $this->pointNorthEastLat) {
+            if ($p->getLat() <= $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();
             }
             if ($p->getLng() > $this->pointNorthEastLng) {


419) /var/www/src/Entity/Track.php:242    [M] GreaterThan

--- Original
+++ New
@@ @@
         $this->pointSouthWestLat = 999;
         $this->pointSouthWestLng = 999;
         foreach ($this->versions->first()->getPoints() as $p) {
-            if ($p->getLat() > $this->pointNorthEastLat) {
+            if ($p->getLat() >= $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();
             }
             if ($p->getLng() > $this->pointNorthEastLng) {


420) /var/www/src/Entity/Track.php:246    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
             if ($p->getLat() > $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();
             }
-            if ($p->getLng() > $this->pointNorthEastLng) {
+            if ($p->getLng() <= $this->pointNorthEastLng) {
                 $this->pointNorthEastLng = $p->getLng();
             }
             if ($p->getLat() < $this->pointSouthWestLat) {


421) /var/www/src/Entity/Track.php:246    [M] GreaterThan

--- Original
+++ New
@@ @@
             if ($p->getLat() > $this->pointNorthEastLat) {
                 $this->pointNorthEastLat = $p->getLat();
             }
-            if ($p->getLng() > $this->pointNorthEastLng) {
+            if ($p->getLng() >= $this->pointNorthEastLng) {
                 $this->pointNorthEastLng = $p->getLng();
             }
             if ($p->getLat() < $this->pointSouthWestLat) {


422) /var/www/src/Entity/Track.php:250    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             if ($p->getLng() > $this->pointNorthEastLng) {
                 $this->pointNorthEastLng = $p->getLng();
             }
-            if ($p->getLat() < $this->pointSouthWestLat) {
+            if ($p->getLat() >= $this->pointSouthWestLat) {
                 $this->pointSouthWestLat = $p->getLat();
             }
             if ($p->getLng() < $this->pointSouthWestLng) {


423) /var/www/src/Entity/Track.php:250    [M] LessThan

--- Original
+++ New
@@ @@
             if ($p->getLng() > $this->pointNorthEastLng) {
                 $this->pointNorthEastLng = $p->getLng();
             }
-            if ($p->getLat() < $this->pointSouthWestLat) {
+            if ($p->getLat() <= $this->pointSouthWestLat) {
                 $this->pointSouthWestLat = $p->getLat();
             }
             if ($p->getLng() < $this->pointSouthWestLng) {


424) /var/www/src/Entity/Track.php:254    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             if ($p->getLat() < $this->pointSouthWestLat) {
                 $this->pointSouthWestLat = $p->getLat();
             }
-            if ($p->getLng() < $this->pointSouthWestLng) {
+            if ($p->getLng() >= $this->pointSouthWestLng) {
                 $this->pointSouthWestLng = $p->getLng();
             }
         }


425) /var/www/src/Entity/Track.php:254    [M] LessThan

--- Original
+++ New
@@ @@
             if ($p->getLat() < $this->pointSouthWestLat) {
                 $this->pointSouthWestLat = $p->getLat();
             }
-            if ($p->getLng() < $this->pointSouthWestLng) {
+            if ($p->getLng() <= $this->pointSouthWestLng) {
                 $this->pointSouthWestLng = $p->getLng();
             }
         }


426) /var/www/src/Entity/Track.php:273    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->uphills->add($track);
     }
-    public function removeUphill(Track $track)
+    protected function removeUphill(Track $track)
     {
         $this->uphills->removeElement($track);
     }


427) /var/www/src/Entity/Track.php:275    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function removeUphill(Track $track)
     {
-        $this->uphills->removeElement($track);
+        
     }
     public function addDownhill(Track $track)
     {


428) /var/www/src/Entity/Track.php:283    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->downhills->add($track);
     }
-    public function removeDownhill(Track $track)
+    protected function removeDownhill(Track $track)
     {
         $this->downhills->removeElement($track);
     }


429) /var/www/src/Entity/Track.php:285    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function removeDownhill(Track $track)
     {
-        $this->downhills->removeElement($track);
+        
     }
     /**
      * @return Track[]


430) /var/www/src/Entity/Track.php:346    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $versions;
     }
-    public function getSlugOrId() : string
+    protected function getSlugOrId() : string
     {
         if ($this->getSlug()) {
             return $this->getSlug();


431) /var/www/src/Entity/Track.php:355    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->getId();
     }
-    public function getVisibility() : int
+    protected function getVisibility() : int
     {
         return $this->visibility;
     }


432) /var/www/src/Entity/Track.php:360    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->visibility;
     }
-    public function setVisibility(int $visibility) : void
+    protected function setVisibility(int $visibility) : void
     {
         $this->visibility = $visibility;
     }


433) /var/www/src/Entity/Track.php:368    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Youtube[]|iterable
      */
-    public function getVideosYoutube() : iterable
+    protected function getVideosYoutube() : iterable
     {
         return $this->videosYoutube;
     }


434) /var/www/src/Entity/Track.php:373    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->videosYoutube;
     }
-    public function setVideosYoutube(iterable $videos)
+    protected function setVideosYoutube(iterable $videos)
     {
         $this->videosYoutube->clear();
         foreach ($videos as $video) {


435) /var/www/src/Entity/Track.php:375    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setVideosYoutube(iterable $videos)
     {
-        $this->videosYoutube->clear();
+        
         foreach ($videos as $video) {
             $this->addVideoYoutube($video);
         }


436) /var/www/src/Entity/Track.php:377    [M] Foreach_

--- Original
+++ New
@@ @@
     public function setVideosYoutube(iterable $videos)
     {
         $this->videosYoutube->clear();
-        foreach ($videos as $video) {
+        foreach (array() as $video) {
             $this->addVideoYoutube($video);
         }
     }


437) /var/www/src/Entity/Track.php:378    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->videosYoutube->clear();
         foreach ($videos as $video) {
-            $this->addVideoYoutube($video);
+            
         }
     }
     public function addVideoYoutube(Youtube $video)


438) /var/www/src/Entity/Track.php:382    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->addVideoYoutube($video);
         }
     }
-    public function addVideoYoutube(Youtube $video)
+    protected function addVideoYoutube(Youtube $video)
     {
         $video->setTrack($this);
         $this->videosYoutube->add($video);


439) /var/www/src/Entity/Track.php:384    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addVideoYoutube(Youtube $video)
     {
-        $video->setTrack($this);
+        
         $this->videosYoutube->add($video);
     }
     public function getCreatedAt() : DateTime


440) /var/www/src/Entity/Track.php:385    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function addVideoYoutube(Youtube $video)
     {
         $video->setTrack($this);
-        $this->videosYoutube->add($video);
+        
     }
     public function getCreatedAt() : DateTime
     {


441) /var/www/src/Entity/Track.php:396    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Image[]|ArrayCollection
      */
-    public function getImages()
+    protected function getImages()
     {
         return $this->images;
     }


442) /var/www/src/Entity/Track/Image.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->createdAt = new \DateTime();
         $track->addImage($this);
     }
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


443) /var/www/src/Entity/Track/Image.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->filepath;
     }
-    public function getTrack() : Track
+    protected function getTrack() : Track
     {
         return $this->track;
     }
 }

444) /var/www/src/Entity/Track/OptimizedPoint.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param mixed $track
      */
-    public function setTrack($track) : void
+    protected function setTrack($track) : void
     {
         $this->track = $track;
     }


445) /var/www/src/Entity/Track/OptimizedPoint.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return mixed
      */
-    public function getLat()
+    protected function getLat()
     {
         return $this->lat;
     }


446) /var/www/src/Entity/Track/OptimizedPoint.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return mixed
      */
-    public function getLng()
+    protected function getLng()
     {
         return $this->lng;
     }


447) /var/www/src/Entity/Track/OptimizedPoint.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->lng;
     }
-    public function getVersionIndex() : int
+    protected function getVersionIndex() : int
     {
         return $this->versionIndex;
     }


448) /var/www/src/Entity/Track/OptimizedPoint.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->versionIndex;
     }
-    public function setVersionIndex(int $versionIndex) : void
+    protected function setVersionIndex(int $versionIndex) : void
     {
         $this->versionIndex = $versionIndex;
     }
 }

449) /var/www/src/Entity/Track/Slug.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->track = $track;
         $this->slug = $slug;
     }
-    public function getTrack() : Track
+    protected function getTrack() : Track
     {
         return $this->track;
     }
 }

450) /var/www/src/Entity/Track/Version.php:84    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->wayPoints = new ArrayCollection();
         $this->ratings = new ArrayCollection();
     }
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


451) /var/www/src/Entity/Track/Version.php:94    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->track = $track;
     }
-    public function getTrack() : ?Track
+    protected function getTrack() : ?Track
     {
         return $this->track;
     }


452) /var/www/src/Entity/Track/Version.php:113    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $p->setVersion($this);
         $this->points->add($p);
     }
-    public function addWayPoint(WayPoint $wp)
+    protected function addWayPoint(WayPoint $wp)
     {
         $wp->setVersion($this);
         $this->wayPoints->add($wp);


453) /var/www/src/Entity/Track/Version.php:115    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addWayPoint(WayPoint $wp)
     {
-        $wp->setVersion($this);
+        
         $this->wayPoints->add($wp);
     }
     /**


454) /var/www/src/Entity/Track/Version.php:116    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function addWayPoint(WayPoint $wp)
     {
         $wp->setVersion($this);
-        $this->wayPoints->add($wp);
+        
     }
     /**
      * @return WayPoint[]|ArrayCollection


455) /var/www/src/Entity/Track/Version.php:127    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->wayPoints;
     }
-    public function getFile() : ?TrackFile
+    protected function getFile() : ?TrackFile
     {
         return $this->file;
     }


456) /var/www/src/Entity/Track/Version.php:132    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->file;
     }
-    public function setFile(TrackFile $file) : void
+    protected function setFile(TrackFile $file) : void
     {
         $this->file = $file;
     }


457) /var/www/src/Entity/Track/Version.php:160    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->negativeElevation = $negativeElevation;
     }
-    public function getRatings()
+    protected function getRatings()
     {
         return $this->ratings;
     }


458) /var/www/src/Entity/Track/Version.php:170    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * @return int
      */
-    public function getVotes() : int
+    protected function getVotes() : int
     {
         return $this->ratings->count();
     }


459) /var/www/src/Entity/Track/Version.php:179    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * Get version difficulty
      * @return string
      */
-    public function getDifficulty() : ?string
+    protected function getDifficulty() : ?string
     {
         return $this->difficulty;
     }


460) /var/www/src/Entity/Track/Version.php:189    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * @param $difficulty
      */
-    public function setDifficulty(string $difficulty = null) : void
+    protected function setDifficulty(string $difficulty = null) : void
     {
         $this->difficulty = $difficulty;
     }
 }

461) /var/www/src/Entity/Track/VersionRating.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return string|null
      */
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


462) /var/www/src/Entity/Track/VersionRating.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Version|null
      */
-    public function getVersion()
+    protected function getVersion()
     {
         return $this->version;
     }


463) /var/www/src/Entity/Track/VersionRating.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param Version $version
      */
-    public function setVersion(Version $version) : void
+    protected function setVersion(Version $version) : void
     {
         $this->version = $version;
     }


464) /var/www/src/Entity/Track/VersionRating.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return User
      */
-    public function getUser()
+    protected function getUser()
     {
         return $this->user;
     }


465) /var/www/src/Entity/Track/VersionRating.php:87    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param User $user
      */
-    public function setUser(User $user) : void
+    protected function setUser(User $user) : void
     {
         $this->user = $user;
     }


466) /var/www/src/Entity/Track/VersionRating.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return int
      */
-    public function getRating() : int
+    protected function getRating() : int
     {
         return $this->rating;
     }


467) /var/www/src/Entity/Track/VersionRating.php:103    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param int $rating
      */
-    public function setRating(int $rating)
+    protected function setRating(int $rating)
     {
         $this->rating = $rating;
     }
 }

468) /var/www/src/Entity/Track/WayPoint.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->lat = $lat;
         $this->lng = $lng;
     }
-    public function getId() : ?string
+    protected function getId() : ?string
     {
         return $this->id;
     }


469) /var/www/src/Entity/Track/WayPoint.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function getVersion() : ?Version
+    protected function getVersion() : ?Version
     {
         return $this->version;
     }


470) /var/www/src/Entity/Track/WayPoint.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->version;
     }
-    public function setVersion(Version $version)
+    protected function setVersion(Version $version)
     {
         $this->version = $version;
     }


471) /var/www/src/Entity/Track/WayPoint.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->version = $version;
     }
-    public function getName() : ?string
+    protected function getName() : ?string
     {
         return $this->name;
     }


472) /var/www/src/Entity/Track/WayPoint.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->name;
     }
-    public function setName(string $name = null)
+    protected function setName(string $name = null)
     {
         $this->name = $name;
     }
 }

473) /var/www/src/Entity/User/User.php:50    [M] PublicVisibility

--- Original
+++ New
@@ @@
         parent::__construct();
         $this->ratings = new ArrayCollection();
     }
-    public function getFacebookId() : ?string
+    protected function getFacebookId() : ?string
     {
         return $this->facebookId;
     }


474) /var/www/src/Entity/User/User.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param string|null $facebookId
      */
-    public function setFacebookId($facebookId) : void
+    protected function setFacebookId($facebookId) : void
     {
         $this->facebookId = $facebookId;
     }


475) /var/www/src/Entity/User/User.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->facebookId = $facebookId;
     }
-    public function isAcceptedTerms()
+    protected function isAcceptedTerms()
     {
         if ($this->termsAccepted === null) {
             return false;


476) /var/www/src/Entity/User/User.php:65    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function isAcceptedTerms()
     {
-        if ($this->termsAccepted === null) {
+        if ($this->termsAccepted !== null) {
             return false;
         }
         return true;


477) /var/www/src/Entity/User/User.php:66    [M] FalseValue

--- Original
+++ New
@@ @@
     public function isAcceptedTerms()
     {
         if ($this->termsAccepted === null) {
-            return false;
+            return true;
         }
         return true;
     }


478) /var/www/src/Entity/User/User.php:69    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($this->termsAccepted === null) {
             return false;
         }
-        return true;
+        return false;
     }
     public function acceptTerms()
     {


479) /var/www/src/Entity/User/User.php:72    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return true;
     }
-    public function acceptTerms()
+    protected function acceptTerms()
     {
         $this->termsAccepted = new \DateTime();
     }


480) /var/www/src/Entity/User/User.php:80    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return ArrayCollection|VersionRating[]
      */
-    public function getRatings()
+    protected function getRatings()
     {
         return $this->ratings;
     }
 }

481) /var/www/src/Entity/Video/Youtube.php:36    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->link = $link;
     }
-    public function getLink() : string
+    protected function getLink() : string
     {
         return $this->link;
     }


482) /var/www/src/Entity/Video/Youtube.php:41    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->link;
     }
-    public function setTrack(Track $track)
+    protected function setTrack(Track $track)
     {
         $this->track = $track;
     }
 }

483) /var/www/src/EntityTraits/NameTrait.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this->nameEn;
     }
-    public function getNameEn() : ?string
+    protected function getNameEn() : ?string
     {
         return $this->nameEn;
     }


484) /var/www/src/EntityTraits/NameTrait.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->nameEn;
     }
-    public function getNameBg() : ?string
+    protected function getNameBg() : ?string
     {
         return $this->nameBg;
     }


485) /var/www/src/EntityTraits/SendByTrait.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @ORM\ManyToOne(targetEntity="App\Entity\User\User")
      */
     private $sendBy;
-    public function getSendBy() : User
+    protected function getSendBy() : User
     {
         return $this->sendBy;
     }
 }

486) /var/www/src/Event/Listener/User/Terms.php:18    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->tokenStorage = $tokenStorage;
     }
-    public function onKernelRequest(GetResponseEvent $event)
+    protected function onKernelRequest(GetResponseEvent $event)
     {
         if (!$event->isMasterRequest()) {
             return;


487) /var/www/src/Event/Listener/User/Terms.php:20    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function onKernelRequest(GetResponseEvent $event)
     {
-        if (!$event->isMasterRequest()) {
+        if ($event->isMasterRequest()) {
             return;
         }
         $token = $this->tokenStorage->getToken();


488) /var/www/src/Event/Listener/User/Terms.php:26    [M] LogicalNot

--- Original
+++ New
@@ @@
             return;
         }
         $token = $this->tokenStorage->getToken();
-        if (!$token) {
+        if ($token) {
             return;
         }
         $user = $this->tokenStorage->getToken()->getUser();


489) /var/www/src/Event/Listener/User/Terms.php:31    [M] LogicalNot

--- Original
+++ New
@@ @@
             return;
         }
         $user = $this->tokenStorage->getToken()->getUser();
-        if (!$user instanceof User) {
+        if ($user instanceof User) {
             return;
         }
         if ($user->isAcceptedTerms()) {


490) /var/www/src/Event/Listener/User/Terms.php:39    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             // terms are accepted, continue with the page loading
             return;
         }
-        $allowedUrls = ['/user/terms', '/privacy-policy', '/terms-of-service'];
+        $allowedUrls = ['/privacy-policy', '/terms-of-service'];
         $urlAllowed = false;
         $pathInfo = $event->getRequest()->getPathInfo();
         foreach ($allowedUrls as $url) {


491) /var/www/src/Event/Listener/User/Terms.php:45    [M] FalseValue

--- Original
+++ New
@@ @@
             return;
         }
         $allowedUrls = ['/user/terms', '/privacy-policy', '/terms-of-service'];
-        $urlAllowed = false;
+        $urlAllowed = true;
         $pathInfo = $event->getRequest()->getPathInfo();
         foreach ($allowedUrls as $url) {
             if (strpos($pathInfo, $url) === 3) {


492) /var/www/src/Event/Listener/User/Terms.php:47    [M] Foreach_

--- Original
+++ New
@@ @@
         $allowedUrls = ['/user/terms', '/privacy-policy', '/terms-of-service'];
         $urlAllowed = false;
         $pathInfo = $event->getRequest()->getPathInfo();
-        foreach ($allowedUrls as $url) {
+        foreach (array() as $url) {
             if (strpos($pathInfo, $url) === 3) {
                 $urlAllowed = true;
                 break;


493) /var/www/src/Event/Listener/User/Terms.php:48    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $urlAllowed = false;
         $pathInfo = $event->getRequest()->getPathInfo();
         foreach ($allowedUrls as $url) {
-            if (strpos($pathInfo, $url) === 3) {
+            if (strpos($pathInfo, $url) === 4) {
                 $urlAllowed = true;
                 break;
             }


494) /var/www/src/Event/Listener/User/Terms.php:48    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $urlAllowed = false;
         $pathInfo = $event->getRequest()->getPathInfo();
         foreach ($allowedUrls as $url) {
-            if (strpos($pathInfo, $url) === 3) {
+            if (strpos($pathInfo, $url) === 2) {
                 $urlAllowed = true;
                 break;
             }


495) /var/www/src/Event/Listener/User/Terms.php:48    [M] Identical

--- Original
+++ New
@@ @@
         $urlAllowed = false;
         $pathInfo = $event->getRequest()->getPathInfo();
         foreach ($allowedUrls as $url) {
-            if (strpos($pathInfo, $url) === 3) {
+            if (strpos($pathInfo, $url) !== 3) {
                 $urlAllowed = true;
                 break;
             }


496) /var/www/src/Event/Listener/User/Terms.php:49    [M] TrueValue

--- Original
+++ New
@@ @@
         $pathInfo = $event->getRequest()->getPathInfo();
         foreach ($allowedUrls as $url) {
             if (strpos($pathInfo, $url) === 3) {
-                $urlAllowed = true;
+                $urlAllowed = false;
                 break;
             }
         }


497) /var/www/src/Event/Listener/User/Terms.php:50    [M] Break_

--- Original
+++ New
@@ @@
         foreach ($allowedUrls as $url) {
             if (strpos($pathInfo, $url) === 3) {
                 $urlAllowed = true;
-                break;
+                continue;
             }
         }
         if ($urlAllowed === false) {


498) /var/www/src/Event/Listener/User/Terms.php:54    [M] FalseValue

--- Original
+++ New
@@ @@
                 break;
             }
         }
-        if ($urlAllowed === false) {
+        if ($urlAllowed === true) {
             $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 302);
             $event->setResponse($response);
             $event->stopPropagation();


499) /var/www/src/Event/Listener/User/Terms.php:54    [M] Identical

--- Original
+++ New
@@ @@
                 break;
             }
         }
-        if ($urlAllowed === false) {
+        if ($urlAllowed !== false) {
             $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 302);
             $event->setResponse($response);
             $event->stopPropagation();


500) /var/www/src/Event/Listener/User/Terms.php:55    [M] DecrementInteger

--- Original
+++ New
@@ @@
             }
         }
         if ($urlAllowed === false) {
-            $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 302);
+            $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 301);
             $event->setResponse($response);
             $event->stopPropagation();
         }
     }

501) /var/www/src/Event/Listener/User/Terms.php:55    [M] IncrementInteger

--- Original
+++ New
@@ @@
             }
         }
         if ($urlAllowed === false) {
-            $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 302);
+            $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 303);
             $event->setResponse($response);
             $event->stopPropagation();
         }
     }

502) /var/www/src/Event/Listener/User/Terms.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($urlAllowed === false) {
             $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 302);
-            $event->setResponse($response);
+            
             $event->stopPropagation();
         }
     }
 }

503) /var/www/src/Event/Listener/User/Terms.php:57    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($urlAllowed === false) {
             $response = new \Symfony\Component\HttpFoundation\RedirectResponse('/en/user/terms', 302);
             $event->setResponse($response);
-            $event->stopPropagation();
+            
         }
     }
 }


504) /var/www/src/Form/Type/Place.php:16    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
 {
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
+        
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];


505) /var/www/src/Form/Type/Place.php:19    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
 {
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
+        $builder->add('nameEn', TextType::class, ['label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];


506) /var/www/src/Form/Type/Place.php:20    [M] FalseValue

--- Original
+++ New
@@ @@
 {
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
+        $builder->add('nameEn', TextType::class, ['required' => true, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];


507) /var/www/src/Form/Type/Place.php:25    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
-        $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
+        
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);


508) /var/www/src/Form/Type/Place.php:28    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
-        $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
+        $builder->add('nameBg', TextType::class, ['label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);


509) /var/www/src/Form/Type/Place.php:29    [M] FalseValue

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
-        $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
+        $builder->add('nameBg', TextType::class, ['required' => true, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);


510) /var/www/src/Form/Type/Place.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
-        $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
+        
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }

511) /var/www/src/Form/Type/Place.php:37    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
-        $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
+        $builder->add('type', ChoiceType::class, []);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }

512) /var/www/src/Form/Type/Place.php:38    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
-        $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
+        $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }

513) /var/www/src/Form/Type/Place.php:45    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
-        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
+        $coordinatesConstraints = [];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }

514) /var/www/src/Form/Type/Place.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
-        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
+        $coordinatesConstraints = [new Range(['max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }

515) /var/www/src/Form/Type/Place.php:47    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
-        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
+        $coordinatesConstraints = [new Range(['min' => -181, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }

516) /var/www/src/Form/Type/Place.php:47    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
-        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
+        $coordinatesConstraints = [new Range(['min' => -179, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }

517) /var/www/src/Form/Type/Place.php:48    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
-        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
+        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 181])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }

518) /var/www/src/Form/Type/Place.php:48    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
-        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
+        $coordinatesConstraints = [new Range(['min' => -180, 'max' => 179])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }

519) /var/www/src/Form/Type/Place.php:52    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
-        $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
+        
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


520) /var/www/src/Form/Type/Place.php:55    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
-        $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
+        $builder->add('lat', NumberType::class, ['label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


521) /var/www/src/Form/Type/Place.php:56    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
-        $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
+        $builder->add('lat', NumberType::class, ['scale' => 9, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


522) /var/www/src/Form/Type/Place.php:56    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
-        $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
+        $builder->add('lat', NumberType::class, ['scale' => 7, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
         $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


523) /var/www/src/Form/Type/Place.php:62    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
-        $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
+        
     }
 }


524) /var/www/src/Form/Type/Place.php:65    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
-        $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
+        $builder->add('lng', NumberType::class, ['label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


525) /var/www/src/Form/Type/Place.php:66    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
-        $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
+        $builder->add('lng', NumberType::class, ['scale' => 7, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


526) /var/www/src/Form/Type/Place.php:66    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $builder->add('type', ChoiceType::class, ['choices' => ['form.place.type.generic' => \App\Entity\Place::TYPE_GENERIC, 'form.place.type.drinking_fountain' => \App\Entity\Place::TYPE_DRINKING_FOUNTAIN]]);
         $coordinatesConstraints = [new Range(['min' => -180, 'max' => 180])];
         $builder->add('lat', NumberType::class, ['scale' => 8, 'label' => 'Latitude', 'constraints' => $coordinatesConstraints]);
-        $builder->add('lng', NumberType::class, ['scale' => 8, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
+        $builder->add('lng', NumberType::class, ['scale' => 9, 'label' => 'Longitude', 'constraints' => $coordinatesConstraints]);
     }
 }


527) /var/www/src/Form/Type/Track.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (isset($options['data'])) {
             $track = $options['data'];
         }
-        $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
+        
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);


528) /var/www/src/Form/Type/Track.php:27    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if (isset($options['data'])) {
             $track = $options['data'];
         }
-        $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
+        $builder->add('nameEn', TextType::class, ['label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);


529) /var/www/src/Form/Type/Track.php:28    [M] FalseValue

--- Original
+++ New
@@ @@
         if (isset($options['data'])) {
             $track = $options['data'];
         }
-        $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
+        $builder->add('nameEn', TextType::class, ['required' => true, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);


530) /var/www/src/Form/Type/Track.php:33    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $track = $options['data'];
         }
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
-        $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
+        
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {


531) /var/www/src/Form/Type/Track.php:36    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $track = $options['data'];
         }
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
-        $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
+        $builder->add('nameBg', TextType::class, ['label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {


532) /var/www/src/Form/Type/Track.php:37    [M] FalseValue

--- Original
+++ New
@@ @@
             $track = $options['data'];
         }
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
-        $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
+        $builder->add('nameBg', TextType::class, ['required' => true, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {


533) /var/www/src/Form/Type/Track.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
-        $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
+        
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);


534) /var/www/src/Form/Type/Track.php:45    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
-        $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
+        $builder->add('type', ChoiceType::class, []);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);


535) /var/www/src/Form/Type/Track.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
-        $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
+        $builder->add('type', ChoiceType::class, ['choices' => ['hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);


536) /var/www/src/Form/Type/Track.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
-        $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
+        
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }


537) /var/www/src/Form/Type/Track.php:56    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
-        $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
+        $builder->add('visibility', ChoiceType::class, []);
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }


538) /var/www/src/Form/Type/Track.php:57    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('nameEn', TextType::class, ['required' => false, 'label' => 'Name in English']);
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
-        $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
+        $builder->add('visibility', ChoiceType::class, ['choices' => ['unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }


539) /var/www/src/Form/Type/Track.php:64    [M] LogicalOr

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
-        if ($track == null || $track->getId() == null) {
+        if ($track == null && $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);


540) /var/www/src/Form/Type/Track.php:64    [M] Equal

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
-        if ($track == null || $track->getId() == null) {
+        if ($track != null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);


541) /var/www/src/Form/Type/Track.php:64    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
-        if ($track == null || $track->getId() == null) {
+        if (($track = null) || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);


542) /var/www/src/Form/Type/Track.php:64    [M] Equal

--- Original
+++ New
@@ @@
         $builder->add('nameBg', TextType::class, ['required' => false, 'label' => 'Name in Bulgarian']);
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
-        if ($track == null || $track->getId() == null) {
+        if ($track == null || $track->getId() != null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);


543) /var/www/src/Form/Type/Track.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {
-            $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
+            
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);


544) /var/www/src/Form/Type/Track.php:68    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $builder->add('type', ChoiceType::class, ['choices' => ['cycling' => \App\Entity\Track::TYPE_CYCLING, 'hiking' => \App\Entity\Track::TYPE_HIKING]]);
         $builder->add('visibility', ChoiceType::class, ['choices' => ['public' => \App\Entity\Track::VISIBILITY_PUBLIC, 'unlisted' => \App\Entity\Track::VISIBILITY_UNLISTED]]);
         if ($track == null || $track->getId() == null) {
-            $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
+            $builder->add('file', FileType::class, []);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);


545) /var/www/src/Form/Type/Track.php:74    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
-        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
+        
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }


546) /var/www/src/Form/Type/Track.php:77    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
-        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
+        $builder->add('videosYoutube', CollectionType::class, ['allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }


547) /var/www/src/Form/Type/Track.php:78    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
-        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
+        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => false, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }


548) /var/www/src/Form/Type/Track.php:79    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
-        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
+        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => false, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }


549) /var/www/src/Form/Type/Track.php:80    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($track == null || $track->getId() == null) {
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
-        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
+        $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => false, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }


550) /var/www/src/Form/Type/Track.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
-        $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
+        
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
     public function configureOptions(OptionsResolver $resolver)


551) /var/www/src/Form/Type/Track.php:88    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
-        $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
+        $builder->add('slug', TextType::class, ['label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
     public function configureOptions(OptionsResolver $resolver)


552) /var/www/src/Form/Type/Track.php:89    [M] FalseValue

--- Original
+++ New
@@ @@
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
-        $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
+        $builder->add('slug', TextType::class, ['required' => true, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
     public function configureOptions(OptionsResolver $resolver)


553) /var/www/src/Form/Type/Track.php:91    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $builder->add('file', FileType::class, ['label' => 'Track file. Supported formats: .gpx']);
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
-        $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
+        $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['message' => 'Should contains only letters, numbers, dash and underscore'])]);
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
     public function configureOptions(OptionsResolver $resolver)


554) /var/www/src/Form/Type/Track.php:98    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
-        $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
+        
     }
     public function configureOptions(OptionsResolver $resolver)
     {


555) /var/www/src/Form/Type/Track.php:101    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
-        $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
+        $builder->add('difficulty', ChoiceType::class, []);
     }
     public function configureOptions(OptionsResolver $resolver)
     {


556) /var/www/src/Form/Type/Track.php:102    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $builder->add('videosYoutube', CollectionType::class, ['allow_add' => true, 'allow_delete' => true, 'by_reference' => true, 'entry_type' => YoutubeType::class]);
         $builder->add('slug', TextType::class, ['required' => false, 'label' => 'Short link', 'constraints' => new Regex(['pattern' => '/^[a-zA-Z0-9_\\-]+$/', 'message' => 'Should contains only letters, numbers, dash and underscore'])]);
-        $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
+        $builder->add('difficulty', ChoiceType::class, ['choices' => ['White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
     public function configureOptions(OptionsResolver $resolver)
     {


557) /var/www/src/Form/Type/Track.php:116    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(['mapped' => false]);
+        $resolver->setDefaults([]);
     }
 }


558) /var/www/src/Form/Type/Track.php:116    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(['mapped' => false]);
+        
     }
 }


559) /var/www/src/Form/Type/Track.php:117    [M] FalseValue

--- Original
+++ New
@@ @@
     }
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(['mapped' => false]);
+        $resolver->setDefaults(['mapped' => true]);
     }
 }


560) /var/www/src/Form/Type/Track/Video/YoutubeType.php:16    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('link', TextType::class, ['required' => false, 'attr' => ['placeholder' => 'https://www.youtube.com/watch?v=EqYgAX6D43Q']]);
+        
     }
 }


561) /var/www/src/Form/Type/Track/Video/YoutubeType.php:19    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('link', TextType::class, ['required' => false, 'attr' => ['placeholder' => 'https://www.youtube.com/watch?v=EqYgAX6D43Q']]);
+        $builder->add('link', TextType::class, ['attr' => ['placeholder' => 'https://www.youtube.com/watch?v=EqYgAX6D43Q']]);
     }
 }


562) /var/www/src/Form/Type/Track/Video/YoutubeType.php:20    [M] FalseValue

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('link', TextType::class, ['required' => false, 'attr' => ['placeholder' => 'https://www.youtube.com/watch?v=EqYgAX6D43Q']]);
+        $builder->add('link', TextType::class, ['required' => true, 'attr' => ['placeholder' => 'https://www.youtube.com/watch?v=EqYgAX6D43Q']]);
     }
 }


563) /var/www/src/Form/Type/Track/Video/YoutubeType.php:21    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('link', TextType::class, ['required' => false, 'attr' => ['placeholder' => 'https://www.youtube.com/watch?v=EqYgAX6D43Q']]);
+        $builder->add('link', TextType::class, ['required' => false, 'attr' => []]);
     }
 }


564) /var/www/src/Form/Type/TrackVersion.php:17    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('file', FileType::class);
+        
         $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
 }


565) /var/www/src/Form/Type/TrackVersion.php:19    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('file', FileType::class);
-        $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
+        
     }
 }


566) /var/www/src/Form/Type/TrackVersion.php:22    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('file', FileType::class);
-        $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
+        $builder->add('difficulty', ChoiceType::class, []);
     }
 }


567) /var/www/src/Form/Type/TrackVersion.php:23    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('file', FileType::class);
-        $builder->add('difficulty', ChoiceType::class, ['choices' => ['' => null, 'White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
+        $builder->add('difficulty', ChoiceType::class, ['choices' => ['White' => \App\Type\DifficultyType::ENUM_WHITE, 'Green' => \App\Type\DifficultyType::ENUM_GREEN, 'Blue' => \App\Type\DifficultyType::ENUM_BLUE, 'Black' => \App\Type\DifficultyType::ENUM_BLACK, 'Double Black' => \App\Type\DifficultyType::ENUM_DOUBLE_BLACK]]);
     }
 }


568) /var/www/src/Form/Type/User/Terms.php:18    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
+        
         $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
     }
 }


569) /var/www/src/Form/Type/User/Terms.php:21    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
+        $builder->add('agreeTerms', CheckboxType::class, ['label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
         $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
     }
 }


570) /var/www/src/Form/Type/User/Terms.php:22    [M] TrueValue

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
+        $builder->add('agreeTerms', CheckboxType::class, ['required' => false, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
         $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
     }
 }


571) /var/www/src/Form/Type/User/Terms.php:24    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
-        $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
+        $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new IsTrue()]]);
         $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
     }
 }


572) /var/www/src/Form/Type/User/Terms.php:31    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
-        $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
+        
     }
 }


573) /var/www/src/Form/Type/User/Terms.php:34    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
-        $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
+        $builder->add('agreePrivacy', CheckboxType::class, ['label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
     }
 }


574) /var/www/src/Form/Type/User/Terms.php:35    [M] TrueValue

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
-        $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
+        $builder->add('agreePrivacy', CheckboxType::class, ['required' => false, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
     }
 }


575) /var/www/src/Form/Type/User/Terms.php:37    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder->add('agreeTerms', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Terms of the Service', 'constraints' => [new Required(), new IsTrue()]]);
-        $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new Required(), new IsTrue()]]);
+        $builder->add('agreePrivacy', CheckboxType::class, ['required' => true, 'label' => 'I agree with the Privacy Policy', 'constraints' => [new IsTrue()]]);
     }
 }


576) /var/www/src/Image/ImageEdit.php:9    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Symfony\Component\Filesystem\Filesystem;
 class ImageEdit
 {
-    public function resize(string $input, string $output, int $maxW, int $maxH)
+    protected function resize(string $input, string $output, int $maxW, int $maxH)
     {
         $image = new \Imagick($input);
         $image->setImageOrientation($image->getImageOrientation());


577) /var/www/src/Image/ImageEdit.php:12    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function resize(string $input, string $output, int $maxW, int $maxH)
     {
         $image = new \Imagick($input);
-        $image->setImageOrientation($image->getImageOrientation());
+        
         $resizedW = min($image->getImageWidth(), $maxW);
         $resizedH = min($image->getImageHeight(), $maxH);
         $image->adaptiveResizeImage($resizedW, $resizedH, true);


578) /var/www/src/Image/ImageEdit.php:17    [M] TrueValue

--- Original
+++ New
@@ @@
         $image->setImageOrientation($image->getImageOrientation());
         $resizedW = min($image->getImageWidth(), $maxW);
         $resizedH = min($image->getImageHeight(), $maxH);
-        $image->adaptiveResizeImage($resizedW, $resizedH, true);
+        $image->adaptiveResizeImage($resizedW, $resizedH, false);
         $rotateAngle = $this->getRotateAngle($input);
         if ($rotateAngle !== 0) {
             $image->rotateImage('#FFFFFF', $rotateAngle);


579) /var/www/src/Image/ImageEdit.php:17    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $image->setImageOrientation($image->getImageOrientation());
         $resizedW = min($image->getImageWidth(), $maxW);
         $resizedH = min($image->getImageHeight(), $maxH);
-        $image->adaptiveResizeImage($resizedW, $resizedH, true);
+        
         $rotateAngle = $this->getRotateAngle($input);
         if ($rotateAngle !== 0) {
             $image->rotateImage('#FFFFFF', $rotateAngle);


580) /var/www/src/Image/ImageEdit.php:20    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $resizedH = min($image->getImageHeight(), $maxH);
         $image->adaptiveResizeImage($resizedW, $resizedH, true);
         $rotateAngle = $this->getRotateAngle($input);
-        if ($rotateAngle !== 0) {
+        if ($rotateAngle !== -1) {
             $image->rotateImage('#FFFFFF', $rotateAngle);
         }
         $profiles = $image->getImageProfiles("icc", true);


581) /var/www/src/Image/ImageEdit.php:20    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $resizedH = min($image->getImageHeight(), $maxH);
         $image->adaptiveResizeImage($resizedW, $resizedH, true);
         $rotateAngle = $this->getRotateAngle($input);
-        if ($rotateAngle !== 0) {
+        if ($rotateAngle !== 1) {
             $image->rotateImage('#FFFFFF', $rotateAngle);
         }
         $profiles = $image->getImageProfiles("icc", true);


582) /var/www/src/Image/ImageEdit.php:20    [M] NotIdentical

--- Original
+++ New
@@ @@
         $resizedH = min($image->getImageHeight(), $maxH);
         $image->adaptiveResizeImage($resizedW, $resizedH, true);
         $rotateAngle = $this->getRotateAngle($input);
-        if ($rotateAngle !== 0) {
+        if ($rotateAngle === 0) {
             $image->rotateImage('#FFFFFF', $rotateAngle);
         }
         $profiles = $image->getImageProfiles("icc", true);


583) /var/www/src/Image/ImageEdit.php:21    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $image->adaptiveResizeImage($resizedW, $resizedH, true);
         $rotateAngle = $this->getRotateAngle($input);
         if ($rotateAngle !== 0) {
-            $image->rotateImage('#FFFFFF', $rotateAngle);
+            
         }
         $profiles = $image->getImageProfiles("icc", true);
         // clear personal data stored in meta information


584) /var/www/src/Image/ImageEdit.php:24    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($rotateAngle !== 0) {
             $image->rotateImage('#FFFFFF', $rotateAngle);
         }
-        $profiles = $image->getImageProfiles("icc", true);
+        $profiles = $image->getImageProfiles("icc", false);
         // clear personal data stored in meta information
         $image->stripImage();
         // restore icc color profile


585) /var/www/src/Image/ImageEdit.php:27    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $image->rotateImage('#FFFFFF', $rotateAngle);
         }
         $profiles = $image->getImageProfiles("icc", true);
-        // clear personal data stored in meta information
-        $image->stripImage();
+        
         // restore icc color profile
         if (isset($profiles['icc'])) {
             $image->profileImage("icc", $profiles['icc']);

586) /var/www/src/Image/ImageEdit.php:31    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $image->stripImage();
         // restore icc color profile
         if (isset($profiles['icc'])) {
-            $image->profileImage("icc", $profiles['icc']);
+            
         }
         $fs = new Filesystem();
         $fs->dumpFile($output, $image);


587) /var/www/src/Image/ImageEdit.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $image->profileImage("icc", $profiles['icc']);
         }
         $fs = new Filesystem();
-        $fs->dumpFile($output, $image);
+        
     }
     public function getRotateAngle($imagePath) : int
     {


588) /var/www/src/Image/ImageEdit.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $fs = new Filesystem();
         $fs->dumpFile($output, $image);
     }
-    public function getRotateAngle($imagePath) : int
+    protected function getRotateAngle($imagePath) : int
     {
         $exifData = exif_read_data($imagePath);
         if (isset($exifData['Orientation'])) {


589) /var/www/src/Image/ImageEdit.php:44    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $exifData = exif_read_data($imagePath);
         if (isset($exifData['Orientation'])) {
             switch ($exifData['Orientation']) {
-                case 6:
+                case 5:
                     return 90;
                 case 8:
                     return 270;


590) /var/www/src/Image/ImageEdit.php:44    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $exifData = exif_read_data($imagePath);
         if (isset($exifData['Orientation'])) {
             switch ($exifData['Orientation']) {
-                case 6:
+                case 7:
                     return 90;
                 case 8:
                     return 270;


591) /var/www/src/Image/ImageEdit.php:45    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if (isset($exifData['Orientation'])) {
             switch ($exifData['Orientation']) {
                 case 6:
-                    return 90;
+                    return 89;
                 case 8:
                     return 270;
             }


592) /var/www/src/Image/ImageEdit.php:45    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (isset($exifData['Orientation'])) {
             switch ($exifData['Orientation']) {
                 case 6:
-                    return 90;
+                    return 91;
                 case 8:
                     return 270;
             }


593) /var/www/src/Image/ImageEdit.php:45    [M] IntegerNegation

--- Original
+++ New
@@ @@
         if (isset($exifData['Orientation'])) {
             switch ($exifData['Orientation']) {
                 case 6:
-                    return 90;
+                    return -90;
                 case 8:
                     return 270;
             }


594) /var/www/src/Image/ImageEdit.php:46    [M] IncrementInteger

--- Original
+++ New
@@ @@
             switch ($exifData['Orientation']) {
                 case 6:
                     return 90;
-                case 8:
+                case 9:
                     return 270;
             }
         }


595) /var/www/src/Image/ImageEdit.php:46    [M] DecrementInteger

--- Original
+++ New
@@ @@
             switch ($exifData['Orientation']) {
                 case 6:
                     return 90;
-                case 8:
+                case 7:
                     return 270;
             }
         }


596) /var/www/src/Image/ImageEdit.php:47    [M] IntegerNegation

--- Original
+++ New
@@ @@
                 case 6:
                     return 90;
                 case 8:
-                    return 270;
+                    return -270;
             }
         }
         return 0;
     }

597) /var/www/src/Image/ImageEdit.php:47    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 case 6:
                     return 90;
                 case 8:
-                    return 270;
+                    return 271;
             }
         }
         return 0;
     }

598) /var/www/src/Image/ImageEdit.php:47    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 case 6:
                     return 90;
                 case 8:
-                    return 270;
+                    return 269;
             }
         }
         return 0;
     }

599) /var/www/src/Image/ImageEdit.php:51    [M] DecrementInteger

--- Original
+++ New
@@ @@
                     return 270;
             }
         }
-        return 0;
+        return -1;
     }
 }


600) /var/www/src/Image/ImageEdit.php:51    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     return 270;
             }
         }
-        return 0;
+        return 1;
     }
 }


601) /var/www/src/Kernel.php:21    [M] Foreach_

--- Original
+++ New
@@ @@
     public function registerBundles() : iterable
     {
         $contents = (require $this->getProjectDir() . '/config/bundles.php');
-        foreach ($contents as $class => $envs) {
+        foreach (array() as $class => $envs) {
             if ($envs[$this->environment] ?? $envs['all'] ?? false) {
                 (yield new $class());
             }


602) /var/www/src/Kernel.php:22    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $contents = (require $this->getProjectDir() . '/config/bundles.php');
         foreach ($contents as $class => $envs) {
-            if ($envs[$this->environment] ?? $envs['all'] ?? false) {
+            if ($envs[$this->environment] ?? $envs['all'] ?? true) {
                 (yield new $class());
             }
         }


603) /var/www/src/Kernel.php:22    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $contents = (require $this->getProjectDir() . '/config/bundles.php');
         foreach ($contents as $class => $envs) {
-            if ($envs[$this->environment] ?? $envs['all'] ?? false) {
+            if ($envs[$this->environment] ?? false) {
                 (yield new $class());
             }
         }


604) /var/www/src/Kernel.php:22    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $contents = (require $this->getProjectDir() . '/config/bundles.php');
         foreach ($contents as $class => $envs) {
-            if ($envs[$this->environment] ?? $envs['all'] ?? false) {
+            if ($envs['all'] ?? false) {
                 (yield new $class());
             }
         }


605) /var/www/src/Kernel.php:33    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
     {
         return \dirname(__DIR__);
     }
-    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader) : void
+    private function configureContainer(ContainerBuilder $container, LoaderInterface $loader) : void
     {
         $container->addResource(new FileResource($this->getProjectDir() . '/config/bundles.php'));
         $container->setParameter('container.dumper.inline_class_loader', true);


606) /var/www/src/Kernel.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader) : void
     {
-        $container->addResource(new FileResource($this->getProjectDir() . '/config/bundles.php'));
+        
         $container->setParameter('container.dumper.inline_class_loader', true);
         $confDir = $this->getProjectDir() . '/config';
         $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');


607) /var/www/src/Kernel.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader) : void
     {
         $container->addResource(new FileResource($this->getProjectDir() . '/config/bundles.php'));
-        $container->setParameter('container.dumper.inline_class_loader', true);
+        
         $confDir = $this->getProjectDir() . '/config';
         $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{packages}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');


608) /var/www/src/Kernel.php:36    [M] TrueValue

--- Original
+++ New
@@ @@
     protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader) : void
     {
         $container->addResource(new FileResource($this->getProjectDir() . '/config/bundles.php'));
-        $container->setParameter('container.dumper.inline_class_loader', true);
+        $container->setParameter('container.dumper.inline_class_loader', false);
         $confDir = $this->getProjectDir() . '/config';
         $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{packages}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');


609) /var/www/src/Kernel.php:39    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $container->addResource(new FileResource($this->getProjectDir() . '/config/bundles.php'));
         $container->setParameter('container.dumper.inline_class_loader', true);
         $confDir = $this->getProjectDir() . '/config';
-        $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
+        
         $loader->load($confDir . '/{packages}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{services}' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{services}_' . $this->environment . self::CONFIG_EXTS, 'glob');


610) /var/www/src/Kernel.php:40    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $container->setParameter('container.dumper.inline_class_loader', true);
         $confDir = $this->getProjectDir() . '/config';
         $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
-        $loader->load($confDir . '/{packages}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');
+        
         $loader->load($confDir . '/{services}' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{services}_' . $this->environment . self::CONFIG_EXTS, 'glob');
     }


611) /var/www/src/Kernel.php:41    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $confDir = $this->getProjectDir() . '/config';
         $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{packages}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');
-        $loader->load($confDir . '/{services}' . self::CONFIG_EXTS, 'glob');
+        
         $loader->load($confDir . '/{services}_' . $this->environment . self::CONFIG_EXTS, 'glob');
     }
     protected function configureRoutes(RouteCollectionBuilder $routes) : void


612) /var/www/src/Kernel.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $loader->load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{packages}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{services}' . self::CONFIG_EXTS, 'glob');
-        $loader->load($confDir . '/{services}_' . $this->environment . self::CONFIG_EXTS, 'glob');
+        
     }
     protected function configureRoutes(RouteCollectionBuilder $routes) : void
     {


613) /var/www/src/Kernel.php:45    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
         $loader->load($confDir . '/{services}' . self::CONFIG_EXTS, 'glob');
         $loader->load($confDir . '/{services}_' . $this->environment . self::CONFIG_EXTS, 'glob');
     }
-    protected function configureRoutes(RouteCollectionBuilder $routes) : void
+    private function configureRoutes(RouteCollectionBuilder $routes) : void
     {
         $confDir = $this->getProjectDir() . '/config';
         $routes->import($confDir . '/{routes}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, '/', 'glob');


614) /var/www/src/Kernel.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function configureRoutes(RouteCollectionBuilder $routes) : void
     {
         $confDir = $this->getProjectDir() . '/config';
-        $routes->import($confDir . '/{routes}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, '/', 'glob');
+        
         $routes->import($confDir . '/{routes}/*' . self::CONFIG_EXTS, '/', 'glob');
         $routes->import($confDir . '/{routes}' . self::CONFIG_EXTS, '/', 'glob');
     }
 }

615) /var/www/src/Kernel.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $confDir = $this->getProjectDir() . '/config';
         $routes->import($confDir . '/{routes}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, '/', 'glob');
-        $routes->import($confDir . '/{routes}/*' . self::CONFIG_EXTS, '/', 'glob');
+        
         $routes->import($confDir . '/{routes}' . self::CONFIG_EXTS, '/', 'glob');
     }
 }


616) /var/www/src/Kernel.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $confDir = $this->getProjectDir() . '/config';
         $routes->import($confDir . '/{routes}/' . $this->environment . '/**/*' . self::CONFIG_EXTS, '/', 'glob');
         $routes->import($confDir . '/{routes}/*' . self::CONFIG_EXTS, '/', 'glob');
-        $routes->import($confDir . '/{routes}' . self::CONFIG_EXTS, '/', 'glob');
+        
     }
 }


617) /var/www/src/Repository/PlaceRepository.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Filter points by coordinates
      */
-    public function andWhereInCoordinates(QueryBuilder $qb, array $skipPoints, float $neLat, float $swLat, float $neLon, float $swLon) : self
+    protected function andWhereInCoordinates(QueryBuilder $qb, array $skipPoints, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
         $alias = $qb->getRootAliases()[0];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.lat', $neLat), $qb->expr()->gte($alias . '.lat', $swLat), $qb->expr()->lte($alias . '.lng', $neLon), $qb->expr()->gte($alias . '.lng', $swLon)));


618) /var/www/src/Repository/PlaceRepository.php:15    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function andWhereInCoordinates(QueryBuilder $qb, array $skipPoints, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
-        $alias = $qb->getRootAliases()[0];
+        $alias = $qb->getRootAliases()[-1];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.lat', $neLat), $qb->expr()->gte($alias . '.lat', $swLat), $qb->expr()->lte($alias . '.lng', $neLon), $qb->expr()->gte($alias . '.lng', $swLon)));
         if (!empty($skipPoints)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipPoints));


619) /var/www/src/Repository/PlaceRepository.php:15    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     public function andWhereInCoordinates(QueryBuilder $qb, array $skipPoints, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
-        $alias = $qb->getRootAliases()[0];
+        $alias = $qb->getRootAliases()[1];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.lat', $neLat), $qb->expr()->gte($alias . '.lat', $swLat), $qb->expr()->lte($alias . '.lng', $neLon), $qb->expr()->gte($alias . '.lng', $swLon)));
         if (!empty($skipPoints)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipPoints));


620) /var/www/src/Repository/PlaceRepository.php:17    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function andWhereInCoordinates(QueryBuilder $qb, array $skipPoints, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
         $alias = $qb->getRootAliases()[0];
-        $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.lat', $neLat), $qb->expr()->gte($alias . '.lat', $swLat), $qb->expr()->lte($alias . '.lng', $neLon), $qb->expr()->gte($alias . '.lng', $swLon)));
+        
         if (!empty($skipPoints)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipPoints));
         }


621) /var/www/src/Repository/PlaceRepository.php:26    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
         $alias = $qb->getRootAliases()[0];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.lat', $neLat), $qb->expr()->gte($alias . '.lat', $swLat), $qb->expr()->lte($alias . '.lng', $neLon), $qb->expr()->gte($alias . '.lng', $swLon)));
-        if (!empty($skipPoints)) {
+        if (empty($skipPoints)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipPoints));
         }
         return $this;
     }

622) /var/www/src/Repository/PlaceRepository.php:27    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $alias = $qb->getRootAliases()[0];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.lat', $neLat), $qb->expr()->gte($alias . '.lat', $swLat), $qb->expr()->lte($alias . '.lng', $neLon), $qb->expr()->gte($alias . '.lng', $swLon)));
         if (!empty($skipPoints)) {
-            $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipPoints));
+            
         }
         return $this;
     }
 }

623) /var/www/src/Repository/Track/ImageRepository.php:9    [M] PublicVisibility

--- Original
+++ New
@@ @@
 use Doctrine\ORM\EntityRepository;
 class ImageRepository extends EntityRepository
 {
-    public function getLatestImages(int $limit = 10)
+    protected function getLatestImages(int $limit = 10)
     {
         $qb = $this->createQueryBuilder('i');
         $qb->setMaxResults($limit);


624) /var/www/src/Repository/Track/ImageRepository.php:9    [M] IncrementInteger

--- Original
+++ New
@@ @@
 use Doctrine\ORM\EntityRepository;
 class ImageRepository extends EntityRepository
 {
-    public function getLatestImages(int $limit = 10)
+    public function getLatestImages(int $limit = 11)
     {
         $qb = $this->createQueryBuilder('i');
         $qb->setMaxResults($limit);


625) /var/www/src/Repository/Track/ImageRepository.php:9    [M] DecrementInteger

--- Original
+++ New
@@ @@
 use Doctrine\ORM\EntityRepository;
 class ImageRepository extends EntityRepository
 {
-    public function getLatestImages(int $limit = 10)
+    public function getLatestImages(int $limit = 9)
     {
         $qb = $this->createQueryBuilder('i');
         $qb->setMaxResults($limit);


626) /var/www/src/Repository/Track/ImageRepository.php:12    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function getLatestImages(int $limit = 10)
     {
         $qb = $this->createQueryBuilder('i');
-        $qb->setMaxResults($limit);
+        
         $qb->addOrderBy('i.createdAt', 'DESC');
         return $qb->getQuery()->getResult();
     }
 }

627) /var/www/src/Repository/Track/ImageRepository.php:13    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $qb = $this->createQueryBuilder('i');
         $qb->setMaxResults($limit);
-        $qb->addOrderBy('i.createdAt', 'DESC');
+        
         return $qb->getQuery()->getResult();
     }
 }


628) /var/www/src/Repository/TrackRepository.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Apply filter to return only public tracks
      */
-    public function andWhereTrackIsPublic(QueryBuilder $qb) : self
+    protected function andWhereTrackIsPublic(QueryBuilder $qb) : self
     {
         $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.visibility', Track::VISIBILITY_PUBLIC));
         return $this;


629) /var/www/src/Repository/TrackRepository.php:16    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function andWhereTrackIsPublic(QueryBuilder $qb) : self
     {
-        $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.visibility', Track::VISIBILITY_PUBLIC));
+        
         return $this;
     }
     /**


630) /var/www/src/Repository/TrackRepository.php:17    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     public function andWhereTrackIsPublic(QueryBuilder $qb) : self
     {
-        $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.visibility', Track::VISIBILITY_PUBLIC));
+        $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[1] . '.visibility', Track::VISIBILITY_PUBLIC));
         return $this;
     }
     /**


631) /var/www/src/Repository/TrackRepository.php:17    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function andWhereTrackIsPublic(QueryBuilder $qb) : self
     {
-        $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.visibility', Track::VISIBILITY_PUBLIC));
+        $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[-1] . '.visibility', Track::VISIBILITY_PUBLIC));
         return $this;
     }
     /**


632) /var/www/src/Repository/TrackRepository.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Filter tracks by coordinates
      */
-    public function andWhereInCoordinates(QueryBuilder $qb, array $skipTracks, float $neLat, float $swLat, float $neLon, float $swLon) : self
+    protected function andWhereInCoordinates(QueryBuilder $qb, array $skipTracks, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
         $alias = $qb->getRootAliases()[0];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.pointNorthEastLat', $neLat), $qb->expr()->gte($alias . '.pointSouthWestLat', $swLat), $qb->expr()->lte($alias . '.pointNorthEastLng', $neLon), $qb->expr()->gte($alias . '.pointSouthWestLng', $swLon)));


633) /var/www/src/Repository/TrackRepository.php:28    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function andWhereInCoordinates(QueryBuilder $qb, array $skipTracks, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
-        $alias = $qb->getRootAliases()[0];
+        $alias = $qb->getRootAliases()[-1];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.pointNorthEastLat', $neLat), $qb->expr()->gte($alias . '.pointSouthWestLat', $swLat), $qb->expr()->lte($alias . '.pointNorthEastLng', $neLon), $qb->expr()->gte($alias . '.pointSouthWestLng', $swLon)));
         if (!empty($skipTracks)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipTracks));


634) /var/www/src/Repository/TrackRepository.php:28    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     public function andWhereInCoordinates(QueryBuilder $qb, array $skipTracks, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
-        $alias = $qb->getRootAliases()[0];
+        $alias = $qb->getRootAliases()[1];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.pointNorthEastLat', $neLat), $qb->expr()->gte($alias . '.pointSouthWestLat', $swLat), $qb->expr()->lte($alias . '.pointNorthEastLng', $neLon), $qb->expr()->gte($alias . '.pointSouthWestLng', $swLon)));
         if (!empty($skipTracks)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipTracks));


635) /var/www/src/Repository/TrackRepository.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function andWhereInCoordinates(QueryBuilder $qb, array $skipTracks, float $neLat, float $swLat, float $neLon, float $swLon) : self
     {
         $alias = $qb->getRootAliases()[0];
-        $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.pointNorthEastLat', $neLat), $qb->expr()->gte($alias . '.pointSouthWestLat', $swLat), $qb->expr()->lte($alias . '.pointNorthEastLng', $neLon), $qb->expr()->gte($alias . '.pointSouthWestLng', $swLon)));
+        
         if (!empty($skipTracks)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipTracks));
         }


636) /var/www/src/Repository/TrackRepository.php:39    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
         $alias = $qb->getRootAliases()[0];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.pointNorthEastLat', $neLat), $qb->expr()->gte($alias . '.pointSouthWestLat', $swLat), $qb->expr()->lte($alias . '.pointNorthEastLng', $neLon), $qb->expr()->gte($alias . '.pointSouthWestLng', $swLon)));
-        if (!empty($skipTracks)) {
+        if (empty($skipTracks)) {
             $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipTracks));
         }
         return $this;


637) /var/www/src/Repository/TrackRepository.php:40    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $alias = $qb->getRootAliases()[0];
         $qb->andWhere($qb->expr()->andX($qb->expr()->lte($alias . '.pointNorthEastLat', $neLat), $qb->expr()->gte($alias . '.pointSouthWestLat', $swLat), $qb->expr()->lte($alias . '.pointNorthEastLng', $neLon), $qb->expr()->gte($alias . '.pointSouthWestLng', $swLon)));
         if (!empty($skipTracks)) {
-            $qb->andWhere($qb->expr()->notIn($alias . '.id', $skipTracks));
+            
         }
         return $this;
     }


638) /var/www/src/Repository/TrackRepository.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * Used in the index page
      */
-    public function findLatestTrackTypes() : array
+    protected function findLatestTrackTypes() : array
     {
         $data = [];
         foreach (Track::VALID_TYPES as $type) {


639) /var/www/src/Repository/TrackRepository.php:55    [M] Foreach_

--- Original
+++ New
@@ @@
     public function findLatestTrackTypes() : array
     {
         $data = [];
-        foreach (Track::VALID_TYPES as $type) {
+        foreach (array() as $type) {
             $qb = $this->createQueryBuilder('t');
             $this->andWhereTrackIsPublic($qb);
             $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));


640) /var/www/src/Repository/TrackRepository.php:58    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data = [];
         foreach (Track::VALID_TYPES as $type) {
             $qb = $this->createQueryBuilder('t');
-            $this->andWhereTrackIsPublic($qb);
+            
             $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
             $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
         }


641) /var/www/src/Repository/TrackRepository.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach (Track::VALID_TYPES as $type) {
             $qb = $this->createQueryBuilder('t');
             $this->andWhereTrackIsPublic($qb);
-            $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
+            
             $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
         }
         return $data;


642) /var/www/src/Repository/TrackRepository.php:61    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         foreach (Track::VALID_TYPES as $type) {
             $qb = $this->createQueryBuilder('t');
             $this->andWhereTrackIsPublic($qb);
-            $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
+            $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[1] . '.type', $type));
             $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
         }
         return $data;


643) /var/www/src/Repository/TrackRepository.php:61    [M] DecrementInteger

--- Original
+++ New
@@ @@
         foreach (Track::VALID_TYPES as $type) {
             $qb = $this->createQueryBuilder('t');
             $this->andWhereTrackIsPublic($qb);
-            $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
+            $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[-1] . '.type', $type));
             $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
         }
         return $data;


644) /var/www/src/Repository/TrackRepository.php:66    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $qb = $this->createQueryBuilder('t');
             $this->andWhereTrackIsPublic($qb);
             $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
-            $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
+            $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(9)->getQuery()->getResult();
         }
         return $data;
     }


645) /var/www/src/Repository/TrackRepository.php:66    [M] IncrementInteger

--- Original
+++ New
@@ @@
             $qb = $this->createQueryBuilder('t');
             $this->andWhereTrackIsPublic($qb);
             $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
-            $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
+            $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(11)->getQuery()->getResult();
         }
         return $data;
     }


646) /var/www/src/Repository/TrackRepository.php:71    [M] ArrayOneItem

--- Original
+++ New
@@ @@
             $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.type', $type));
             $data[$type] = $qb->orderBy('t.createdAt', 'desc')->setMaxResults(10)->getQuery()->getResult();
         }
-        return $data;
+        return count($data) > 1 ? array_slice($data, 0, 1, true) : $data;
     }
     public function findByIdOrSlug(string $name) : ?Track
     {


647) /var/www/src/Repository/TrackRepository.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $data;
     }
-    public function findByIdOrSlug(string $name) : ?Track
+    protected function findByIdOrSlug(string $name) : ?Track
     {
         $byId = $this->findOneBy(['id' => $name]);
         if ($byId) {


648) /var/www/src/Repository/TrackRepository.php:76    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function findByIdOrSlug(string $name) : ?Track
     {
-        $byId = $this->findOneBy(['id' => $name]);
+        $byId = $this->findOneBy([]);
         if ($byId) {
             return $byId;
         }


649) /var/www/src/Repository/TrackRepository.php:82    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             return $byId;
         }
         $slugRepo = $this->getEntityManager()->getRepository(Track\Slug::class);
-        $bySlug = $slugRepo->findOneBy(['slug' => $name]);
+        $bySlug = $slugRepo->findOneBy([]);
         if ($bySlug) {
             return $bySlug->getTrack();
         }


650) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:14    [M] LogicalNot

--- Original
+++ New
@@ @@
 {
     protected function supports($attribute, $subject)
     {
-        if (!$subject instanceof Place) {
+        if ($subject instanceof Place) {
             return false;
         }
         switch ($attribute) {


651) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:15    [M] FalseValue

--- Original
+++ New
@@ @@
     protected function supports($attribute, $subject)
     {
         if (!$subject instanceof Place) {
-            return false;
+            return true;
         }
         switch ($attribute) {
             case 'edit':


652) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:20    [M] TrueValue

--- Original
+++ New
@@ @@
         }
         switch ($attribute) {
             case 'edit':
-                return true;
+                return false;
         }
         return false;
     }


653) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:23    [M] FalseValue

--- Original
+++ New
@@ @@
             case 'edit':
                 return true;
         }
-        return false;
+        return true;
     }
     protected function voteOnAttribute($attribute, $subject, TokenInterface $token)
     {


654) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:32    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
         /* @var $subject Place */
         $user = $token->getUser();
-        if (!$user instanceof User) {
+        if ($user instanceof User) {
             return false;
         }
         if (in_array('ROLE_ADMIN', $user->getRoles())) {


655) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:33    [M] FalseValue

--- Original
+++ New
@@ @@
         /* @var $subject Place */
         $user = $token->getUser();
         if (!$user instanceof User) {
-            return false;
+            return true;
         }
         if (in_array('ROLE_ADMIN', $user->getRoles())) {
             return true;


656) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:37    [M] TrueValue

--- Original
+++ New
@@ @@
             return false;
         }
         if (in_array('ROLE_ADMIN', $user->getRoles())) {
-            return true;
+            return false;
         }
         if ($subject->getSendBy() === $token->getUser()) {
             return true;


657) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:40    [M] Identical

--- Original
+++ New
@@ @@
         if (in_array('ROLE_ADMIN', $user->getRoles())) {
             return true;
         }
-        if ($subject->getSendBy() === $token->getUser()) {
+        if ($subject->getSendBy() !== $token->getUser()) {
             return true;
         }
         return false;
     }

658) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:41    [M] TrueValue

--- Original
+++ New
@@ @@
             return true;
         }
         if ($subject->getSendBy() === $token->getUser()) {
-            return true;
+            return false;
         }
         return false;
     }
 }

659) /var/www/src/Security/Authorization/Voter/PlaceVoter.php:44    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($subject->getSendBy() === $token->getUser()) {
             return true;
         }
-        return false;
+        return true;
     }
 }


660) /var/www/src/Security/Authorization/Voter/TrackVoter.php:14    [M] LogicalNot

--- Original
+++ New
@@ @@
 {
     protected function supports($attribute, $subject)
     {
-        if (!$subject instanceof Track) {
+        if ($subject instanceof Track) {
             return false;
         }
         switch ($attribute) {


661) /var/www/src/Security/Authorization/Voter/TrackVoter.php:15    [M] FalseValue

--- Original
+++ New
@@ @@
     protected function supports($attribute, $subject)
     {
         if (!$subject instanceof Track) {
-            return false;
+            return true;
         }
         switch ($attribute) {
             case 'edit':


662) /var/www/src/Security/Authorization/Voter/TrackVoter.php:20    [M] TrueValue

--- Original
+++ New
@@ @@
         }
         switch ($attribute) {
             case 'edit':
-                return true;
+                return false;
         }
         return false;
     }


663) /var/www/src/Security/Authorization/Voter/TrackVoter.php:23    [M] FalseValue

--- Original
+++ New
@@ @@
             case 'edit':
                 return true;
         }
-        return false;
+        return true;
     }
     protected function voteOnAttribute($attribute, $subject, TokenInterface $token)
     {


664) /var/www/src/Security/Authorization/Voter/TrackVoter.php:32    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
         /* @var $subject Track */
         $user = $token->getUser();
-        if (!$user instanceof User) {
+        if ($user instanceof User) {
             return false;
         }
         if (in_array('ROLE_ADMIN', $user->getRoles())) {


665) /var/www/src/Security/Authorization/Voter/TrackVoter.php:33    [M] FalseValue

--- Original
+++ New
@@ @@
         /* @var $subject Track */
         $user = $token->getUser();
         if (!$user instanceof User) {
-            return false;
+            return true;
         }
         if (in_array('ROLE_ADMIN', $user->getRoles())) {
             return true;


666) /var/www/src/Security/Authorization/Voter/TrackVoter.php:37    [M] TrueValue

--- Original
+++ New
@@ @@
             return false;
         }
         if (in_array('ROLE_ADMIN', $user->getRoles())) {
-            return true;
+            return false;
         }
         if ($subject->getSendBy() === $token->getUser()) {
             return true;


667) /var/www/src/Security/Authorization/Voter/TrackVoter.php:40    [M] Identical

--- Original
+++ New
@@ @@
         if (in_array('ROLE_ADMIN', $user->getRoles())) {
             return true;
         }
-        if ($subject->getSendBy() === $token->getUser()) {
+        if ($subject->getSendBy() !== $token->getUser()) {
             return true;
         }
         return false;
     }

668) /var/www/src/Security/Authorization/Voter/TrackVoter.php:41    [M] TrueValue

--- Original
+++ New
@@ @@
             return true;
         }
         if ($subject->getSendBy() === $token->getUser()) {
-            return true;
+            return false;
         }
         return false;
     }
 }

669) /var/www/src/Security/Authorization/Voter/TrackVoter.php:44    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($subject->getSendBy() === $token->getUser()) {
             return true;
         }
-        return false;
+        return true;
     }
 }


670) /var/www/src/Security/Core/OAuthUserProvider.php:23    [M] Throw_

--- Original
+++ New
@@ @@
          */
         $idFromThirdParty = $response->getUsername();
         if (empty($idFromThirdParty)) {
-            throw new AccountNotLinkedException(sprintf("User '%s' not found.", $idFromThirdParty));
+            new AccountNotLinkedException(sprintf("User '%s' not found.", $idFromThirdParty));
         }
         $field = $this->getProperty($response);
         $user = $this->userManager->findUserBy([$field => $idFromThirdParty]);


671) /var/www/src/Security/Core/OAuthUserProvider.php:27    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             throw new AccountNotLinkedException(sprintf("User '%s' not found.", $idFromThirdParty));
         }
         $field = $this->getProperty($response);
-        $user = $this->userManager->findUserBy([$field => $idFromThirdParty]);
+        $user = $this->userManager->findUserBy([]);
         if (!$user) {
             // if user email is changed in 3rd party system, then change our data too
             // the problem is when user have login from facebook and google and emails are different :(


672) /var/www/src/Security/Core/OAuthUserProvider.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
         $field = $this->getProperty($response);
         $user = $this->userManager->findUserBy([$field => $idFromThirdParty]);
-        if (!$user) {
+        if ($user) {
             // if user email is changed in 3rd party system, then change our data too
             // the problem is when user have login from facebook and google and emails are different :(
             if ($response->getEmail()) {


673) /var/www/src/Security/Core/OAuthUserProvider.php:37    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user = $this->userManager->findUserByEmail($response->getEmail());
             }
             if ($user) {
-                $user->setFacebookId($idFromThirdParty);
+                
             }
         }
         if (!$user) {


674) /var/www/src/Security/Core/OAuthUserProvider.php:41    [M] LogicalNot

--- Original
+++ New
@@ @@
                 $user->setFacebookId($idFromThirdParty);
             }
         }
-        if (!$user) {
+        if ($user) {
             $user = new \App\Entity\User\User();
             $user->setFacebookId($idFromThirdParty);
             $usernameFromThirdParty = $response->getNickname();


675) /var/www/src/Security/Core/OAuthUserProvider.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if (!$user) {
             $user = new \App\Entity\User\User();
-            $user->setFacebookId($idFromThirdParty);
+            
             $usernameFromThirdParty = $response->getNickname();
             $username = $usernameFromThirdParty;
             $usernameExists = true;


676) /var/www/src/Security/Core/OAuthUserProvider.php:47    [M] TrueValue

--- Original
+++ New
@@ @@
             $user->setFacebookId($idFromThirdParty);
             $usernameFromThirdParty = $response->getNickname();
             $username = $usernameFromThirdParty;
-            $usernameExists = true;
+            $usernameExists = false;
             $counter = 0;
             while ($usernameExists) {
                 if ($counter) {


677) /var/www/src/Security/Core/OAuthUserProvider.php:48    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $usernameFromThirdParty = $response->getNickname();
             $username = $usernameFromThirdParty;
             $usernameExists = true;
-            $counter = 0;
+            $counter = 1;
             while ($usernameExists) {
                 if ($counter) {
                     $username = $usernameFromThirdParty . $counter;


678) /var/www/src/Security/Core/OAuthUserProvider.php:48    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $usernameFromThirdParty = $response->getNickname();
             $username = $usernameFromThirdParty;
             $usernameExists = true;
-            $counter = 0;
+            $counter = -1;
             while ($usernameExists) {
                 if ($counter) {
                     $username = $usernameFromThirdParty . $counter;


679) /var/www/src/Security/Core/OAuthUserProvider.php:55    [M] LogicalNot

--- Original
+++ New
@@ @@
                     $username = $usernameFromThirdParty . $counter;
                 }
                 $existingUser = $this->userManager->findUserByUsername($username);
-                if (!$existingUser) {
+                if ($existingUser) {
                     $usernameExists = false;
                 }
                 $counter++;


680) /var/www/src/Security/Core/OAuthUserProvider.php:56    [M] FalseValue

--- Original
+++ New
@@ @@
                 }
                 $existingUser = $this->userManager->findUserByUsername($username);
                 if (!$existingUser) {
-                    $usernameExists = false;
+                    $usernameExists = true;
                 }
                 $counter++;
             }


681) /var/www/src/Security/Core/OAuthUserProvider.php:59    [M] Increment

--- Original
+++ New
@@ @@
                 if (!$existingUser) {
                     $usernameExists = false;
                 }
-                $counter++;
+                $counter--;
             }
             $user->setUsername($username);
             $user->setEmail($response->getEmail());


682) /var/www/src/Security/Core/OAuthUserProvider.php:62    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
                 $counter++;
             }
-            $user->setUsername($username);
+            
             $user->setEmail($response->getEmail());
             $user->setPassword(sha1(base64_encode(random_bytes(30))));
             $user->setEnabled(true);


683) /var/www/src/Security/Core/OAuthUserProvider.php:63    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $counter++;
             }
             $user->setUsername($username);
-            $user->setEmail($response->getEmail());
+            
             $user->setPassword(sha1(base64_encode(random_bytes(30))));
             $user->setEnabled(true);
             $this->userManager->updateUser($user);


684) /var/www/src/Security/Core/OAuthUserProvider.php:64    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $user->setUsername($username);
             $user->setEmail($response->getEmail());
-            $user->setPassword(sha1(base64_encode(random_bytes(30))));
+            
             $user->setEnabled(true);
             $this->userManager->updateUser($user);
         }


685) /var/www/src/Security/Core/OAuthUserProvider.php:66    [M] IncrementInteger

--- Original
+++ New
@@ @@
             }
             $user->setUsername($username);
             $user->setEmail($response->getEmail());
-            $user->setPassword(sha1(base64_encode(random_bytes(30))));
+            $user->setPassword(sha1(base64_encode(random_bytes(31))));
             $user->setEnabled(true);
             $this->userManager->updateUser($user);
         }


686) /var/www/src/Security/Core/OAuthUserProvider.php:66    [M] DecrementInteger

--- Original
+++ New
@@ @@
             }
             $user->setUsername($username);
             $user->setEmail($response->getEmail());
-            $user->setPassword(sha1(base64_encode(random_bytes(30))));
+            $user->setPassword(sha1(base64_encode(random_bytes(29))));
             $user->setEnabled(true);
             $this->userManager->updateUser($user);
         }


687) /var/www/src/Security/Core/OAuthUserProvider.php:69    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->setUsername($username);
             $user->setEmail($response->getEmail());
             $user->setPassword(sha1(base64_encode(random_bytes(30))));
-            $user->setEnabled(true);
+            
             $this->userManager->updateUser($user);
         }
         return $user;
     }

688) /var/www/src/Security/Core/OAuthUserProvider.php:69    [M] TrueValue

--- Original
+++ New
@@ @@
             $user->setUsername($username);
             $user->setEmail($response->getEmail());
             $user->setPassword(sha1(base64_encode(random_bytes(30))));
-            $user->setEnabled(true);
+            $user->setEnabled(false);
             $this->userManager->updateUser($user);
         }
         return $user;
     }

689) /var/www/src/Security/Core/OAuthUserProvider.php:70    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->setEmail($response->getEmail());
             $user->setPassword(sha1(base64_encode(random_bytes(30))));
             $user->setEnabled(true);
-            $this->userManager->updateUser($user);
+            
         }
         return $user;
     }
 }

690) /var/www/src/Track/Exporter.php:11    [M] PublicVisibility

--- Original
+++ New
@@ @@
 class Exporter
 {
     public const FORMAT_GPX = 'gpx';
-    public function export(iterable $versions, string $format) : string
+    protected function export(iterable $versions, string $format) : string
     {
         switch ($format) {
             case self::FORMAT_GPX:


691) /var/www/src/Track/Exporter.php:18    [M] Throw_

--- Original
+++ New
@@ @@
                 $result = $this->exportGpx($versions);
                 break;
             default:
-                throw new \RuntimeException('Unknown format');
+                new \RuntimeException('Unknown format');
         }
         return $result;
     }


692) /var/www/src/Track/Exporter.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param iterable|Version[] $versionCollection
      */
-    public function exportGpx(iterable $versionCollection) : string
+    protected function exportGpx(iterable $versionCollection) : string
     {
         $xml = new \SimpleXMLElement('<gpx/>');
         $xml->addAttribute('version', '1.1');


693) /var/www/src/Track/Exporter.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function exportGpx(iterable $versionCollection) : string
     {
         $xml = new \SimpleXMLElement('<gpx/>');
-        $xml->addAttribute('version', '1.1');
+        
         $xml->addAttribute('creator', 'track-hub.com: http://track-hub.com/');
         foreach ($versionCollection as $version) {
             $trkXml = $xml->addChild('trk');


694) /var/www/src/Track/Exporter.php:31    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $xml = new \SimpleXMLElement('<gpx/>');
         $xml->addAttribute('version', '1.1');
-        $xml->addAttribute('creator', 'track-hub.com: http://track-hub.com/');
+        
         foreach ($versionCollection as $version) {
             $trkXml = $xml->addChild('trk');
             $trkXml->addChild('name', $version->getTrack()->getNameEn());


695) /var/www/src/Track/Exporter.php:33    [M] Foreach_

--- Original
+++ New
@@ @@
         $xml = new \SimpleXMLElement('<gpx/>');
         $xml->addAttribute('version', '1.1');
         $xml->addAttribute('creator', 'track-hub.com: http://track-hub.com/');
-        foreach ($versionCollection as $version) {
+        foreach (array() as $version) {
             $trkXml = $xml->addChild('trk');
             $trkXml->addChild('name', $version->getTrack()->getNameEn());
             $trkSegXSml = $trkXml->addChild('trkseg');


696) /var/www/src/Track/Exporter.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $xml->addAttribute('creator', 'track-hub.com: http://track-hub.com/');
         foreach ($versionCollection as $version) {
             $trkXml = $xml->addChild('trk');
-            $trkXml->addChild('name', $version->getTrack()->getNameEn());
+            
             $trkSegXSml = $trkXml->addChild('trkseg');
             foreach ($version->getPoints() as $point) {
                 $trkSegPointXml = $trkSegXSml->addChild('trkpt');


697) /var/www/src/Track/Exporter.php:39    [M] Foreach_

--- Original
+++ New
@@ @@
             $trkXml = $xml->addChild('trk');
             $trkXml->addChild('name', $version->getTrack()->getNameEn());
             $trkSegXSml = $trkXml->addChild('trkseg');
-            foreach ($version->getPoints() as $point) {
+            foreach (array() as $point) {
                 $trkSegPointXml = $trkSegXSml->addChild('trkpt');
                 $trkSegPointXml->addAttribute('lat', $point->getLat());
                 $trkSegPointXml->addAttribute('lon', $point->getLng());


698) /var/www/src/Track/Exporter.php:41    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $trkSegXSml = $trkXml->addChild('trkseg');
             foreach ($version->getPoints() as $point) {
                 $trkSegPointXml = $trkSegXSml->addChild('trkpt');
-                $trkSegPointXml->addAttribute('lat', $point->getLat());
+                
                 $trkSegPointXml->addAttribute('lon', $point->getLng());
                 if ($point->getElevation()) {
                     $trkSegPointXml->addChild('ele', $point->getElevation());


699) /var/www/src/Track/Exporter.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             foreach ($version->getPoints() as $point) {
                 $trkSegPointXml = $trkSegXSml->addChild('trkpt');
                 $trkSegPointXml->addAttribute('lat', $point->getLat());
-                $trkSegPointXml->addAttribute('lon', $point->getLng());
+                
                 if ($point->getElevation()) {
                     $trkSegPointXml->addChild('ele', $point->getElevation());
                 }


700) /var/www/src/Track/Exporter.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $trkSegPointXml->addAttribute('lat', $point->getLat());
                 $trkSegPointXml->addAttribute('lon', $point->getLng());
                 if ($point->getElevation()) {
-                    $trkSegPointXml->addChild('ele', $point->getElevation());
+                    
                 }
             }
             foreach ($version->getWayPoints() as $wayPoint) {


701) /var/www/src/Track/Exporter.php:48    [M] Foreach_

--- Original
+++ New
@@ @@
                     $trkSegPointXml->addChild('ele', $point->getElevation());
                 }
             }
-            foreach ($version->getWayPoints() as $wayPoint) {
+            foreach (array() as $wayPoint) {
                 $wayPointXml = $xml->addChild('wpt');
                 $wayPointXml->addAttribute('lat', $wayPoint->getLat());
                 $wayPointXml->addAttribute('lon', $wayPoint->getLng());


702) /var/www/src/Track/Exporter.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             foreach ($version->getWayPoints() as $wayPoint) {
                 $wayPointXml = $xml->addChild('wpt');
-                $wayPointXml->addAttribute('lat', $wayPoint->getLat());
+                
                 $wayPointXml->addAttribute('lon', $wayPoint->getLng());
                 $wayPointXml->addChild('name', $wayPointXml->getName());
             }


703) /var/www/src/Track/Exporter.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             foreach ($version->getWayPoints() as $wayPoint) {
                 $wayPointXml = $xml->addChild('wpt');
                 $wayPointXml->addAttribute('lat', $wayPoint->getLat());
-                $wayPointXml->addAttribute('lon', $wayPoint->getLng());
+                
                 $wayPointXml->addChild('name', $wayPointXml->getName());
             }
         }


704) /var/www/src/Track/Exporter.php:52    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $wayPointXml = $xml->addChild('wpt');
                 $wayPointXml->addAttribute('lat', $wayPoint->getLat());
                 $wayPointXml->addAttribute('lon', $wayPoint->getLng());
-                $wayPointXml->addChild('name', $wayPointXml->getName());
+                
             }
         }
         $stringResult = $xml->asXML();


705) /var/www/src/Track/Exporter.php:57    [M] FalseValue

--- Original
+++ New
@@ @@
             }
         }
         $stringResult = $xml->asXML();
-        if ($stringResult === false) {
+        if ($stringResult === true) {
             throw new \RuntimeException('XML generation failed');
         }
         return $stringResult;
     }

706) /var/www/src/Track/Exporter.php:57    [M] Identical

--- Original
+++ New
@@ @@
             }
         }
         $stringResult = $xml->asXML();
-        if ($stringResult === false) {
+        if ($stringResult !== false) {
             throw new \RuntimeException('XML generation failed');
         }
         return $stringResult;
     }

707) /var/www/src/Track/Exporter.php:58    [M] Throw_

--- Original
+++ New
@@ @@
         }
         $stringResult = $xml->asXML();
         if ($stringResult === false) {
-            throw new \RuntimeException('XML generation failed');
+            new \RuntimeException('XML generation failed');
         }
         return $stringResult;
     }
 }

708) /var/www/src/Track/Processor.php:17    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @var TwoPointsChecker\PointCheckerInterface[]
      */
     private $twoPointsCheckers = [];
-    public function addTwoPointsChecker(TwoPointsChecker\PointCheckerInterface $checker)
+    protected function addTwoPointsChecker(TwoPointsChecker\PointCheckerInterface $checker)
     {
         $this->twoPointsCheckers[] = $checker;
     }


709) /var/www/src/Track/Processor.php:25    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function isPointReal(Point $pointA, Point $pointB) : bool
     {
         foreach ($this->twoPointsCheckers as $singlePointChecker) {
-            if (!$singlePointChecker->isReal($pointA, $pointB)) {
+            if ($singlePointChecker->isReal($pointA, $pointB)) {
                 return false;
             }
         }


710) /var/www/src/Track/Processor.php:26    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         foreach ($this->twoPointsCheckers as $singlePointChecker) {
             if (!$singlePointChecker->isReal($pointA, $pointB)) {
-                return false;
+                return true;
             }
         }
         return true;


711) /var/www/src/Track/Processor.php:39    [M] Throw_

--- Original
+++ New
@@ @@
         $version->getPoints()->clear();
         $xml = simplexml_load_string($source);
         if ($xml === false) {
-            throw new \RuntimeException("Xml load failed");
+            new \RuntimeException("Xml load failed");
         }
         if ($xml->getName() != "gpx") {
             throw new \RuntimeException("Xml invalid format");


712) /var/www/src/Track/Processor.php:115    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                                     $negativeElevation += $elevationChange;
                                     $previousRealPoint = $point;
                                 } else {
-                                    $point->setElevation();
+                                    
                                 }
                             }
                         }


713) /var/www/src/Track/Processor.php:156    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @param Version $version
      * @return OptimizedPoint[]
      */
-    public function generateOptimizedPoints(Version $version)
+    protected function generateOptimizedPoints(Version $version)
     {
         $optimizedPointLat = 0;
         $optimizedPointLon = 0;


714) /var/www/src/Track/Processor.php:158    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     public function generateOptimizedPoints(Version $version)
     {
-        $optimizedPointLat = 0;
+        $optimizedPointLat = 1;
         $optimizedPointLon = 0;
         $order = 0;
         $optimizedPointCollection = [];


715) /var/www/src/Track/Processor.php:158    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public function generateOptimizedPoints(Version $version)
     {
-        $optimizedPointLat = 0;
+        $optimizedPointLat = -1;
         $optimizedPointLon = 0;
         $order = 0;
         $optimizedPointCollection = [];


716) /var/www/src/Track/Processor.php:159    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     public function generateOptimizedPoints(Version $version)
     {
         $optimizedPointLat = 0;
-        $optimizedPointLon = 0;
+        $optimizedPointLon = 1;
         $order = 0;
         $optimizedPointCollection = [];
         foreach ($version->getPoints() as $point) {


717) /var/www/src/Track/Processor.php:159    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function generateOptimizedPoints(Version $version)
     {
         $optimizedPointLat = 0;
-        $optimizedPointLon = 0;
+        $optimizedPointLon = -1;
         $order = 0;
         $optimizedPointCollection = [];
         foreach ($version->getPoints() as $point) {


718) /var/www/src/Track/Processor.php:161    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $optimizedPointLat = 0;
         $optimizedPointLon = 0;
-        $order = 0;
+        $order = -1;
         $optimizedPointCollection = [];
         foreach ($version->getPoints() as $point) {
             $latDiff = $optimizedPointLat - $point->getLat();


719) /var/www/src/Track/Processor.php:161    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
         $optimizedPointLat = 0;
         $optimizedPointLon = 0;
-        $order = 0;
+        $order = 1;
         $optimizedPointCollection = [];
         foreach ($version->getPoints() as $point) {
             $latDiff = $optimizedPointLat - $point->getLat();


720) /var/www/src/Track/Processor.php:165    [M] Foreach_

--- Original
+++ New
@@ @@
         $optimizedPointLon = 0;
         $order = 0;
         $optimizedPointCollection = [];
-        foreach ($version->getPoints() as $point) {
+        foreach (array() as $point) {
             $latDiff = $optimizedPointLat - $point->getLat();
             $lonDiff = $optimizedPointLon - $point->getLng();
             $diff = abs($latDiff) + abs($lonDiff);


721) /var/www/src/Track/Processor.php:166    [M] Minus

--- Original
+++ New
@@ @@
         $order = 0;
         $optimizedPointCollection = [];
         foreach ($version->getPoints() as $point) {
-            $latDiff = $optimizedPointLat - $point->getLat();
+            $latDiff = $optimizedPointLat + $point->getLat();
             $lonDiff = $optimizedPointLon - $point->getLng();
             $diff = abs($latDiff) + abs($lonDiff);
             if ($diff > 0.002) {


722) /var/www/src/Track/Processor.php:167    [M] Minus

--- Original
+++ New
@@ @@
         $optimizedPointCollection = [];
         foreach ($version->getPoints() as $point) {
             $latDiff = $optimizedPointLat - $point->getLat();
-            $lonDiff = $optimizedPointLon - $point->getLng();
+            $lonDiff = $optimizedPointLon + $point->getLng();
             $diff = abs($latDiff) + abs($lonDiff);
             if ($diff > 0.002) {
                 $optimizedPointLat = $point->getLat();


723) /var/www/src/Track/Processor.php:168    [M] Plus

--- Original
+++ New
@@ @@
         foreach ($version->getPoints() as $point) {
             $latDiff = $optimizedPointLat - $point->getLat();
             $lonDiff = $optimizedPointLon - $point->getLng();
-            $diff = abs($latDiff) + abs($lonDiff);
+            $diff = abs($latDiff) - abs($lonDiff);
             if ($diff > 0.002) {
                 $optimizedPointLat = $point->getLat();
                 $optimizedPointLon = $point->getLng();


724) /var/www/src/Track/Processor.php:169    [M] GreaterThan

--- Original
+++ New
@@ @@
             $latDiff = $optimizedPointLat - $point->getLat();
             $lonDiff = $optimizedPointLon - $point->getLng();
             $diff = abs($latDiff) + abs($lonDiff);
-            if ($diff > 0.002) {
+            if ($diff >= 0.002) {
                 $optimizedPointLat = $point->getLat();
                 $optimizedPointLon = $point->getLng();
                 $optimizedPoint = new OptimizedPoint($order, $point->getLat(), $point->getLng());


725) /var/www/src/Track/Processor.php:169    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
             $latDiff = $optimizedPointLat - $point->getLat();
             $lonDiff = $optimizedPointLon - $point->getLng();
             $diff = abs($latDiff) + abs($lonDiff);
-            if ($diff > 0.002) {
+            if ($diff <= 0.002) {
                 $optimizedPointLat = $point->getLat();
                 $optimizedPointLon = $point->getLng();
                 $optimizedPoint = new OptimizedPoint($order, $point->getLat(), $point->getLng());


726) /var/www/src/Track/Processor.php:181    [M] Increment

--- Original
+++ New
@@ @@
                 $optimizedPoint = new OptimizedPoint($order, $point->getLat(), $point->getLng());
                 $optimizedPointCollection[] = $optimizedPoint;
             }
-            $order++;
+            $order--;
         }
         return $optimizedPointCollection;
     }


727) /var/www/src/Track/Processor.php:187    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $optimizedPointCollection;
     }
-    public function postProcess(Track $track)
+    protected function postProcess(Track $track)
     {
         $track->recalculateEdgesCache();
     }


728) /var/www/src/Track/Processor.php:189    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function postProcess(Track $track)
     {
-        $track->recalculateEdgesCache();
+        
     }
     public function generateElevationLables(iterable $pointCollection, int $pointsCount)
     {


729) /var/www/src/Track/Processor.php:192    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $track->recalculateEdgesCache();
     }
-    public function generateElevationLables(iterable $pointCollection, int $pointsCount)
+    protected function generateElevationLables(iterable $pointCollection, int $pointsCount)
     {
         $longestDistance = 0;
         $labels = [];


730) /var/www/src/Track/Processor.php:194    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function generateElevationLables(iterable $pointCollection, int $pointsCount)
     {
-        $longestDistance = 0;
+        $longestDistance = -1;
         $labels = [];
         foreach ($pointCollection as $points) {
             $lastPoint = end($points);


731) /var/www/src/Track/Processor.php:194    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     }
     public function generateElevationLables(iterable $pointCollection, int $pointsCount)
     {
-        $longestDistance = 0;
+        $longestDistance = 1;
         $labels = [];
         foreach ($pointCollection as $points) {
             $lastPoint = end($points);


732) /var/www/src/Track/Processor.php:197    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $longestDistance = 0;
         $labels = [];
-        foreach ($pointCollection as $points) {
+        foreach (array() as $points) {
             $lastPoint = end($points);
             if ($lastPoint->getDistance() > $longestDistance) {
                 $longestDistance = $lastPoint->getDistance();


733) /var/www/src/Track/Processor.php:199    [M] GreaterThan

--- Original
+++ New
@@ @@
         $labels = [];
         foreach ($pointCollection as $points) {
             $lastPoint = end($points);
-            if ($lastPoint->getDistance() > $longestDistance) {
+            if ($lastPoint->getDistance() >= $longestDistance) {
                 $longestDistance = $lastPoint->getDistance();
             }
         }


734) /var/www/src/Track/Processor.php:199    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $labels = [];
         foreach ($pointCollection as $points) {
             $lastPoint = end($points);
-            if ($lastPoint->getDistance() > $longestDistance) {
+            if ($lastPoint->getDistance() <= $longestDistance) {
                 $longestDistance = $lastPoint->getDistance();
             }
         }


735) /var/www/src/Track/Processor.php:204    [M] Division

--- Original
+++ New
@@ @@
                 $longestDistance = $lastPoint->getDistance();
             }
         }
-        $labelDistance = $longestDistance / $pointsCount;
+        $labelDistance = $longestDistance * $pointsCount;
         for ($q = 0; $q < $pointsCount; $q++) {
             $labels[] = $labelDistance * $q;
         }


736) /var/www/src/Track/Processor.php:205    [M] For_

--- Original
+++ New
@@ @@
             }
         }
         $labelDistance = $longestDistance / $pointsCount;
-        for ($q = 0; $q < $pointsCount; $q++) {
+        for ($q = 0; false; $q++) {
             $labels[] = $labelDistance * $q;
         }
         return $labels;


737) /var/www/src/Track/Processor.php:205    [M] DecrementInteger

--- Original
+++ New
@@ @@
             }
         }
         $labelDistance = $longestDistance / $pointsCount;
-        for ($q = 0; $q < $pointsCount; $q++) {
+        for ($q = -1; $q < $pointsCount; $q++) {
             $labels[] = $labelDistance * $q;
         }
         return $labels;


738) /var/www/src/Track/Processor.php:205    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             }
         }
         $labelDistance = $longestDistance / $pointsCount;
-        for ($q = 0; $q < $pointsCount; $q++) {
+        for ($q = 1; $q < $pointsCount; $q++) {
             $labels[] = $labelDistance * $q;
         }
         return $labels;


739) /var/www/src/Track/Processor.php:205    [M] LessThan

--- Original
+++ New
@@ @@
             }
         }
         $labelDistance = $longestDistance / $pointsCount;
-        for ($q = 0; $q < $pointsCount; $q++) {
+        for ($q = 0; $q <= $pointsCount; $q++) {
             $labels[] = $labelDistance * $q;
         }
         return $labels;


740) /var/www/src/Track/Processor.php:205    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             }
         }
         $labelDistance = $longestDistance / $pointsCount;
-        for ($q = 0; $q < $pointsCount; $q++) {
+        for ($q = 0; $q >= $pointsCount; $q++) {
             $labels[] = $labelDistance * $q;
         }
         return $labels;


741) /var/www/src/Track/Processor.php:205    [M] Increment

--- Original
+++ New
@@ @@
             }
         }
         $labelDistance = $longestDistance / $pointsCount;
-        for ($q = 0; $q < $pointsCount; $q++) {
+        for ($q = 0; $q < $pointsCount; $q--) {
             $labels[] = $labelDistance * $q;
         }
         return $labels;


742) /var/www/src/Track/Processor.php:206    [M] Multiplication

--- Original
+++ New
@@ @@
         }
         $labelDistance = $longestDistance / $pointsCount;
         for ($q = 0; $q < $pointsCount; $q++) {
-            $labels[] = $labelDistance * $q;
+            $labels[] = $labelDistance / $q;
         }
         return $labels;
     }


743) /var/www/src/Track/Processor.php:218    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * @return array
      */
-    public function generateElevationData(iterable $pointCollection, iterable $labels) : array
+    protected function generateElevationData(iterable $pointCollection, iterable $labels) : array
     {
         $return = [];
         foreach ($pointCollection as $item) {


744) /var/www/src/Track/Processor.php:222    [M] Foreach_

--- Original
+++ New
@@ @@
     public function generateElevationData(iterable $pointCollection, iterable $labels) : array
     {
         $return = [];
-        foreach ($pointCollection as $item) {
+        foreach (array() as $item) {
             reset($item);
             $return[] = [];
         }


745) /var/www/src/Track/Processor.php:223    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     {
         $return = [];
         foreach ($pointCollection as $item) {
-            reset($item);
+            
             $return[] = [];
         }
         $collectionsCount = count($pointCollection);


746) /var/www/src/Track/Processor.php:229    [M] Foreach_

--- Original
+++ New
@@ @@
             $return[] = [];
         }
         $collectionsCount = count($pointCollection);
-        foreach ($labels as $labelIndex => $labelDistance) {
+        foreach (array() as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
             for ($q = 0; $q < $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);


747) /var/www/src/Track/Processor.php:231    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $collectionsCount = count($pointCollection);
         foreach ($labels as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
-            for ($q = 0; $q < $collectionsCount; $q++) {
+            for ($q = 1; $q < $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
                     continue;


748) /var/www/src/Track/Processor.php:231    [M] For_

--- Original
+++ New
@@ @@
         $collectionsCount = count($pointCollection);
         foreach ($labels as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
-            for ($q = 0; $q < $collectionsCount; $q++) {
+            for ($q = 0; false; $q++) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
                     continue;


749) /var/www/src/Track/Processor.php:231    [M] LessThan

--- Original
+++ New
@@ @@
         $collectionsCount = count($pointCollection);
         foreach ($labels as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
-            for ($q = 0; $q < $collectionsCount; $q++) {
+            for ($q = 0; $q <= $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
                     continue;


750) /var/www/src/Track/Processor.php:231    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $collectionsCount = count($pointCollection);
         foreach ($labels as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
-            for ($q = 0; $q < $collectionsCount; $q++) {
+            for ($q = -1; $q < $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
                     continue;


751) /var/www/src/Track/Processor.php:231    [M] Increment

--- Original
+++ New
@@ @@
         $collectionsCount = count($pointCollection);
         foreach ($labels as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
-            for ($q = 0; $q < $collectionsCount; $q++) {
+            for ($q = 0; $q < $collectionsCount; $q--) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
                     continue;


752) /var/www/src/Track/Processor.php:231    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         $collectionsCount = count($pointCollection);
         foreach ($labels as $labelIndex => $labelDistance) {
             $lastKnownElevation = null;
-            for ($q = 0; $q < $collectionsCount; $q++) {
+            for ($q = 0; $q >= $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
                     continue;


753) /var/www/src/Track/Processor.php:234    [M] FalseValue

--- Original
+++ New
@@ @@
             $lastKnownElevation = null;
             for ($q = 0; $q < $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
-                if ($currentPoint === false) {
+                if ($currentPoint === true) {
                     continue;
                 }
                 if ($currentPoint->getElevation()) {


754) /var/www/src/Track/Processor.php:234    [M] Identical

--- Original
+++ New
@@ @@
             $lastKnownElevation = null;
             for ($q = 0; $q < $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
-                if ($currentPoint === false) {
+                if ($currentPoint !== false) {
                     continue;
                 }
                 if ($currentPoint->getElevation()) {


755) /var/www/src/Track/Processor.php:235    [M] Continue_

--- Original
+++ New
@@ @@
             for ($q = 0; $q < $collectionsCount; $q++) {
                 $currentPoint = current($pointCollection[$q]);
                 if ($currentPoint === false) {
-                    continue;
+                    break;
                 }
                 if ($currentPoint->getElevation()) {
                     $lastKnownElevation = $currentPoint->getElevation();


756) /var/www/src/Track/Processor.php:243    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     $lastKnownElevation = $currentPoint->getElevation();
                 }
                 // case: skip point
-                while ($currentPoint && $currentPoint->getDistance() < $labelDistance) {
+                while ($currentPoint || $currentPoint->getDistance() < $labelDistance) {
                     $currentPoint = next($pointCollection[$q]);
                     if ($currentPoint === false) {
                         break;


757) /var/www/src/Track/Processor.php:243    [M] LessThan

--- Original
+++ New
@@ @@
                     $lastKnownElevation = $currentPoint->getElevation();
                 }
                 // case: skip point
-                while ($currentPoint && $currentPoint->getDistance() < $labelDistance) {
+                while ($currentPoint && $currentPoint->getDistance() <= $labelDistance) {
                     $currentPoint = next($pointCollection[$q]);
                     if ($currentPoint === false) {
                         break;


758) /var/www/src/Track/Processor.php:243    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
                     $lastKnownElevation = $currentPoint->getElevation();
                 }
                 // case: skip point
-                while ($currentPoint && $currentPoint->getDistance() < $labelDistance) {
+                while ($currentPoint && $currentPoint->getDistance() >= $labelDistance) {
                     $currentPoint = next($pointCollection[$q]);
                     if ($currentPoint === false) {
                         break;


759) /var/www/src/Track/Processor.php:245    [M] Identical

--- Original
+++ New
@@ @@
                 // case: skip point
                 while ($currentPoint && $currentPoint->getDistance() < $labelDistance) {
                     $currentPoint = next($pointCollection[$q]);
-                    if ($currentPoint === false) {
+                    if ($currentPoint !== false) {
                         break;
                     }
                     if ($currentPoint->getElevation()) {


760) /var/www/src/Track/Processor.php:245    [M] FalseValue

--- Original
+++ New
@@ @@
                 // case: skip point
                 while ($currentPoint && $currentPoint->getDistance() < $labelDistance) {
                     $currentPoint = next($pointCollection[$q]);
-                    if ($currentPoint === false) {
+                    if ($currentPoint === true) {
                         break;
                     }
                     if ($currentPoint->getElevation()) {


761) /var/www/src/Track/Processor.php:246    [M] Break_

--- Original
+++ New
@@ @@
                 while ($currentPoint && $currentPoint->getDistance() < $labelDistance) {
                     $currentPoint = next($pointCollection[$q]);
                     if ($currentPoint === false) {
-                        break;
+                        continue;
                     }
                     if ($currentPoint->getElevation()) {
                         $lastKnownElevation = $currentPoint->getElevation();


762) /var/www/src/Track/Processor.php:254    [M] Identical

--- Original
+++ New
@@ @@
                         $lastKnownElevation = $currentPoint->getElevation();
                     }
                 }
-                if ($currentPoint === false) {
+                if ($currentPoint !== false) {
                     continue;
                 }
                 // case: skip label


763) /var/www/src/Track/Processor.php:254    [M] FalseValue

--- Original
+++ New
@@ @@
                         $lastKnownElevation = $currentPoint->getElevation();
                     }
                 }
-                if ($currentPoint === false) {
+                if ($currentPoint === true) {
                     continue;
                 }
                 // case: skip label


764) /var/www/src/Track/Processor.php:255    [M] Continue_

--- Original
+++ New
@@ @@
                     }
                 }
                 if ($currentPoint === false) {
-                    continue;
+                    break;
                 }
                 // case: skip label
                 if (isset($labels[$labelIndex + 1])) {


765) /var/www/src/Track/Processor.php:259    [M] IncrementInteger

--- Original
+++ New
@@ @@
                     continue;
                 }
                 // case: skip label
-                if (isset($labels[$labelIndex + 1])) {
+                if (isset($labels[$labelIndex + 2])) {
                     $nextLabelDistance = $labels[$labelIndex + 1];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;


766) /var/www/src/Track/Processor.php:259    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     continue;
                 }
                 // case: skip label
-                if (isset($labels[$labelIndex + 1])) {
+                if (isset($labels[$labelIndex + 0])) {
                     $nextLabelDistance = $labels[$labelIndex + 1];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;


767) /var/www/src/Track/Processor.php:259    [M] Plus

--- Original
+++ New
@@ @@
                     continue;
                 }
                 // case: skip label
-                if (isset($labels[$labelIndex + 1])) {
+                if (isset($labels[$labelIndex - 1])) {
                     $nextLabelDistance = $labels[$labelIndex + 1];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;


768) /var/www/src/Track/Processor.php:260    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 }
                 // case: skip label
                 if (isset($labels[$labelIndex + 1])) {
-                    $nextLabelDistance = $labels[$labelIndex + 1];
+                    $nextLabelDistance = $labels[$labelIndex + 2];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;
                         continue;


769) /var/www/src/Track/Processor.php:260    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 }
                 // case: skip label
                 if (isset($labels[$labelIndex + 1])) {
-                    $nextLabelDistance = $labels[$labelIndex + 1];
+                    $nextLabelDistance = $labels[$labelIndex + 0];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;
                         continue;


770) /var/www/src/Track/Processor.php:260    [M] Plus

--- Original
+++ New
@@ @@
                 }
                 // case: skip label
                 if (isset($labels[$labelIndex + 1])) {
-                    $nextLabelDistance = $labels[$labelIndex + 1];
+                    $nextLabelDistance = $labels[$labelIndex - 1];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;
                         continue;


771) /var/www/src/Track/Processor.php:261    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
                 // case: skip label
                 if (isset($labels[$labelIndex + 1])) {
                     $nextLabelDistance = $labels[$labelIndex + 1];
-                    if ($nextLabelDistance < $currentPoint->getDistance()) {
+                    if ($nextLabelDistance >= $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;
                         continue;
                     }


772) /var/www/src/Track/Processor.php:261    [M] LessThan

--- Original
+++ New
@@ @@
                 // case: skip label
                 if (isset($labels[$labelIndex + 1])) {
                     $nextLabelDistance = $labels[$labelIndex + 1];
-                    if ($nextLabelDistance < $currentPoint->getDistance()) {
+                    if ($nextLabelDistance <= $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;
                         continue;
                     }


773) /var/www/src/Track/Processor.php:263    [M] Continue_

--- Original
+++ New
@@ @@
                     $nextLabelDistance = $labels[$labelIndex + 1];
                     if ($nextLabelDistance < $currentPoint->getDistance()) {
                         $return[$q][] = $lastKnownElevation;
-                        continue;
+                        break;
                     }
                 }
                 $return[$q][] = $this->getPointElevation($currentPoint, $pointCollection[$q], $lastKnownElevation);


774) /var/www/src/Track/Processor.php:269    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
                     }
                 }
                 $return[$q][] = $this->getPointElevation($currentPoint, $pointCollection[$q], $lastKnownElevation);
-                next($pointCollection[$q]);
+                
             }
         }
         return $return;


775) /var/www/src/Track/Processor.php:273    [M] ArrayOneItem

--- Original
+++ New
@@ @@
                 next($pointCollection[$q]);
             }
         }
-        return $return;
+        return count($return) > 1 ? array_slice($return, 0, 1, true) : $return;
     }
     /**
      * Return point elevation.


776) /var/www/src/Track/Processor.php:280    [M] DecrementInteger

--- Original
+++ New
@@ @@
      * Return point elevation.
      * If there is no elevation data then use siblings to generate the elevation
      */
-    public function getPointElevation(Point $point, iterable $pointCollection, $defaultElevation = 0) : ?float
+    public function getPointElevation(Point $point, iterable $pointCollection, $defaultElevation = -1) : ?float
     {
         if ($point->getElevation()) {
             return $point->getElevation();


777) /var/www/src/Track/Processor.php:280    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * Return point elevation.
      * If there is no elevation data then use siblings to generate the elevation
      */
-    public function getPointElevation(Point $point, iterable $pointCollection, $defaultElevation = 0) : ?float
+    protected function getPointElevation(Point $point, iterable $pointCollection, $defaultElevation = 0) : ?float
     {
         if ($point->getElevation()) {
             return $point->getElevation();


778) /var/www/src/Track/Processor.php:280    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      * Return point elevation.
      * If there is no elevation data then use siblings to generate the elevation
      */
-    public function getPointElevation(Point $point, iterable $pointCollection, $defaultElevation = 0) : ?float
+    public function getPointElevation(Point $point, iterable $pointCollection, $defaultElevation = 1) : ?float
     {
         if ($point->getElevation()) {
             return $point->getElevation();


779) /var/www/src/Track/Processor.php:286    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         if ($point->getElevation()) {
             return $point->getElevation();
         }
-        reset($pointCollection);
+        
         while ($point !== current($pointCollection)) {
             next($pointCollection);
         }


780) /var/www/src/Track/Processor.php:287    [M] NotIdentical

--- Original
+++ New
@@ @@
             return $point->getElevation();
         }
         reset($pointCollection);
-        while ($point !== current($pointCollection)) {
+        while ($point === current($pointCollection)) {
             next($pointCollection);
         }
         next($pointCollection);


781) /var/www/src/Track/Processor.php:288    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         }
         reset($pointCollection);
         while ($point !== current($pointCollection)) {
-            next($pointCollection);
+            
         }
         next($pointCollection);
         while ($previousPoint = prev($pointCollection)) {


782) /var/www/src/Track/Processor.php:290    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         while ($point !== current($pointCollection)) {
             next($pointCollection);
         }
-        next($pointCollection);
+        
         while ($previousPoint = prev($pointCollection)) {
             if ($previousPoint->getElevation()) {
                 return $previousPoint->getElevation();


783) /var/www/src/Twig/PlaceImageExtension.php:20    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getFunctions()
     {
-        return [new TwigFunction('app_place_image', [$this, 'resize'])];
+        return [];
     }
     public function resize(Image $image, int $width, $height) : string
     {


784) /var/www/src/Twig/PlaceImageExtension.php:21    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getFunctions()
     {
-        return [new TwigFunction('app_place_image', [$this, 'resize'])];
+        return [new TwigFunction('app_place_image', ['resize'])];
     }
     public function resize(Image $image, int $width, $height) : string
     {


785) /var/www/src/Twig/PlaceImageExtension.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return [new TwigFunction('app_place_image', [$this, 'resize'])];
     }
-    public function resize(Image $image, int $width, $height) : string
+    protected function resize(Image $image, int $width, $height) : string
     {
         $resizedPath = $this->imagesDirectory;
         $resizedPath .= '/' . $width . '/' . $height;


786) /var/www/src/Twig/PlaceImageExtension.php:28    [M] Assignment

--- Original
+++ New
@@ @@
     public function resize(Image $image, int $width, $height) : string
     {
         $resizedPath = $this->imagesDirectory;
-        $resizedPath .= '/' . $width . '/' . $height;
+        $resizedPath = '/' . $width . '/' . $height;
         $resizedPath .= '/' . $image->getFilepath();
         return $resizedPath;
     }
 }

787) /var/www/src/Twig/PlaceImageExtension.php:29    [M] Assignment

--- Original
+++ New
@@ @@
     {
         $resizedPath = $this->imagesDirectory;
         $resizedPath .= '/' . $width . '/' . $height;
-        $resizedPath .= '/' . $image->getFilepath();
+        $resizedPath = '/' . $image->getFilepath();
         return $resizedPath;
     }
 }


788) /var/www/src/Twig/PlaceTypeFilter.php:13    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
 {
     public function getFilters()
     {
-        return [new TwigFilter('app_place_type', [$this, 'getType'])];
+        return [];
     }
     /**
      * Get string corresponding to a place type


789) /var/www/src/Twig/PlaceTypeFilter.php:14    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
 {
     public function getFilters()
     {
-        return [new TwigFilter('app_place_type', [$this, 'getType'])];
+        return [new TwigFilter('app_place_type', ['getType'])];
     }
     /**
      * Get string corresponding to a place type


790) /var/www/src/Twig/PlaceTypeFilter.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @param int $type
      * @return string|null
      */
-    public function getType(int $type) : ?string
+    protected function getType(int $type) : ?string
     {
         switch ($type) {
             case Place::TYPE_GENERIC:


791) /var/www/src/Twig/TrackImageExtension.php:20    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getFunctions()
     {
-        return [new TwigFunction('app_track_image', [$this, 'resize'])];
+        return [];
     }
     public function resize(Image $image, int $width, $height) : string
     {


792) /var/www/src/Twig/TrackImageExtension.php:21    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getFunctions()
     {
-        return [new TwigFunction('app_track_image', [$this, 'resize'])];
+        return [new TwigFunction('app_track_image', ['resize'])];
     }
     public function resize(Image $image, int $width, $height) : string
     {


793) /var/www/src/Type/DifficultyType.php:39    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     public function requiresSQLCommentHint(AbstractPlatform $platform)
     {
-        return true;
+        return false;
     }
     public function convertToDatabaseValue($value, AbstractPlatform $platform)
     {


794) /var/www/src/Type/DifficultyType.php:44    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function convertToDatabaseValue($value, AbstractPlatform $platform)
     {
-        if (!in_array($value, self::ENUM_VALUES)) {
+        if (in_array($value, self::ENUM_VALUES)) {
             throw new \InvalidArgumentException("Invalid difficulty: " . $value);
         }
         return $value;
     }

795) /var/www/src/Type/DifficultyType.php:45    [M] Throw_

--- Original
+++ New
@@ @@
     public function convertToDatabaseValue($value, AbstractPlatform $platform)
     {
         if (!in_array($value, self::ENUM_VALUES)) {
-            throw new \InvalidArgumentException("Invalid difficulty: " . $value);
+            new \InvalidArgumentException("Invalid difficulty: " . $value);
         }
         return $value;
     }
 }

796) /var/www/src/Upload/ImageUploader.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * @return array[entity, response]
      */
-    public function addImage(string $id, Request $request, callable $entityCreator) : array
+    protected function addImage(string $id, Request $request, callable $entityCreator) : array
     {
         $parentEntity = $this->entityRepository->findOneBy(['id' => $id]);
         if (!$parentEntity instanceof CreatedAtInterface) {


797) /var/www/src/Upload/ImageUploader.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function addImage(string $id, Request $request, callable $entityCreator) : array
     {
-        $parentEntity = $this->entityRepository->findOneBy(['id' => $id]);
+        $parentEntity = $this->entityRepository->findOneBy([]);
         if (!$parentEntity instanceof CreatedAtInterface) {
             throw new \Exception('Entity must implement SendAtInterface');
         }


798) /var/www/src/Upload/ImageUploader.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function addImage(string $id, Request $request, callable $entityCreator) : array
     {
         $parentEntity = $this->entityRepository->findOneBy(['id' => $id]);
-        if (!$parentEntity instanceof CreatedAtInterface) {
+        if ($parentEntity instanceof CreatedAtInterface) {
             throw new \Exception('Entity must implement SendAtInterface');
         }
         $file = $request->files->get('file');


799) /var/www/src/Upload/ImageUploader.php:49    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $parentEntity = $this->entityRepository->findOneBy(['id' => $id]);
         if (!$parentEntity instanceof CreatedAtInterface) {
-            throw new \Exception('Entity must implement SendAtInterface');
+            new \Exception('Entity must implement SendAtInterface');
         }
         $file = $request->files->get('file');
         /* @var $file UploadedFile */


800) /var/www/src/Upload/ImageUploader.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
-        if (!$file->isValid()) {
+        if ($file->isValid()) {
             return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();


801) /var/www/src/Upload/ImageUploader.php:55    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
         if (!$file->isValid()) {
-            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);


802) /var/www/src/Upload/ImageUploader.php:58    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
         if (!$file->isValid()) {
-            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);


803) /var/www/src/Upload/ImageUploader.php:59    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
         if (!$file->isValid()) {
-            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['status' => 2, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);


804) /var/www/src/Upload/ImageUploader.php:59    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
         if (!$file->isValid()) {
-            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['status' => 0, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);


805) /var/www/src/Upload/ImageUploader.php:60    [M] ArrayItem

--- Original
+++ New
@@ @@
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
         if (!$file->isValid()) {
-            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['status' => 1, 'error' > $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);


806) /var/www/src/Upload/ImageUploader.php:63    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $file = $request->files->get('file');
         /* @var $file UploadedFile */
         if (!$file->isValid()) {
-            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, [])];
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);


807) /var/www/src/Upload/ImageUploader.php:69    [M] MBString

--- Original
+++ New
@@ @@
             return [null, new Response(json_encode(['status' => 1, 'error' => $this->translator->trans('Upload failed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $extension = $file->getClientOriginalExtension();
-        $extension = mb_strtolower($extension);
+        $extension = strtolower($extension);
         if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
             return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }


808) /var/www/src/Upload/ImageUploader.php:71    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);
-        if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
+        if (!in_array($extension, ['jpg', 'png', 'gif'])) {
             return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;


809) /var/www/src/Upload/ImageUploader.php:71    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);
-        if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
+        if (in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
             return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;


810) /var/www/src/Upload/ImageUploader.php:72    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);
         if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
-            return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;
         $sqlFilepath = $parentEntity->getCreatedAt()->format('Y') . DIRECTORY_SEPARATOR . $parentEntity->getId();


811) /var/www/src/Upload/ImageUploader.php:75    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);
         if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
-            return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;
         $sqlFilepath = $parentEntity->getCreatedAt()->format('Y') . DIRECTORY_SEPARATOR . $parentEntity->getId();


812) /var/www/src/Upload/ImageUploader.php:77    [M] ArrayItem

--- Original
+++ New
@@ @@
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);
         if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
-            return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' > $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;
         $sqlFilepath = $parentEntity->getCreatedAt()->format('Y') . DIRECTORY_SEPARATOR . $parentEntity->getId();


813) /var/www/src/Upload/ImageUploader.php:80    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $extension = $file->getClientOriginalExtension();
         $extension = mb_strtolower($extension);
         if (!in_array($extension, ['jpeg', 'jpg', 'png', 'gif'])) {
-            return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, ['Content-Type' => 'text/json'])];
+            return [null, new Response(json_encode(['status' => ApiResponseInterface::STATUS_ERROR, 'error' => $this->translator->trans('Image format is not allowed')]), Response::HTTP_BAD_REQUEST, [])];
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;
         $sqlFilepath = $parentEntity->getCreatedAt()->format('Y') . DIRECTORY_SEPARATOR . $parentEntity->getId();


814) /var/www/src/Upload/ImageUploader.php:87    [M] Assignment

--- Original
+++ New
@@ @@
         }
         $uploadDirectory = $this->imagesDirectory . DIRECTORY_SEPARATOR;
         $sqlFilepath = $parentEntity->getCreatedAt()->format('Y') . DIRECTORY_SEPARATOR . $parentEntity->getId();
-        $uploadDirectory .= $sqlFilepath;
+        $uploadDirectory = $sqlFilepath;
         $uploadFilename = uniqid() . '.' . $extension;
         $sqlFilepath .= DIRECTORY_SEPARATOR . $uploadFilename;
         $file->move($uploadDirectory, $uploadFilename);


815) /var/www/src/Upload/ImageUploader.php:90    [M] Assignment

--- Original
+++ New
@@ @@
         $sqlFilepath = $parentEntity->getCreatedAt()->format('Y') . DIRECTORY_SEPARATOR . $parentEntity->getId();
         $uploadDirectory .= $sqlFilepath;
         $uploadFilename = uniqid() . '.' . $extension;
-        $sqlFilepath .= DIRECTORY_SEPARATOR . $uploadFilename;
+        $sqlFilepath = DIRECTORY_SEPARATOR . $uploadFilename;
         $file->move($uploadDirectory, $uploadFilename);
         $image = $entityCreator($sqlFilepath, $parentEntity);
         return [$image, new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
     }

816) /var/www/src/Upload/ImageUploader.php:92    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $uploadDirectory .= $sqlFilepath;
         $uploadFilename = uniqid() . '.' . $extension;
         $sqlFilepath .= DIRECTORY_SEPARATOR . $uploadFilename;
-        $file->move($uploadDirectory, $uploadFilename);
+        
         $image = $entityCreator($sqlFilepath, $parentEntity);
         return [$image, new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
     }
 }

817) /var/www/src/Upload/ImageUploader.php:99    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $sqlFilepath .= DIRECTORY_SEPARATOR . $uploadFilename;
         $file->move($uploadDirectory, $uploadFilename);
         $image = $entityCreator($sqlFilepath, $parentEntity);
-        return [$image, new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
+        return [new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
     }
 }


818) /var/www/src/Upload/ImageUploader.php:102    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $sqlFilepath .= DIRECTORY_SEPARATOR . $uploadFilename;
         $file->move($uploadDirectory, $uploadFilename);
         $image = $entityCreator($sqlFilepath, $parentEntity);
-        return [$image, new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
+        return [$image, new Response(json_encode([]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
     }
 }


819) /var/www/src/Upload/ImageUploader.php:104    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $sqlFilepath .= DIRECTORY_SEPARATOR . $uploadFilename;
         $file->move($uploadDirectory, $uploadFilename);
         $image = $entityCreator($sqlFilepath, $parentEntity);
-        return [$image, new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, ['Content-Type' => 'text/json'])];
+        return [$image, new Response(json_encode(['status' => ApiResponseInterface::STATUS_OK]), Response::HTTP_OK, [])];
     }
 }
